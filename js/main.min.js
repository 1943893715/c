(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./src/js/main.js":[function(require,module,exports){
'use strict';

var upgrades = require('./upgrades');
var gameState = require('./gamestate');
var gameTimer = require('./gametimer');
var gainCalculator = require('./gaincalculator');
var functionBuilder = require('./functionbuilder');
var animatedFlyTip = require('./animatedflytip');
var favico = require('./favico');
var gameController = require('./gamecontroller');
var upgradeManager = require('./upgrademanager');
var adManager = require('./admanager');
var chartConfigs = require('./chartconfigs');

angular.module('c', ['ui.bootstrap', 'hljs', 'LocalStorageModule', 'ngTable', 'angularMoment', 'jlareau.pnotify', 'highcharts-ng']).constant('Upgrades', upgrades).constant('Version', '0.0.1').config(['notificationServiceProvider', function (notificationServiceProvider) {
  notificationServiceProvider.setDefaults({
    addclass: 'stack-bar-bottom',
    width: '70%',
    styling: 'fontawesome'
  });
}]).service('favico', favico).service('AnimatedFlyTip', animatedFlyTip).service('GameState', gameState).service('AdManager', adManager).service('ChartConfigs', chartConfigs).service('GameTimer', gameTimer).service('UpgradeManager', upgradeManager).service('GainCalculator', gainCalculator).service('FunctionBuilder', functionBuilder).controller('Game', gameController);

},{"./admanager":"c:\\Users\\kempk\\Documents\\GitHub\\c\\src\\js\\admanager.js","./animatedflytip":"c:\\Users\\kempk\\Documents\\GitHub\\c\\src\\js\\animatedflytip.js","./chartconfigs":"c:\\Users\\kempk\\Documents\\GitHub\\c\\src\\js\\chartconfigs.js","./favico":"c:\\Users\\kempk\\Documents\\GitHub\\c\\src\\js\\favico.js","./functionbuilder":"c:\\Users\\kempk\\Documents\\GitHub\\c\\src\\js\\functionbuilder.js","./gaincalculator":"c:\\Users\\kempk\\Documents\\GitHub\\c\\src\\js\\gaincalculator.js","./gamecontroller":"c:\\Users\\kempk\\Documents\\GitHub\\c\\src\\js\\gamecontroller.js","./gamestate":"c:\\Users\\kempk\\Documents\\GitHub\\c\\src\\js\\gamestate.js","./gametimer":"c:\\Users\\kempk\\Documents\\GitHub\\c\\src\\js\\gametimer.js","./upgrademanager":"c:\\Users\\kempk\\Documents\\GitHub\\c\\src\\js\\upgrademanager.js","./upgrades":"c:\\Users\\kempk\\Documents\\GitHub\\c\\src\\js\\upgrades.js"}],"c:\\Users\\kempk\\Documents\\GitHub\\c\\src\\js\\admanager.js":[function(require,module,exports){
'use strict';

var ads = require('./ads');

var adManager = function adManager($interval, notificationService, GameState) {
  $interval(function () {

    if (!GameState.upgrade.has('Advertisements')) {
      return;
    }
    if (!GameState.adSet.get()) {
      return;
    }

    var ad = _.sample(ads);

    notificationService.notifyWithDefaults({
      title: '' + ad.name + ' <a target="_blank" href="' + ad.url + '"><span class=\'fa fa-external-link\'></span></a>',
      text: ad.text
    });
  }, 180000); //6 minutes

  return {};
};

adManager.$inject = ['$interval', 'notificationService', 'GameState'];

module.exports = adManager;

},{"./ads":"c:\\Users\\kempk\\Documents\\GitHub\\c\\src\\js\\ads.js"}],"c:\\Users\\kempk\\Documents\\GitHub\\c\\src\\js\\ads.js":[function(require,module,exports){
'use strict';

module.exports = [{
  name: 'IdleLands',
  url: 'http://webfe.idle.land',
  text: 'From the creator of this game, check out IdleLands, his prior project!'
}, {
  name: 'Conspiracy Clicker',
  url: 'http://deathraygames.com/play-online/miniLD48/',
  text: 'Made during a 48 hour period, this game captures the attention of that little conspiracist inside of us all. Find out how the real world operates.'
}, {
  name: 'Candy Empirical',
  url: 'http://candy-emperical.appspot.com/',
  text: 'A new incremental game with candy that makes candy. Start out with taffy progress through all the candy types.'
}, {
  name: 'Legend of the Fallen Warrior',
  url: 'https://tarnos12.github.io/project/',
  text: 'Surrounded by unfamiliar faces, the fallen warrior must try his best to survive. Will his skills be enough to help him through or will he have to grow and learn new talents in order to escape?'
}, {
  name: 'Critter Mound',
  url: 'yoyz.com/critter/',
  text: 'Breed new critters, breed stronger critters, destroy your enemies.'
}, {
  name: 'Progress Quest',
  url: 'http://progressquest.com/play/',
  text: 'Progress Quest is an antic and fantastical computer role-playing game, well worth the time you\'ll spend playing it.'
}, {
  name: 'Clickpocalypse 2',
  url: 'http://minmaxia.com/c2/',
  text: 'A fighter, ranger, wizard and a priest all set out to purge the land of evil... one dungeon at a time.'
}];

},{}],"c:\\Users\\kempk\\Documents\\GitHub\\c\\src\\js\\animatedflytip.js":[function(require,module,exports){
'use strict';

var animatedFlyTip = function animatedFlyTip($filter) {
  return {
    fly: function fly(num) {
      var useSeparator = arguments[1] === undefined ? false : arguments[1];

      var $element = $('<div />');

      var numString = num;
      if (useSeparator) {
        numString = $filter('number')(numString, 0);
      }

      if (num < 0) {
        $element.addClass('text-danger');
        $element.html(numString);
      } else if (num > 0) {
        $element.addClass('text-success');
        $element.html('+' + numString);
      }

      $element.css('position', 'absolute');
      $('body').append($element);

      var $base = $('#navbar-unit');
      if (!$base.length) {
        return;
      }

      $element.offset({ left: $base.offset().left, top: $base.offset().top });

      $element.animate({ top: '60px' });
      $element.animate({ opacity: 0, top: '60px' }, 500, 'swing', function () {
        $(this).remove();
      });
    }
  };
};

animatedFlyTip.$inject = ['$filter'];

module.exports = animatedFlyTip;

},{}],"c:\\Users\\kempk\\Documents\\GitHub\\c\\src\\js\\chartconfigs.js":[function(require,module,exports){
'use strict';

var chartConfigs = function chartConfigs($q, GameState) {
  var defer = $q.defer();

  Highcharts.setOptions({
    global: {
      useUTC: false
    },
    lang: {
      thousandsSep: ','
    }
  });

  var overTime = {

    values: function values() {
      return _.pairs(GameState.sourcesGet.get());
    },

    chart: function chart() {
      return {
        options: {
          chart: {
            type: 'pie'
          },
          plotOptions: {
            pie: {
              dataLabels: {
                enabled: true
              },
              showInLegend: true
            }
          }
        },
        title: {
          text: ''
        },
        series: [{
          data: this.values()
        }]
      };
    }
  };

  var production = {
    values: function values() {
      return GameState.historyGet.get();
    },
    chart: function chart() {
      return {
        options: {
          chart: {
            type: 'line'
          },
          legend: {
            enabled: false
          },
          yAxis: {
            title: {
              text: 'Production'
            }
          },
          xAxis: {
            type: 'datetime',
            tickPixelInterval: 150,
            title: {
              text: 'Timestamp'
            }
          }
        },
        title: {
          text: ''
        },
        series: [{
          data: this.values()
        }]
      };
    }
  };

  GameState.unit.watch().then(null, null, function () {
    defer.notify({ overTime: overTime.values(), production: production.values() });
  });

  return {
    get: function get() {
      return { overTime: overTime.chart(), production: production.chart() };
    },
    watch: function watch() {
      return defer.promise;
    }
  };
};

chartConfigs.$inject = ['$q', 'GameState'];

module.exports = chartConfigs;

},{}],"c:\\Users\\kempk\\Documents\\GitHub\\c\\src\\js\\favico.js":[function(require,module,exports){
'use strict';

var favico = function favico() {
  var favico = new Favico({
    animation: 'fade'
  });

  var currentNum = 0;

  var badge = function badge(num) {
    if (num === currentNum) {
      return;
    }
    currentNum = num;
    favico.badge(num);
  };
  var reset = function reset() {
    favico.reset();
  };

  return {
    badge: badge,
    reset: reset
  };
};

module.exports = favico;

},{}],"c:\\Users\\kempk\\Documents\\GitHub\\c\\src\\js\\functionbuilder.js":[function(require,module,exports){
'use strict';

var functionBuilder = function functionBuilder(GameState, GainCalculator, $window) {
  return {
    build: function build() {

      var upgrade = GameState.upgrade;

      var unitText = '' + GameState.currencySet.get() + 's';

      var functionHeader = ['', ''];
      if (GameState.upgrade.has('Function')) {
        functionHeader = ['function increaseUnits() {', '}'];
      }

      var iterationHeader = ['', ''];
      if (GameState.upgrade.has('Basic Iteration')) {
        iterationHeader = ['for(var i = 0; i < ' + GainCalculator.iteration(upgrade) + '; i++) {', '}'];
      }

      var timeout = '';
      if (GameState.upgrade.has('Basic Timer')) {
        var timeoutText = 'increaseUnits';

        if (GameState.upgrade.has('Basic Timer Boost')) {
          timeoutText = 'function massiveGains() {\n  for(var i = 0; i < ' + GainCalculator.timerBoost(upgrade) + '; i++) {\n    ' + timeoutText + '();\n  }\n}';
        }

        timeout = '$interval(' + timeoutText + ', ' + GainCalculator.timer(upgrade) + ');\n';
      }

      var animationHeader = ['', ''];
      if (GameState.upgrade.has('Basic Animation')) {
        animationHeader = ['var totalUnitsGained = 0;', 'units += totalUnitsGained;\n  animateUnitChange(totalUnitsGained);'];
        unitText = 'totalUnitsGained';
      }

      var saveHeader = ['', ''];
      if (GameState.upgrade.has('Save', 1)) {
        saveHeader = ['\nvar currentTick = 0;', '\n  if(++currentTick % 10 === 0) {\n    currentTick = 0;\n    save();\n  }'];
      }

      if (GameState.upgrade.has('Save', 3)) {
        saveHeader = ['', '\n  save();'];
      }

      // dump it on the page. it's an "exploit"
      $window.increaseUnits = function () {
        var mult = arguments[0] === undefined ? 1 : arguments[0];
        var source = arguments[1] === undefined ? 'Cheating' : arguments[1];
        GameState.unit.inc(mult * GainCalculator.all(upgrade), true, source);
      };

      return '' + timeout + '' + saveHeader[0] + '\n' + functionHeader[0] + '\n  ' + animationHeader[0] + '\n  ' + iterationHeader[0] + '\n    ' + unitText + ' += ' + GainCalculator.boost(upgrade) + ';\n  ' + iterationHeader[1] + '\n  ' + saveHeader[1] + '\n  ' + animationHeader[1] + '\n' + functionHeader[1] + '\n';
    }
  };
};

functionBuilder.$inject = ['GameState', 'GainCalculator', '$window'];

module.exports = functionBuilder;

},{}],"c:\\Users\\kempk\\Documents\\GitHub\\c\\src\\js\\gaincalculator.js":[function(require,module,exports){
'use strict';

var gainCalculator = function gainCalculator() {

  var boost = function boost(upgrade) {
    return Math.pow((upgrade.getKey('Basic Boost') || 0) + 1, 2);
  };

  var iteration = function iteration(upgrade) {
    var iterLevel = upgrade.getKey('Basic Iteration');
    if (!iterLevel) {
      return 1;
    }
    return Math.pow(2, iterLevel + 1);
  };

  var timerBoost = function timerBoost(upgrade) {
    return Math.pow((upgrade.getKey('Basic Timer Boost') || 0) + 1, 2);
  };

  var timer = function timer(upgrade) {
    var basicReduction = 0.05 * upgrade.getKey('Basic Timer');
    var advancedReduction = 0.15 * upgrade.getKey('Advanced Timer');
    advancedReduction = _.isNaN(advancedReduction) ? 0 : advancedReduction;
    return 30000 - Math.round(30000 * (basicReduction + advancedReduction));
  };

  var maxHistory = function maxHistory(upgrade) {
    return 10 + 5 * (upgrade.getKey('Production History') || 0);
  };

  return {
    boost: boost,
    iteration: iteration,
    timer: timer,
    timerBoost: timerBoost,
    maxHistory: maxHistory,
    all: function all(upgrade) {
      return boost(upgrade) * iteration(upgrade);
    }
  };
};

module.exports = gainCalculator;

},{}],"c:\\Users\\kempk\\Documents\\GitHub\\c\\src\\js\\gamecontroller.js":[function(require,module,exports){
'use strict';

var gameController = function gameController($scope, $window, $interval, $filter, $modal, GameState, ChartConfigs, GameTimer, UpgradeManager, FunctionBuilder, NgTableParams) {
  $scope._visibleUpgrades = [];
  $scope.groupVisibleHash = {};

  $scope.currencyName = GameState.currencySet.get();
  $scope.changeCurrency = function () {
    bootbox.prompt({ title: 'What would you like to call the currency?', value: $scope.currencyName, callback: function callback(result) {
        if (!result || !result.trim()) {
          return;
        }
        GameState.currencySet.set(result);
        $scope.currencyName = GameState.currencySet.get();
        $scope.$digest();
      } });
  };

  $scope.ads = GameState.adSet.get();
  $scope.setAds = function (val) {
    GameState.adSet.set(val);
  };

  $scope.tableParams = new NgTableParams({
    page: 1,
    count: 1000
  }, {
    groupBy: 'category',
    total: $scope._visibleUpgrades.length,
    getData: function getData($defer, params) {
      var data = $scope._visibleUpgrades;

      var orderedData = params.sorting() ? $filter('orderBy')(data, params.orderBy()) : data;

      var filteredData = params.filter() ? $filter('filter')(orderedData, params.filter()) : orderedData;

      params.total($scope._visibleUpgrades.length);

      $defer.resolve(filteredData.slice((params.page() - 1) * params.count(), params.page() * params.count()));
    }
  });

  $scope.hasUpgrade = function (key) {
    var level = arguments[1] === undefined ? 0 : arguments[1];

    return GameState.upgrade.has(key, level);
  };

  $scope.hasUnits = function (amt) {
    return GameState.unit.has(amt);
  };

  $scope.buyUpgrade = function (upgName) {
    var levels = arguments[1] === undefined ? 1 : arguments[1];

    do {
      GameState.upgrade.inc(upgName);
    } while (--levels > 0);
  };

  $scope.gainUnits = function () {
    $window.increaseUnits(1, 'Click');
  };

  $scope.save = function () {
    GameState.save();
  };

  $scope.refresh = function () {
    $scope._units = GameState.unit.get();

    var newUpgrades = UpgradeManager.visible();
    var visible = _.pluck($scope._visibleUpgrades, 'name');
    var newPlucked = _.pluck(newUpgrades, 'name');
    if (newPlucked.length !== visible.length || _.difference(newPlucked, visible).length > 0) {
      $scope._visibleUpgrades = newUpgrades;
    }
    $scope._function = FunctionBuilder.build();
    $scope.tableParams.reload();
  };

  $scope.openModal = function (modal) {
    $modal.open({
      templateUrl: 'modal-' + modal,
      scope: $scope
    });
  };

  $scope.refresh();
  $scope._timer = 0;
  $scope._timermax = 0;
  var timerInterval;

  GameState.unit.watch().then(null, null, $scope.refresh);
  GameState.upgrade.watch().then(null, null, $scope.refresh);

  GameTimer.watch().then(null, null, function (newTimerValue) {
    $scope._timer = $scope._timerMax = newTimerValue;
    if (timerInterval) {
      $interval.cancel(timerInterval);
    }
    timerInterval = $interval(function () {
      $scope._timer -= 100;
    }, 100);
  });

  $scope.chartData = ChartConfigs.get();

  ChartConfigs.watch().then(null, null, function (chartData) {
    _.each(_.keys(chartData), function (key) {
      $scope.chartData[key].series[0].data = chartData[key];
    });
  });

  $scope.saveObject = function () {
    return GameState.buildSaveObject();
  };

  $scope.debugInfo = $window.dumpDebugInfo = function () {
    return JSON.stringify($scope.saveObject(), null, 4);
  };

  $scope.resetGame = function () {
    var callback = arguments[0] === undefined ? function () {} : arguments[0];

    var finalCallback = function finalCallback() {
      GameState.hardReset();
      $scope.refresh();
      $scope.currencyName = GameState.currencySet.get();
      callback();
    };

    if ($scope.hasUpgrade('Confirmation Dialogs')) {
      bootbox.confirm('Are you sure you want to hard reset? Nothing will be saved.', function (result) {
        if (!result) {
          return;
        }
        finalCallback();
      });
    } else {
      finalCallback();
    }
  };
};

gameController.$inject = ['$scope', '$window', '$interval', '$filter', '$modal', 'GameState', 'ChartConfigs', 'GameTimer', 'UpgradeManager', 'FunctionBuilder', 'ngTableParams'];

module.exports = gameController;

},{}],"c:\\Users\\kempk\\Documents\\GitHub\\c\\src\\js\\gamestate.js":[function(require,module,exports){
'use strict';

var gameState = function gameState($q, notificationService, $filter, UPGRADES, GainCalculator, localStorage, AnimatedFlyTip) {

  var getNewState = function getNewState() {
    return {
      upgrades: {},
      units: 0,
      start: Date.now(),
      lastSave: Date.now(),
      currencyName: 'Unit',
      ads: true,
      sources: {},
      history: []
    };
  };

  var currentState = getNewState();

  var upgradeDefer = $q.defer();
  var unitDefer = $q.defer();

  var buildSaveObject = function buildSaveObject() {
    return currentState;
  };

  var save = function save() {
    currentState.lastSave = Date.now();
    localStorage.set('game', buildSaveObject());
  };

  var hardReset = function hardReset() {
    currentState = getNewState();
    save();
  };

  var load = function load() {
    var state = localStorage.get('game');

    if (!state) {
      return;
    }

    _.assign(currentState, state);

    if (!upgrade.has('Offline Progress')) {
      return;
    }

    var diff = Date.now() - state.lastSave;
    var multiplier = 0.25 + 0.25 * upgrade.getKey('Offline Progress');
    var timersElapsed = Math.floor(diff / GainCalculator.timer(upgrade));
    var gain = timersElapsed * multiplier * GainCalculator.all(upgrade) * GainCalculator.timerBoost(upgrade);

    if (gain <= 0) {
      return;
    }

    unit.inc(gain, false, 'Offline Progress');
    save();

    if (upgrade.has('Notifications')) {
      var numString = gain;
      if (upgrade.has('Number Formatting')) {
        numString = $filter('number')(numString, 0);
      }

      notificationService.notifyWithDefaults({
        type: 'success',
        title: 'Offline Progression',
        text: 'You gained ' + numString + ' ' + currentState.currencyName + 's while offline. Welcome back!'
      });
    }
  };

  var historyGet = {
    get: function get() {
      return currentState.history;
    }
  };

  var sourcesGet = {
    get: function get() {
      return currentState.sources;
    }
  };

  var currencySet = {
    set: function set(newName) {
      currentState.currencyName = newName;save();
    },
    get: function get() {
      return currentState.currencyName;
    }
  };

  var adSet = {
    set: function set(isSet) {
      currentState.ads = isSet;
    },
    get: function get() {
      return currentState.ads;
    }
  };

  var upgrade = {
    has: function has(key) {
      var level = arguments[1] === undefined ? 0 : arguments[1];
      return currentState.upgrades[key] > level;
    },
    get: function get() {
      return currentState.upgrades;
    },
    getKey: function getKey(key) {
      return currentState.upgrades[key];
    },
    inc: function inc(key) {

      var nextLevel = currentState.upgrades[key] || 0;

      var cost = _.isFunction(UPGRADES[key].levels) ? UPGRADES[key].levels(nextLevel).cost : UPGRADES[key].levels[nextLevel].cost;
      if (currentState.units < cost) {
        return;
      }

      if (!currentState.upgrades[key]) {
        currentState.upgrades[key] = 0;
      }
      currentState.upgrades[key]++;
      unit.inc(-cost);
      upgradeDefer.notify({ key: key, level: currentState.upgrades[key], all: currentState.upgrades });
    },
    watch: function watch() {
      return upgradeDefer.promise;
    }
  };

  var manageHistory = function manageHistory() {
    var max = GainCalculator.maxHistory(upgrade);

    currentState.history.push({ x: Date.now(), y: currentState.units });
    if (currentState.history.length > max) {
      currentState.history.shift();
    }
  };

  var tick = 0;

  var unit = {
    has: function has(amt) {
      return currentState.units > amt;
    },
    inc: function inc(amt) {
      var display = arguments[1] === undefined ? true : arguments[1];
      var source = arguments[2] === undefined ? 'Click' : arguments[2];

      currentState.units += amt;

      manageHistory();

      if (!currentState.sources[source]) {
        currentState.sources[source] = 0;
      }

      if (amt > 0) {
        currentState.sources[source] += amt;
      }

      unitDefer.notify(currentState.units);

      if (upgrade.has('Basic Animation') && display) {
        AnimatedFlyTip.fly(amt, upgrade.has('Number Formatting'));
      }

      if (upgrade.has('Save', 1) && !upgrade.has('Save', 3)) {
        if (++tick % 10 === 0) {
          tick = 0;
          save();
        }
      }

      if (upgrade.has('Save', 3)) {
        save();
      }
    },
    get: function get() {
      return currentState.units;
    },
    watch: function watch() {
      return unitDefer.promise;
    }
  };

  load();

  return {
    upgrade: upgrade,
    unit: unit,
    currencySet: currencySet,
    adSet: adSet,
    sourcesGet: sourcesGet,
    historyGet: historyGet,
    save: save,
    buildSaveObject: buildSaveObject,
    hardReset: hardReset
  };
};

gameState.$inject = ['$q', 'notificationService', '$filter', 'Upgrades', 'GainCalculator', 'localStorageService', 'AnimatedFlyTip'];

module.exports = gameState;

},{}],"c:\\Users\\kempk\\Documents\\GitHub\\c\\src\\js\\gametimer.js":[function(require,module,exports){
'use strict';

var gameTimer = function gameTimer($q, $interval, $timeout, $window, GameState, AdManager, GainCalculator) {

  var interval = null;
  var timerDefer = $q.defer();

  var startTimer = function startTimer() {
    var upgradeData = arguments[0] === undefined ? { key: 'Timer' } : arguments[0];

    if (!GameState.upgrade.has('Basic Timer')) {
      return;
    }
    if (!_.contains(upgradeData.key, 'Timer')) {
      return;
    }

    if (interval) {
      $interval.cancel(interval);
    }

    interval = $interval(function () {
      $window.increaseUnits(1 + GainCalculator.timerBoost(GameState.upgrade), 'Timer');
      timerDefer.notify(GainCalculator.timer(GameState.upgrade));
    }, GainCalculator.timer(GameState.upgrade));

    timerDefer.notify(GainCalculator.timer(GameState.upgrade));
  };

  if (GameState.upgrade.has('Basic Timer')) {
    $timeout(startTimer, 0);
  }

  GameState.upgrade.watch().then(null, null, startTimer);

  return {
    watch: function watch() {
      return timerDefer.promise;
    }
  };
};

gameTimer.$inject = ['$q', '$interval', '$timeout', '$window', 'GameState', 'AdManager', 'GainCalculator'];

module.exports = gameTimer;

},{}],"c:\\Users\\kempk\\Documents\\GitHub\\c\\src\\js\\upgrademanager.js":[function(require,module,exports){
'use strict';

var upgradeManager = function upgradeManager(GameState, UPGRADES, favico) {

  var hasUpgrade = function hasUpgrade(key) {
    var level = arguments[1] === undefined ? 0 : arguments[1];

    return GameState.upgrade.has(key, level);
  };

  var visible = function visible() {

    var current = GameState.unit.get();
    var allRet = [];

    _.each(UPGRADES, function (item, itemName) {

      var ret = [];

      var meetsAllReqs = true;

      _.each(item.requirements, function (req, key) {
        if (!hasUpgrade(key, req)) {
          meetsAllReqs = false;
        }
      });

      if (!meetsAllReqs) {
        return;
      }

      var levels = item.levels;
      if (_.isFunction(item.levels)) {
        var nextLevel = GameState.upgrade.getKey(itemName) || 0;
        levels = {};
        levels[nextLevel] = item.levels(nextLevel);
      }

      _.each(levels, function (level, i) {
        var visLevel = GameState.upgrade.getKey('Upgrade Visibility');
        var visibilityBoost = 1 + (_.isUndefined(visLevel) ? 0 : 0.15 * visLevel);
        var prevItem = ret[ret.length - 1];
        var totalCost = level.cost + (prevItem ? prevItem.cost : 0);

        if (hasUpgrade(itemName, i) || totalCost / visibilityBoost > current) {
          return;
        }

        ret.push({
          name: itemName,
          level: i,
          cost: totalCost,
          description: level.description,
          buyLevels: 1 + (prevItem ? prevItem.buyLevels : 0),
          category: item.category
        });
      });

      allRet.push.apply(allRet, ret);
    });

    if (hasUpgrade('Alphabetized Upgrades')) {
      allRet = _.sortByOrder(allRet, ['name', 'level'], [true, true]);
    }

    if (hasUpgrade('Best Favicon')) {
      var buyableUpgrades = _.filter(allRet, function (item) {
        return item.cost < current;
      }).length;
      if (buyableUpgrades > 0) {
        favico.badge(buyableUpgrades);
      } else {
        favico.reset();
      }
    }

    return allRet;
  };

  return {
    visible: _.throttle(visible, 50)
  };
};

upgradeManager.$inject = ['GameState', 'Upgrades', 'favico'];

module.exports = upgradeManager;

},{}],"c:\\Users\\kempk\\Documents\\GitHub\\c\\src\\js\\upgrades.js":[function(require,module,exports){
'use strict';

module.exports = {
  Scoreboard: {
    category: 'Visual',
    levels: [{ cost: 10, description: 'Visualize your score!' }]
  },
  'Basic Layout': {
    category: 'Visual',
    levels: [{ cost: 15, description: 'A slightly better layout.' }, { cost: 200, description: 'Another slightly better layout.' }]
  },
  'Better Layout': {
    category: 'Visual',
    requirements: { 'Basic Layout': 1 },
    levels: [{ cost: 200, description: 'One of the better layouts you get to see.' }, { cost: 2000, description: 'Probably the best layout in the game.' }]
  },
  Function: {
    category: 'Tech',
    levels: [{ cost: 20, description: 'Access to a function is necessary to gain more power.' }]
  },
  'Basic Iteration': {
    category: 'Tech',
    requirements: { Function: 0 },
    levels: [{ cost: 50, description: 'More iterations means faster production.' }, { cost: 300, description: 'Even more iterations means even faster production.' }, { cost: 20000, description: 'Yet more iterations means yet faster production.' }, { cost: 150000, description: 'Many iterations means much faster production.' }]
  },
  'Basic Timer': {
    category: 'Tech',
    requirements: { Function: 0 },
    levels: [{ cost: 50, description: 'A timer runs and automatically produces for you every so often.' }, { cost: 600, description: 'The timing of the timer is slightly faster.' }, { cost: 20000, description: 'The timer runs even faster now.' }, { cost: 100000, description: 'The timer goes zoom zoom!' }]
  },
  'Basic Boost': {
    category: 'Tech',
    requirements: { Function: 0 },
    levels: [{ cost: 10, description: 'Bigger boost means more production happening at once.' }, { cost: 1000, description: 'Even bigger boost means even more production.' }, { cost: 25000, description: 'Yet a bigger boost means a higher production yield.' }, { cost: 200000, description: 'The biggest boost means the best production.' }]
  },
  Capitalization: {
    category: 'Visual',
    levels: [{ cost: 100, description: 'Sometimes good punctuation just looks nice.' }]
  },
  Preformatting: {
    category: 'Visual',
    requirements: { 'Basic Iteration': 0 },
    levels: [{ cost: 1500, description: 'Better code formatting for readability' }]
  },
  'Visual Countdown': {
    category: 'Visual',
    requirements: { 'Basic Timer': 0 },
    levels: [{ cost: 1000, description: 'It might help to see the countdown for the timer run.' }]
  },
  'Page Title': {
    category: 'Cosmetic',
    requirements: { 'Basic Layout': 0 },
    levels: [{ cost: 500, description: 'A nicer looking page title. So revealing!' }]
  },
  'Better Page Title': {
    category: 'Cosmetic',
    requirements: { 'Page Title': 0, Scoreboard: 0 },
    levels: [{ cost: 2500, description: 'Just when you thought the page title looked good, it gets better!' }]
  },
  'Alphabetized Upgrades': {
    category: 'Cosmetic',
    requirements: { Capitalization: 0, 'Better Layout': 0 },
    levels: [{ cost: 5000, description: 'Putting the upgrades in some kind of order makes them much easier to navigate.' }]
  },
  'Upgrade Visibility': {
    category: 'Cosmetic',
    requirements: { 'Alphabetized Upgrades': 0 },
    levels: [{ cost: 6500, description: 'Upgrades will appear slightly before you can buy them.' }, { cost: 8500, description: 'Upgrades will appear a while before you can buy them.' }, { cost: 10500, description: 'Upgrades will show up quite a ways before you can buy them.' }]
  },
  'Progress Bar': {
    category: 'Visual',
    requirements: { 'Better Layout': 1, 'Basic Color': 0, 'Visual Countdown': 0 },
    levels: [{ cost: 5000, description: 'Transform your countdown into a progress bar instead!' }]
  },
  'Basic Style': {
    category: 'Visual',
    requirements: { 'Better Layout': 1 },
    levels: [{ cost: 10000, description: 'Yes, it does get better! This upgrade makes the table look nicer.' }, { cost: 20000, description: 'This upgrade fixes some slight alignment issues introduced by the previous upgrade.' }]
  },
  'Basic Color': {
    category: 'Visual',
    requirements: { 'Basic Style': 0 },
    levels: [{ cost: 12500, description: 'Add some color to the page.' }]
  },
  Iconography: {
    category: 'Visual',
    requirements: { 'Basic Style': 0 },
    levels: [{ cost: 25000, description: 'Get some icons on the page.' }]
  },
  'Number Formatting': {
    category: 'Cosmetic',
    requirements: { 'Basic Style': 0 },
    levels: [{ cost: 20000, description: 'Format the numbers more nicely!' }]
  },
  'Basic Animation': {
    category: 'Cosmetic',
    requirements: { 'Basic Style': 0, 'Basic Iteration': 0, 'Basic Color': 0, 'Better Layout': 1 },
    levels: [{ cost: 100000, description: 'Sprinkle some animations onto the page.' }]
  },
  Favicon: {
    category: 'Cosmetic',
    requirements: { 'Better Layout': 1 },
    levels: [{ cost: 2000, description: 'Add the favicon to the header bar.' }]
  },
  'Best Favicon': {
    category: 'Cosmetic',
    requirements: { 'Better Page Title': 0, Favicon: 0 },
    levels: [{ cost: 100000, description: 'Get notified via favicon whenever you have a new upgrade to purchase.' }]
  },
  'Syntax Highlighting': {
    category: 'Cosmetic',
    requirements: { Preformatting: 0 },
    levels: [{ cost: 50000, description: 'Make every code portion look even better!' }]
  },
  Save: {
    category: 'Tech',
    requirements: { 'Basic Layout': 0 },
    levels: [{ cost: 300, description: 'Introduce a save button that allows you to save your progress.' }, { cost: 5000, description: 'Introduce a mechanic that saves occasionally.' }, { cost: 20000, description: 'Introduce a debug menu where you can see your save data.' }, { cost: 150000, description: 'Make the game save automatically after production or purchases.' }]
  },
  'Advanced Timer': {
    category: 'Tech',
    requirements: { 'Basic Timer': 3 },
    levels: [{ cost: 200000, description: 'The timer is back and faster than ever.' }, { cost: 750000, description: 'Just when you thought the timer was out of tricks, it gets faster!' }, { cost: 1500000, description: 'The fastest timer yet!' }]
  },
  'Best Table': {
    category: 'Tech',
    requirements: { 'Basic Style': 1, 'Alphabetized Upgrades': 0 },
    levels: [{ cost: 250000, description: 'This gives you the best upgrade table possible!' }]
  },
  Menu: {
    category: 'Tech',
    requirements: { 'Basic Layout': 0 },
    levels: [{ cost: 2500, description: 'Buy a dropdown menu. Things end up here.' }]
  },
  'Help Menu': {
    category: 'Tech',
    requirements: { Menu: 0 },
    levels: [{ cost: 2, description: 'The cheapest upgrade in the game. I bet you have no idea what it does.' }]
  },
  Tooltips: {
    category: 'Tech',
    requirements: { 'Help Menu': 0 },
    levels: [{ cost: 17500, description: 'Well, this sure is self-referential.' }]
  },
  'Options Menu': {
    category: 'Tech',
    requirements: { Menu: 0 },
    levels: [{ cost: 5000, description: 'All of the stange options go here. Also, you can reset your game.' }]
  },
  'Offline Progress': {
    category: 'Tech',
    requirements: { 'Basic Timer': 0 },
    levels: [{ cost: 10000, description: 'You will gain progress slowly, even while the game is not open.' }, { cost: 100000, description: 'You will gain progress slightly faster, even while the game is not open.' }, { cost: 1000000, description: 'You will gain progress normally, even while the game is not open.' }]
  },
  'Confirmation Dialogs': {
    category: 'Tech',
    requirements: { 'Help Menu': 0 },
    levels: [{ cost: 100000, description: 'You get notified of potentially dangerous actions. Beware!' }]
  },
  'Currency Name Change': {
    category: 'Cosmetic',
    requirements: { 'Options Menu': 0 },
    levels: [{ cost: 650000, description: 'If you dislike the name units, you can change it!' }]
  },
  'Basic Timer Boost': {
    category: 'Tech',
    requirements: { 'Basic Timer': 0 },
    levels: [{ cost: 10000, description: 'You get more production via timer methods.' }, { cost: 500000, description: 'You get even more production via the timer.' }, { cost: 2500000, description: 'The timer is now quite lucrative.' }]
  },
  Notifications: {
    category: 'Tech',
    requirements: { 'Basic Animation': 0, Iconography: 0, 'Basic Color': 0, 'Basic Style': 0 },
    levels: [{ cost: 50000, description: 'Get notified about various happenings!' }]
  },
  Advertisements: {
    category: 'Tech',
    requirements: { Notifications: 0 },
    levels: [{ cost: 20000, description: 'Advertisements for other, related games!' }]
  },
  Adblocker: {
    category: 'Tech',
    requirements: { Advertisements: 0 },
    levels: [{ cost: 200000, description: 'Ads got you down? Turn them off with this fancy upgrade!' }]
  },
  'Tabbed Output': {
    category: 'Tech',
    requirements: { 'Better Layout': 0, 'Basic Style': 0 },
    levels: [{ cost: 200000, description: 'Produce some tabs for your output section! Note, this only comes with one tab -- the one you have!' }]
  },
  'Over-time Production': {
    category: 'Tech',
    requirements: { 'Tabbed Output': 0, 'Number Formatting': 0 },
    levels: [{ cost: 2000000, description: 'Produce a new tab that shows your production over time!' }]
  },
  'Production Breakdown': {
    category: 'Tech',
    requirements: { 'Tabbed Output': 0, 'Number Formatting': 0 },
    levels: [{ cost: 2000000, description: 'Produce a new tab that shows your production breakdown!' }]
  },
  'Production History ': {
    category: 'Tech',
    requirements: { 'Production Breakdown': 0 },
    levels: [{ cost: 50000, description: 'Slightly improve your historical data!' }, { cost: 125000, description: 'Slightly improve your historical data!' }]
  }
};

},{}]},{},["./src/js/main.js"])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjOi9Vc2Vycy9rZW1way9Eb2N1bWVudHMvR2l0SHViL2Mvc3JjL2pzL21haW4uanMiLCJjOi9Vc2Vycy9rZW1way9Eb2N1bWVudHMvR2l0SHViL2Mvc3JjL2pzL2FkbWFuYWdlci5qcyIsImM6L1VzZXJzL2tlbXBrL0RvY3VtZW50cy9HaXRIdWIvYy9zcmMvanMvYWRzLmpzIiwiYzovVXNlcnMva2VtcGsvRG9jdW1lbnRzL0dpdEh1Yi9jL3NyYy9qcy9hbmltYXRlZGZseXRpcC5qcyIsImM6L1VzZXJzL2tlbXBrL0RvY3VtZW50cy9HaXRIdWIvYy9zcmMvanMvY2hhcnRjb25maWdzLmpzIiwiYzovVXNlcnMva2VtcGsvRG9jdW1lbnRzL0dpdEh1Yi9jL3NyYy9qcy9mYXZpY28uanMiLCJjOi9Vc2Vycy9rZW1way9Eb2N1bWVudHMvR2l0SHViL2Mvc3JjL2pzL2Z1bmN0aW9uYnVpbGRlci5qcyIsImM6L1VzZXJzL2tlbXBrL0RvY3VtZW50cy9HaXRIdWIvYy9zcmMvanMvZ2FpbmNhbGN1bGF0b3IuanMiLCJjOi9Vc2Vycy9rZW1way9Eb2N1bWVudHMvR2l0SHViL2Mvc3JjL2pzL2dhbWVjb250cm9sbGVyLmpzIiwiYzovVXNlcnMva2VtcGsvRG9jdW1lbnRzL0dpdEh1Yi9jL3NyYy9qcy9nYW1lc3RhdGUuanMiLCJjOi9Vc2Vycy9rZW1way9Eb2N1bWVudHMvR2l0SHViL2Mvc3JjL2pzL2dhbWV0aW1lci5qcyIsImM6L1VzZXJzL2tlbXBrL0RvY3VtZW50cy9HaXRIdWIvYy9zcmMvanMvdXBncmFkZW1hbmFnZXIuanMiLCJjOi9Vc2Vycy9rZW1way9Eb2N1bWVudHMvR2l0SHViL2Mvc3JjL2pzL3VwZ3JhZGVzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUNDQSxJQUFJLFFBQVEsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFD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QUFFLEVBQUMsZUFBZSxFQUFFLENBQUMsRUFBRSxhQUFhLEVBQUUsQ0FBQyxFQUFDO0FBQ3BELFVBQU0sRUFBRSxDQUFDLEVBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsb0dBQW9HLEVBQUMsQ0FBQztHQUM1STtBQUNELHdCQUFzQixFQUFFO0FBQ3RCLFlBQVEsRUFBRSxNQUFNO0FBQ2hCLGdCQUFZLEVBQUUsRUFBQyxlQUFlLEVBQUUsQ0FBQyxFQUFFLG1CQUFtQixFQUFFLENBQUMsRUFBQztBQUMxRCxVQUFNLEVBQUUsQ0FBQyxFQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLHlEQUF5RCxFQUFDLENBQUM7R0FDbEc7QUFDRCx3QkFBc0IsRUFBRTtBQUN0QixZQUFRLEVBQUUsTUFBTTtBQUNoQixnQkFBWSxFQUFFLEVBQUMsZUFBZSxFQUFFLENBQUMsRUFBRSxtQkFBbUIsRUFBRSxDQUFDLEVBQUM7QUFDMUQsVUFBTSxFQUFFLENBQUMsRUFBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSx5REFBeUQsRUFBQyxDQUFDO0dBQ2xHO0FBQ0QsdUJBQXFCLEVBQUU7QUFDckIsWUFBUSxFQUFFLE1BQU07QUFDaEIsZ0JBQVksRUFBRSxFQUFDLHNCQUFzQixFQUFFLENBQUMsRUFBQztBQUN6QyxVQUFNLEVBQUUsQ0FDTixFQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLHdDQUF3QyxFQUFDLEVBQ3BFLEVBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsd0NBQXdDLEVBQUMsQ0FDdEU7R0FDRjtDQUNGLENBQUMiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiXHJcbnZhciB1cGdyYWRlcyA9IHJlcXVpcmUoJy4vdXBncmFkZXMnKTtcclxudmFyIGdhbWVTdGF0ZSA9IHJlcXVpcmUoJy4vZ2FtZXN0YXRlJyk7XHJcbnZhciBnYW1lVGltZXIgPSByZXF1aXJlKCcuL2dhbWV0aW1lcicpO1xyXG52YXIgZ2FpbkNhbGN1bGF0b3IgPSByZXF1aXJlKCcuL2dhaW5jYWxjdWxhdG9yJyk7XHJcbnZhciBmdW5jdGlvbkJ1aWxkZXIgPSByZXF1aXJlKCcuL2Z1bmN0aW9uYnVpbGRlcicpO1xyXG52YXIgYW5pbWF0ZWRGbHlUaXAgPSByZXF1aXJlKCcuL2FuaW1hdGVkZmx5dGlwJyk7XHJcbnZhciBmYXZpY28gPSByZXF1aXJlKCcuL2ZhdmljbycpO1xyXG52YXIgZ2FtZUNvbnRyb2xsZXIgPSByZXF1aXJlKCcuL2dhbWVjb250cm9sbGVyJyk7XHJcbnZhciB1cGdyYWRlTWFuYWdlciA9IHJlcXVpcmUoJy4vdXBncmFkZW1hbmFnZXInKTtcclxudmFyIGFkTWFuYWdlciA9IHJlcXVpcmUoJy4vYWRtYW5hZ2VyJyk7XHJcbnZhciBjaGFydENvbmZpZ3MgPSByZXF1aXJlKCcuL2NoYXJ0Y29uZmlncycpO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoJ2MnLCBbJ3VpLmJvb3RzdHJhcCcsICdobGpzJywgJ0xvY2FsU3RvcmFnZU1vZHVsZScsICduZ1RhYmxlJywgJ2FuZ3VsYXJNb21lbnQnLCAnamxhcmVhdS5wbm90aWZ5JywgJ2hpZ2hjaGFydHMtbmcnXSlcclxuXHJcbiAgLmNvbnN0YW50KCdVcGdyYWRlcycsIHVwZ3JhZGVzKVxyXG5cclxuICAuY29uc3RhbnQoJ1ZlcnNpb24nLCAnMC4wLjEnKVxyXG5cclxuICAuY29uZmlnKFsnbm90aWZpY2F0aW9uU2VydmljZVByb3ZpZGVyJywgZnVuY3Rpb24obm90aWZpY2F0aW9uU2VydmljZVByb3ZpZGVyKSB7XHJcbiAgICBub3RpZmljYXRpb25TZXJ2aWNlUHJvdmlkZXIuc2V0RGVmYXVsdHMoe1xyXG4gICAgICBhZGRjbGFzczogJ3N0YWNrLWJhci1ib3R0b20nLFxyXG4gICAgICB3aWR0aDogJzcwJScsXHJcbiAgICAgIHN0eWxpbmc6ICdmb250YXdlc29tZSdcclxuICAgIH0pO1xyXG4gIH1dKVxyXG5cclxuICAuc2VydmljZSgnZmF2aWNvJywgZmF2aWNvKVxyXG5cclxuICAuc2VydmljZSgnQW5pbWF0ZWRGbHlUaXAnLCBhbmltYXRlZEZseVRpcClcclxuXHJcbiAgLnNlcnZpY2UoJ0dhbWVTdGF0ZScsIGdhbWVTdGF0ZSlcclxuXHJcbiAgLnNlcnZpY2UoJ0FkTWFuYWdlcicsIGFkTWFuYWdlcilcclxuXHJcbiAgLnNlcnZpY2UoJ0NoYXJ0Q29uZmlncycsIGNoYXJ0Q29uZmlncylcclxuXHJcbiAgLnNlcnZpY2UoJ0dhbWVUaW1lcicsIGdhbWVUaW1lcilcclxuXHJcbiAgLnNlcnZpY2UoJ1VwZ3JhZGVNYW5hZ2VyJywgdXBncmFkZU1hbmFnZXIpXHJcblxyXG4gIC5zZXJ2aWNlKCdHYWluQ2FsY3VsYXRvcicsIGdhaW5DYWxjdWxhdG9yKVxyXG5cclxuICAuc2VydmljZSgnRnVuY3Rpb25CdWlsZGVyJywgZnVuY3Rpb25CdWlsZGVyKVxyXG5cclxuICAuY29udHJvbGxlcignR2FtZScsIGdhbWVDb250cm9sbGVyKTsiLCJ2YXIgYWRzID0gcmVxdWlyZSgnLi9hZHMnKTtcclxuXHJcbnZhciBhZE1hbmFnZXIgPSBmdW5jdGlvbigkaW50ZXJ2YWwsIG5vdGlmaWNhdGlvblNlcnZpY2UsIEdhbWVTdGF0ZSkge1xyXG4gICRpbnRlcnZhbChmdW5jdGlvbigpIHtcclxuXHJcbiAgICBpZighR2FtZVN0YXRlLnVwZ3JhZGUuaGFzKCdBZHZlcnRpc2VtZW50cycpKSB7IHJldHVybjsgfVxyXG4gICAgaWYoIUdhbWVTdGF0ZS5hZFNldC5nZXQoKSkgeyByZXR1cm47IH1cclxuXHJcbiAgICB2YXIgYWQgPSBfLnNhbXBsZShhZHMpO1xyXG5cclxuICAgIG5vdGlmaWNhdGlvblNlcnZpY2Uubm90aWZ5V2l0aERlZmF1bHRzKHtcclxuICAgICAgdGl0bGU6IGAke2FkLm5hbWV9IDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCIke2FkLnVybH1cIj48c3BhbiBjbGFzcz0nZmEgZmEtZXh0ZXJuYWwtbGluayc+PC9zcGFuPjwvYT5gLFxyXG4gICAgICB0ZXh0OiBhZC50ZXh0XHJcbiAgICB9KTtcclxuICB9LCAxODAwMDApOyAvLzYgbWludXRlc1xyXG5cclxuICByZXR1cm4ge307XHJcbn07XHJcblxyXG5hZE1hbmFnZXIuJGluamVjdCA9IFsnJGludGVydmFsJywgJ25vdGlmaWNhdGlvblNlcnZpY2UnLCAnR2FtZVN0YXRlJ107XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGFkTWFuYWdlcjtcclxuIiwiXHJcbm1vZHVsZS5leHBvcnRzID0gW1xyXG4gIHtcclxuICAgIG5hbWU6ICdJZGxlTGFuZHMnLFxyXG4gICAgdXJsOiAnaHR0cDovL3dlYmZlLmlkbGUubGFuZCcsXHJcbiAgICB0ZXh0OiAnRnJvbSB0aGUgY3JlYXRvciBvZiB0aGlzIGdhbWUsIGNoZWNrIG91dCBJZGxlTGFuZHMsIGhpcyBwcmlvciBwcm9qZWN0ISdcclxuICB9LFxyXG4gIHtcclxuICAgIG5hbWU6ICdDb25zcGlyYWN5IENsaWNrZXInLFxyXG4gICAgdXJsOiAnaHR0cDovL2RlYXRocmF5Z2FtZXMuY29tL3BsYXktb25saW5lL21pbmlMRDQ4LycsXHJcbiAgICB0ZXh0OiAnTWFkZSBkdXJpbmcgYSA0OCBob3VyIHBlcmlvZCwgdGhpcyBnYW1lIGNhcHR1cmVzIHRoZSBhdHRlbnRpb24gb2YgdGhhdCBsaXR0bGUgY29uc3BpcmFjaXN0IGluc2lkZSBvZiB1cyBhbGwuIEZpbmQgb3V0IGhvdyB0aGUgcmVhbCB3b3JsZCBvcGVyYXRlcy4nXHJcbiAgfSxcclxuICB7XHJcbiAgICBuYW1lOiAnQ2FuZHkgRW1waXJpY2FsJyxcclxuICAgIHVybDogJ2h0dHA6Ly9jYW5keS1lbXBlcmljYWwuYXBwc3BvdC5jb20vJyxcclxuICAgIHRleHQ6ICdBIG5ldyBpbmNyZW1lbnRhbCBnYW1lIHdpdGggY2FuZHkgdGhhdCBtYWtlcyBjYW5keS4gU3RhcnQgb3V0IHdpdGggdGFmZnkgcHJvZ3Jlc3MgdGhyb3VnaCBhbGwgdGhlIGNhbmR5IHR5cGVzLidcclxuICB9LFxyXG4gIHtcclxuICAgIG5hbWU6ICdMZWdlbmQgb2YgdGhlIEZhbGxlbiBXYXJyaW9yJyxcclxuICAgIHVybDogJ2h0dHBzOi8vdGFybm9zMTIuZ2l0aHViLmlvL3Byb2plY3QvJyxcclxuICAgIHRleHQ6ICdTdXJyb3VuZGVkIGJ5IHVuZmFtaWxpYXIgZmFjZXMsIHRoZSBmYWxsZW4gd2FycmlvciBtdXN0IHRyeSBoaXMgYmVzdCB0byBzdXJ2aXZlLiBXaWxsIGhpcyBza2lsbHMgYmUgZW5vdWdoIHRvIGhlbHAgaGltIHRocm91Z2ggb3Igd2lsbCBoZSBoYXZlIHRvIGdyb3cgYW5kIGxlYXJuIG5ldyB0YWxlbnRzIGluIG9yZGVyIHRvIGVzY2FwZT8nXHJcbiAgfSxcclxuICB7XHJcbiAgICBuYW1lOiAnQ3JpdHRlciBNb3VuZCcsXHJcbiAgICB1cmw6ICd5b3l6LmNvbS9jcml0dGVyLycsXHJcbiAgICB0ZXh0OiAnQnJlZWQgbmV3IGNyaXR0ZXJzLCBicmVlZCBzdHJvbmdlciBjcml0dGVycywgZGVzdHJveSB5b3VyIGVuZW1pZXMuJ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgbmFtZTogJ1Byb2dyZXNzIFF1ZXN0JyxcclxuICAgIHVybDogJ2h0dHA6Ly9wcm9ncmVzc3F1ZXN0LmNvbS9wbGF5LycsXHJcbiAgICB0ZXh0OiAnUHJvZ3Jlc3MgUXVlc3QgaXMgYW4gYW50aWMgYW5kIGZhbnRhc3RpY2FsIGNvbXB1dGVyIHJvbGUtcGxheWluZyBnYW1lLCB3ZWxsIHdvcnRoIHRoZSB0aW1lIHlvdVxcJ2xsIHNwZW5kIHBsYXlpbmcgaXQuJ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgbmFtZTogJ0NsaWNrcG9jYWx5cHNlIDInLFxyXG4gICAgdXJsOiAnaHR0cDovL21pbm1heGlhLmNvbS9jMi8nLFxyXG4gICAgdGV4dDogJ0EgZmlnaHRlciwgcmFuZ2VyLCB3aXphcmQgYW5kIGEgcHJpZXN0IGFsbCBzZXQgb3V0IHRvIHB1cmdlIHRoZSBsYW5kIG9mIGV2aWwuLi4gb25lIGR1bmdlb24gYXQgYSB0aW1lLidcclxuICB9XHJcbl07IiwidmFyIGFuaW1hdGVkRmx5VGlwID0gZnVuY3Rpb24oJGZpbHRlcikge1xyXG4gIHJldHVybiB7XHJcbiAgICBmbHk6IGZ1bmN0aW9uKG51bSwgdXNlU2VwYXJhdG9yID0gZmFsc2UpIHtcclxuICAgICAgdmFyICRlbGVtZW50ID0gJCgnPGRpdiAvPicpO1xyXG5cclxuICAgICAgdmFyIG51bVN0cmluZyA9IG51bTtcclxuICAgICAgaWYodXNlU2VwYXJhdG9yKSB7XHJcbiAgICAgICAgbnVtU3RyaW5nID0gJGZpbHRlcignbnVtYmVyJykobnVtU3RyaW5nLCAwKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYobnVtIDwgMCkge1xyXG4gICAgICAgICRlbGVtZW50LmFkZENsYXNzKCd0ZXh0LWRhbmdlcicpO1xyXG4gICAgICAgICRlbGVtZW50Lmh0bWwobnVtU3RyaW5nKTtcclxuICAgICAgfSBlbHNlIGlmKG51bSA+IDApIHtcclxuICAgICAgICAkZWxlbWVudC5hZGRDbGFzcygndGV4dC1zdWNjZXNzJyk7XHJcbiAgICAgICAgJGVsZW1lbnQuaHRtbChgKyR7bnVtU3RyaW5nfWApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAkZWxlbWVudC5jc3MoJ3Bvc2l0aW9uJywgJ2Fic29sdXRlJyk7XHJcbiAgICAgICQoJ2JvZHknKS5hcHBlbmQoJGVsZW1lbnQpO1xyXG5cclxuICAgICAgdmFyICRiYXNlID0gJCgnI25hdmJhci11bml0Jyk7XHJcbiAgICAgIGlmKCEkYmFzZS5sZW5ndGgpIHsgcmV0dXJuOyB9XHJcblxyXG4gICAgICAkZWxlbWVudC5vZmZzZXQoe2xlZnQ6ICRiYXNlLm9mZnNldCgpLmxlZnQsIHRvcDogJGJhc2Uub2Zmc2V0KCkudG9wfSk7XHJcblxyXG4gICAgICAkZWxlbWVudC5hbmltYXRlKHt0b3A6ICc2MHB4J30pO1xyXG4gICAgICAkZWxlbWVudC5hbmltYXRlKHtvcGFjaXR5OiAwLCB0b3A6ICc2MHB4J30sIDUwMCwgJ3N3aW5nJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgJCh0aGlzKS5yZW1vdmUoKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgfVxyXG4gIH07XHJcbn07XHJcblxyXG5hbmltYXRlZEZseVRpcC4kaW5qZWN0ID0gWyckZmlsdGVyJ107XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGFuaW1hdGVkRmx5VGlwOyIsIlxyXG52YXIgY2hhcnRDb25maWdzID0gZnVuY3Rpb24oJHEsIEdhbWVTdGF0ZSkge1xyXG4gIHZhciBkZWZlciA9ICRxLmRlZmVyKCk7XHJcblxyXG4gIEhpZ2hjaGFydHMuc2V0T3B0aW9ucyh7XHJcbiAgICBnbG9iYWw6IHtcclxuICAgICAgdXNlVVRDOiBmYWxzZVxyXG4gICAgfSxcclxuICAgIGxhbmc6IHtcclxuICAgICAgdGhvdXNhbmRzU2VwOiAnLCdcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgdmFyIG92ZXJUaW1lID0ge1xyXG5cclxuICAgIHZhbHVlczogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiBfLnBhaXJzKEdhbWVTdGF0ZS5zb3VyY2VzR2V0LmdldCgpKTtcclxuICAgIH0sXHJcblxyXG4gICAgY2hhcnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIG9wdGlvbnM6IHtcclxuICAgICAgICAgIGNoYXJ0OiB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdwaWUnXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgcGxvdE9wdGlvbnM6IHtcclxuICAgICAgICAgICAgcGllOiB7XHJcbiAgICAgICAgICAgICAgZGF0YUxhYmVsczoge1xyXG4gICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZVxyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgc2hvd0luTGVnZW5kOiB0cnVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHRpdGxlOiB7XHJcbiAgICAgICAgICB0ZXh0OiAnJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2VyaWVzOiBbe1xyXG4gICAgICAgICAgZGF0YTogdGhpcy52YWx1ZXMoKVxyXG4gICAgICAgIH1dXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgdmFyIHByb2R1Y3Rpb24gPSB7XHJcbiAgICB2YWx1ZXM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gR2FtZVN0YXRlLmhpc3RvcnlHZXQuZ2V0KCk7XHJcbiAgICB9LFxyXG4gICAgY2hhcnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIG9wdGlvbnM6IHtcclxuICAgICAgICAgIGNoYXJ0OiB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdsaW5lJ1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIGxlZ2VuZDoge1xyXG4gICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHlBeGlzOiB7XHJcbiAgICAgICAgICAgIHRpdGxlOiB7XHJcbiAgICAgICAgICAgICAgdGV4dDogJ1Byb2R1Y3Rpb24nXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB4QXhpczoge1xyXG4gICAgICAgICAgICB0eXBlOiAnZGF0ZXRpbWUnLFxyXG4gICAgICAgICAgICB0aWNrUGl4ZWxJbnRlcnZhbDogMTUwLFxyXG4gICAgICAgICAgICB0aXRsZToge1xyXG4gICAgICAgICAgICAgIHRleHQ6ICdUaW1lc3RhbXAnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHRpdGxlOiB7XHJcbiAgICAgICAgICB0ZXh0OiAnJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2VyaWVzOiBbe1xyXG4gICAgICAgICAgZGF0YTogdGhpcy52YWx1ZXMoKVxyXG4gICAgICAgIH1dXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgR2FtZVN0YXRlLnVuaXQud2F0Y2goKS50aGVuKG51bGwsIG51bGwsIGZ1bmN0aW9uKCkge1xyXG4gICAgZGVmZXIubm90aWZ5KHtvdmVyVGltZTogb3ZlclRpbWUudmFsdWVzKCksIHByb2R1Y3Rpb246IHByb2R1Y3Rpb24udmFsdWVzKCl9KTtcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiB7b3ZlclRpbWU6IG92ZXJUaW1lLmNoYXJ0KCksIHByb2R1Y3Rpb246IHByb2R1Y3Rpb24uY2hhcnQoKX07XHJcbiAgICB9LFxyXG4gICAgd2F0Y2g6IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gZGVmZXIucHJvbWlzZTtcclxuICAgIH1cclxuICB9O1xyXG59O1xyXG5cclxuY2hhcnRDb25maWdzLiRpbmplY3QgPSBbJyRxJywgJ0dhbWVTdGF0ZSddO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBjaGFydENvbmZpZ3M7IiwiXHJcbnZhciBmYXZpY28gPSBmdW5jdGlvbigpIHtcclxuICB2YXIgZmF2aWNvID0gbmV3IEZhdmljbyh7XHJcbiAgICBhbmltYXRpb24gOiAnZmFkZSdcclxuICB9KTtcclxuXHJcbiAgdmFyIGN1cnJlbnROdW0gPSAwO1xyXG5cclxuICB2YXIgYmFkZ2UgPSBmdW5jdGlvbihudW0pIHtcclxuICAgIGlmKG51bSA9PT0gY3VycmVudE51bSkgeyByZXR1cm47IH1cclxuICAgIGN1cnJlbnROdW0gPSBudW07XHJcbiAgICBmYXZpY28uYmFkZ2UobnVtKTtcclxuICB9O1xyXG4gIHZhciByZXNldCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgZmF2aWNvLnJlc2V0KCk7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGJhZGdlIDogYmFkZ2UsXHJcbiAgICByZXNldCA6IHJlc2V0XHJcbiAgfTtcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZmF2aWNvOyIsInZhciBmdW5jdGlvbkJ1aWxkZXIgPSBmdW5jdGlvbihHYW1lU3RhdGUsIEdhaW5DYWxjdWxhdG9yLCAkd2luZG93KSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIGJ1aWxkOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgIHZhciB1cGdyYWRlID0gR2FtZVN0YXRlLnVwZ3JhZGU7XHJcblxyXG4gICAgICB2YXIgdW5pdFRleHQgPSBgJHtHYW1lU3RhdGUuY3VycmVuY3lTZXQuZ2V0KCl9c2A7XHJcblxyXG4gICAgICB2YXIgZnVuY3Rpb25IZWFkZXIgPSBbJycsJyddO1xyXG4gICAgICBpZihHYW1lU3RhdGUudXBncmFkZS5oYXMoJ0Z1bmN0aW9uJykpIHtcclxuICAgICAgICBmdW5jdGlvbkhlYWRlciA9IFtgZnVuY3Rpb24gaW5jcmVhc2VVbml0cygpIHtgLCBgfWBdO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgaXRlcmF0aW9uSGVhZGVyID0gWycnLCcnXTtcclxuICAgICAgaWYoR2FtZVN0YXRlLnVwZ3JhZGUuaGFzKCdCYXNpYyBJdGVyYXRpb24nKSkge1xyXG4gICAgICAgIGl0ZXJhdGlvbkhlYWRlciA9IFtgZm9yKHZhciBpID0gMDsgaSA8ICR7R2FpbkNhbGN1bGF0b3IuaXRlcmF0aW9uKHVwZ3JhZGUpfTsgaSsrKSB7YCwgYH1gXTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIHRpbWVvdXQgPSBgYDtcclxuICAgICAgaWYoR2FtZVN0YXRlLnVwZ3JhZGUuaGFzKCdCYXNpYyBUaW1lcicpKSB7XHJcbiAgICAgICAgdmFyIHRpbWVvdXRUZXh0ID0gJ2luY3JlYXNlVW5pdHMnO1xyXG5cclxuICAgICAgICBpZihHYW1lU3RhdGUudXBncmFkZS5oYXMoJ0Jhc2ljIFRpbWVyIEJvb3N0JykpIHtcclxuICAgICAgICAgIHRpbWVvdXRUZXh0ID1cclxuYGZ1bmN0aW9uIG1hc3NpdmVHYWlucygpIHtcclxuICBmb3IodmFyIGkgPSAwOyBpIDwgJHtHYWluQ2FsY3VsYXRvci50aW1lckJvb3N0KHVwZ3JhZGUpfTsgaSsrKSB7XHJcbiAgICAke3RpbWVvdXRUZXh0fSgpO1xyXG4gIH1cclxufWA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aW1lb3V0ID0gYCRpbnRlcnZhbCgke3RpbWVvdXRUZXh0fSwgJHtHYWluQ2FsY3VsYXRvci50aW1lcih1cGdyYWRlKX0pO1xcbmA7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBhbmltYXRpb25IZWFkZXIgPSBbJycsJyddO1xyXG4gICAgICBpZihHYW1lU3RhdGUudXBncmFkZS5oYXMoJ0Jhc2ljIEFuaW1hdGlvbicpKSB7XHJcbiAgICAgICAgYW5pbWF0aW9uSGVhZGVyID0gW1xyXG4gIGB2YXIgdG90YWxVbml0c0dhaW5lZCA9IDA7YCxcclxuICBgdW5pdHMgKz0gdG90YWxVbml0c0dhaW5lZDtcclxuICBhbmltYXRlVW5pdENoYW5nZSh0b3RhbFVuaXRzR2FpbmVkKTtgXTtcclxuICAgICAgICB1bml0VGV4dCA9ICd0b3RhbFVuaXRzR2FpbmVkJztcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIHNhdmVIZWFkZXIgPSBbJycsICcnXTtcclxuICAgICAgaWYoR2FtZVN0YXRlLnVwZ3JhZGUuaGFzKCdTYXZlJywgMSkpIHtcclxuICAgICAgICBzYXZlSGVhZGVyID0gW1xyXG4gIGBcXG52YXIgY3VycmVudFRpY2sgPSAwO2AsIGBcclxuICBpZigrK2N1cnJlbnRUaWNrICUgMTAgPT09IDApIHtcclxuICAgIGN1cnJlbnRUaWNrID0gMDtcclxuICAgIHNhdmUoKTtcclxuICB9YF07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmKEdhbWVTdGF0ZS51cGdyYWRlLmhhcygnU2F2ZScsIDMpKSB7XHJcbiAgICAgICAgc2F2ZUhlYWRlciA9IFsnJywgYFxyXG4gIHNhdmUoKTtgXTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gZHVtcCBpdCBvbiB0aGUgcGFnZS4gaXQncyBhbiBcImV4cGxvaXRcIlxyXG4gICAgICAkd2luZG93LmluY3JlYXNlVW5pdHMgPSBmdW5jdGlvbihtdWx0ID0gMSwgc291cmNlID0gJ0NoZWF0aW5nJykgeyBHYW1lU3RhdGUudW5pdC5pbmMobXVsdCAqIEdhaW5DYWxjdWxhdG9yLmFsbCh1cGdyYWRlKSwgdHJ1ZSwgc291cmNlKTsgfTtcclxuXHJcbiAgICAgIHJldHVybiBgJHt0aW1lb3V0fSR7c2F2ZUhlYWRlclswXX1cclxuJHtmdW5jdGlvbkhlYWRlclswXX1cclxuICAke2FuaW1hdGlvbkhlYWRlclswXX1cclxuICAke2l0ZXJhdGlvbkhlYWRlclswXX1cclxuICAgICR7dW5pdFRleHR9ICs9ICR7R2FpbkNhbGN1bGF0b3IuYm9vc3QodXBncmFkZSl9O1xyXG4gICR7aXRlcmF0aW9uSGVhZGVyWzFdfVxyXG4gICR7c2F2ZUhlYWRlclsxXX1cclxuICAke2FuaW1hdGlvbkhlYWRlclsxXX1cclxuJHtmdW5jdGlvbkhlYWRlclsxXX1cclxuYDtcclxuICAgIH1cclxuICB9O1xyXG59O1xyXG5cclxuZnVuY3Rpb25CdWlsZGVyLiRpbmplY3QgPSBbJ0dhbWVTdGF0ZScsICdHYWluQ2FsY3VsYXRvcicsICckd2luZG93J107XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uQnVpbGRlcjsiLCJ2YXIgZ2FpbkNhbGN1bGF0b3IgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgdmFyIGJvb3N0ID0gZnVuY3Rpb24odXBncmFkZSkge1xyXG4gICAgcmV0dXJuIE1hdGgucG93KCh1cGdyYWRlLmdldEtleSgnQmFzaWMgQm9vc3QnKSB8fCAwKSsxLCAyKTtcclxuICB9O1xyXG5cclxuICB2YXIgaXRlcmF0aW9uID0gZnVuY3Rpb24odXBncmFkZSkge1xyXG4gICAgdmFyIGl0ZXJMZXZlbCA9IHVwZ3JhZGUuZ2V0S2V5KCdCYXNpYyBJdGVyYXRpb24nKTtcclxuICAgIGlmKCFpdGVyTGV2ZWwpIHsgcmV0dXJuIDE7IH1cclxuICAgIHJldHVybiBNYXRoLnBvdygyLCBpdGVyTGV2ZWwrMSk7XHJcbiAgfTtcclxuXHJcbiAgdmFyIHRpbWVyQm9vc3QgPSBmdW5jdGlvbih1cGdyYWRlKSB7XHJcbiAgICByZXR1cm4gTWF0aC5wb3coKHVwZ3JhZGUuZ2V0S2V5KCdCYXNpYyBUaW1lciBCb29zdCcpIHx8IDApKzEsIDIpO1xyXG4gIH07XHJcblxyXG4gIHZhciB0aW1lciA9IGZ1bmN0aW9uKHVwZ3JhZGUpIHtcclxuICAgIHZhciBiYXNpY1JlZHVjdGlvbiA9IDAuMDUgKiB1cGdyYWRlLmdldEtleSgnQmFzaWMgVGltZXInKTtcclxuICAgIHZhciBhZHZhbmNlZFJlZHVjdGlvbiA9IDAuMTUgKiB1cGdyYWRlLmdldEtleSgnQWR2YW5jZWQgVGltZXInKTtcclxuICAgIGFkdmFuY2VkUmVkdWN0aW9uID0gXy5pc05hTihhZHZhbmNlZFJlZHVjdGlvbikgPyAwIDogYWR2YW5jZWRSZWR1Y3Rpb247XHJcbiAgICByZXR1cm4gMzAwMDAgLSBNYXRoLnJvdW5kKDMwMDAwICogKGJhc2ljUmVkdWN0aW9uICsgYWR2YW5jZWRSZWR1Y3Rpb24pKTtcclxuICB9O1xyXG5cclxuICB2YXIgbWF4SGlzdG9yeSA9IGZ1bmN0aW9uKHVwZ3JhZGUpIHtcclxuICAgIHJldHVybiAxMCArICg1ICogKHVwZ3JhZGUuZ2V0S2V5KCdQcm9kdWN0aW9uIEhpc3RvcnknKSB8fCAwKSk7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGJvb3N0OiBib29zdCxcclxuICAgIGl0ZXJhdGlvbjogaXRlcmF0aW9uLFxyXG4gICAgdGltZXI6IHRpbWVyLFxyXG4gICAgdGltZXJCb29zdDogdGltZXJCb29zdCxcclxuICAgIG1heEhpc3Rvcnk6IG1heEhpc3RvcnksXHJcbiAgICBhbGw6IGZ1bmN0aW9uKHVwZ3JhZGUpIHsgcmV0dXJuIGJvb3N0KHVwZ3JhZGUpICogaXRlcmF0aW9uKHVwZ3JhZGUpOyB9XHJcbiAgfTtcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZ2FpbkNhbGN1bGF0b3I7IiwidmFyIGdhbWVDb250cm9sbGVyID0gZnVuY3Rpb24oJHNjb3BlLCAkd2luZG93LCAkaW50ZXJ2YWwsICRmaWx0ZXIsICRtb2RhbCwgR2FtZVN0YXRlLCBDaGFydENvbmZpZ3MsIEdhbWVUaW1lciwgVXBncmFkZU1hbmFnZXIsIEZ1bmN0aW9uQnVpbGRlciwgTmdUYWJsZVBhcmFtcykge1xyXG4gICRzY29wZS5fdmlzaWJsZVVwZ3JhZGVzID0gW107XHJcbiAgJHNjb3BlLmdyb3VwVmlzaWJsZUhhc2ggPSB7fTtcclxuXHJcbiAgJHNjb3BlLmN1cnJlbmN5TmFtZSA9IEdhbWVTdGF0ZS5jdXJyZW5jeVNldC5nZXQoKTtcclxuICAkc2NvcGUuY2hhbmdlQ3VycmVuY3kgPSBmdW5jdGlvbigpIHtcclxuICAgIGJvb3Rib3gucHJvbXB0KHt0aXRsZTogJ1doYXQgd291bGQgeW91IGxpa2UgdG8gY2FsbCB0aGUgY3VycmVuY3k/JywgdmFsdWU6ICRzY29wZS5jdXJyZW5jeU5hbWUsIGNhbGxiYWNrOiBmdW5jdGlvbihyZXN1bHQpIHtcclxuICAgICAgaWYoIXJlc3VsdCB8fCAhcmVzdWx0LnRyaW0oKSkgeyByZXR1cm47IH1cclxuICAgICAgR2FtZVN0YXRlLmN1cnJlbmN5U2V0LnNldChyZXN1bHQpO1xyXG4gICAgICAkc2NvcGUuY3VycmVuY3lOYW1lID0gR2FtZVN0YXRlLmN1cnJlbmN5U2V0LmdldCgpO1xyXG4gICAgICAkc2NvcGUuJGRpZ2VzdCgpO1xyXG4gICAgfX0pO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5hZHMgPSBHYW1lU3RhdGUuYWRTZXQuZ2V0KCk7XHJcbiAgJHNjb3BlLnNldEFkcyA9IGZ1bmN0aW9uKHZhbCkge1xyXG4gICAgR2FtZVN0YXRlLmFkU2V0LnNldCh2YWwpO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS50YWJsZVBhcmFtcyA9IG5ldyBOZ1RhYmxlUGFyYW1zKHtcclxuICAgIHBhZ2U6IDEsXHJcbiAgICBjb3VudDogMTAwMFxyXG4gIH0sIHtcclxuICAgIGdyb3VwQnk6ICdjYXRlZ29yeScsXHJcbiAgICB0b3RhbDogJHNjb3BlLl92aXNpYmxlVXBncmFkZXMubGVuZ3RoLFxyXG4gICAgZ2V0RGF0YTogZnVuY3Rpb24oJGRlZmVyLCBwYXJhbXMpIHtcclxuICAgICAgdmFyIGRhdGEgPSAkc2NvcGUuX3Zpc2libGVVcGdyYWRlcztcclxuXHJcbiAgICAgIHZhciBvcmRlcmVkRGF0YSA9IHBhcmFtcy5zb3J0aW5nKCkgP1xyXG4gICAgICAgICRmaWx0ZXIoJ29yZGVyQnknKShkYXRhLCBwYXJhbXMub3JkZXJCeSgpKSA6XHJcbiAgICAgICAgZGF0YTtcclxuXHJcbiAgICAgIHZhciBmaWx0ZXJlZERhdGEgPSBwYXJhbXMuZmlsdGVyKCkgP1xyXG4gICAgICAgICRmaWx0ZXIoJ2ZpbHRlcicpKG9yZGVyZWREYXRhLCBwYXJhbXMuZmlsdGVyKCkpIDpcclxuICAgICAgICBvcmRlcmVkRGF0YTtcclxuXHJcbiAgICAgIHBhcmFtcy50b3RhbCgkc2NvcGUuX3Zpc2libGVVcGdyYWRlcy5sZW5ndGgpO1xyXG5cclxuICAgICAgJGRlZmVyLnJlc29sdmUoZmlsdGVyZWREYXRhLnNsaWNlKChwYXJhbXMucGFnZSgpIC0gMSkgKiBwYXJhbXMuY291bnQoKSwgcGFyYW1zLnBhZ2UoKSAqIHBhcmFtcy5jb3VudCgpKSk7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gICRzY29wZS5oYXNVcGdyYWRlID0gZnVuY3Rpb24oa2V5LCBsZXZlbCA9IDApIHtcclxuICAgIHJldHVybiBHYW1lU3RhdGUudXBncmFkZS5oYXMoa2V5LCBsZXZlbCk7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLmhhc1VuaXRzID0gZnVuY3Rpb24oYW10KSB7XHJcbiAgICByZXR1cm4gR2FtZVN0YXRlLnVuaXQuaGFzKGFtdCk7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLmJ1eVVwZ3JhZGUgPSBmdW5jdGlvbih1cGdOYW1lLCBsZXZlbHMgPSAxKSB7XHJcbiAgICBkbyB7XHJcbiAgICAgIEdhbWVTdGF0ZS51cGdyYWRlLmluYyh1cGdOYW1lKTtcclxuICAgIH0gd2hpbGUoLS1sZXZlbHMgPiAwKTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuZ2FpblVuaXRzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAkd2luZG93LmluY3JlYXNlVW5pdHMoMSwgJ0NsaWNrJyk7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnNhdmUgPSBmdW5jdGlvbigpIHtcclxuICAgIEdhbWVTdGF0ZS5zYXZlKCk7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnJlZnJlc2ggPSBmdW5jdGlvbigpIHtcclxuICAgICRzY29wZS5fdW5pdHMgPSBHYW1lU3RhdGUudW5pdC5nZXQoKTtcclxuXHJcbiAgICB2YXIgbmV3VXBncmFkZXMgPSBVcGdyYWRlTWFuYWdlci52aXNpYmxlKCk7XHJcbiAgICB2YXIgdmlzaWJsZSA9IF8ucGx1Y2soJHNjb3BlLl92aXNpYmxlVXBncmFkZXMsICduYW1lJyk7XHJcbiAgICB2YXIgbmV3UGx1Y2tlZCA9IF8ucGx1Y2sobmV3VXBncmFkZXMsICduYW1lJyk7XHJcbiAgICBpZihuZXdQbHVja2VkLmxlbmd0aCAhPT0gdmlzaWJsZS5sZW5ndGggfHwgXy5kaWZmZXJlbmNlKG5ld1BsdWNrZWQsIHZpc2libGUpLmxlbmd0aCA+IDApIHtcclxuICAgICAgJHNjb3BlLl92aXNpYmxlVXBncmFkZXMgPSBuZXdVcGdyYWRlcztcclxuICAgIH1cclxuICAgICRzY29wZS5fZnVuY3Rpb24gPSBGdW5jdGlvbkJ1aWxkZXIuYnVpbGQoKTtcclxuICAgICRzY29wZS50YWJsZVBhcmFtcy5yZWxvYWQoKTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUub3Blbk1vZGFsID0gZnVuY3Rpb24obW9kYWwpIHtcclxuICAgICRtb2RhbC5vcGVuKHtcclxuICAgICAgdGVtcGxhdGVVcmw6IGBtb2RhbC0ke21vZGFsfWAsXHJcbiAgICAgIHNjb3BlOiAkc2NvcGVcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5yZWZyZXNoKCk7XHJcbiAgJHNjb3BlLl90aW1lciA9IDA7XHJcbiAgJHNjb3BlLl90aW1lcm1heCA9IDA7XHJcbiAgdmFyIHRpbWVySW50ZXJ2YWw7XHJcblxyXG4gIEdhbWVTdGF0ZS51bml0LndhdGNoKCkudGhlbihudWxsLCBudWxsLCAkc2NvcGUucmVmcmVzaCk7XHJcbiAgR2FtZVN0YXRlLnVwZ3JhZGUud2F0Y2goKS50aGVuKG51bGwsIG51bGwsICRzY29wZS5yZWZyZXNoKTtcclxuXHJcbiAgR2FtZVRpbWVyLndhdGNoKCkudGhlbihudWxsLCBudWxsLCBmdW5jdGlvbihuZXdUaW1lclZhbHVlKSB7XHJcbiAgICAkc2NvcGUuX3RpbWVyID0gJHNjb3BlLl90aW1lck1heCA9IG5ld1RpbWVyVmFsdWU7XHJcbiAgICBpZih0aW1lckludGVydmFsKSB7XHJcbiAgICAgICRpbnRlcnZhbC5jYW5jZWwodGltZXJJbnRlcnZhbCk7XHJcbiAgICB9XHJcbiAgICB0aW1lckludGVydmFsID0gJGludGVydmFsKGZ1bmN0aW9uKCkge1xyXG4gICAgICAkc2NvcGUuX3RpbWVyIC09IDEwMDtcclxuICAgIH0sIDEwMCk7XHJcbiAgfSk7XHJcblxyXG4gICRzY29wZS5jaGFydERhdGEgPSBDaGFydENvbmZpZ3MuZ2V0KCk7XHJcblxyXG4gIENoYXJ0Q29uZmlncy53YXRjaCgpLnRoZW4obnVsbCwgbnVsbCwgZnVuY3Rpb24oY2hhcnREYXRhKSB7XHJcbiAgICBfLmVhY2goXy5rZXlzKGNoYXJ0RGF0YSksIGtleSA9PiB7XHJcbiAgICAgICRzY29wZS5jaGFydERhdGFba2V5XS5zZXJpZXNbMF0uZGF0YSA9IGNoYXJ0RGF0YVtrZXldO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gICRzY29wZS5zYXZlT2JqZWN0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gR2FtZVN0YXRlLmJ1aWxkU2F2ZU9iamVjdCgpO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5kZWJ1Z0luZm8gPSAkd2luZG93LmR1bXBEZWJ1Z0luZm8gPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSgkc2NvcGUuc2F2ZU9iamVjdCgpLCBudWxsLCA0KTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUucmVzZXRHYW1lID0gZnVuY3Rpb24oY2FsbGJhY2sgPSBmdW5jdGlvbigpe30pIHtcclxuXHJcbiAgICB2YXIgZmluYWxDYWxsYmFjayA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICBHYW1lU3RhdGUuaGFyZFJlc2V0KCk7XHJcbiAgICAgICRzY29wZS5yZWZyZXNoKCk7XHJcbiAgICAgICRzY29wZS5jdXJyZW5jeU5hbWUgPSBHYW1lU3RhdGUuY3VycmVuY3lTZXQuZ2V0KCk7XHJcbiAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGlmKCRzY29wZS5oYXNVcGdyYWRlKCdDb25maXJtYXRpb24gRGlhbG9ncycpKSB7XHJcbiAgICAgIGJvb3Rib3guY29uZmlybSgnQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGhhcmQgcmVzZXQ/IE5vdGhpbmcgd2lsbCBiZSBzYXZlZC4nLCBmdW5jdGlvbihyZXN1bHQpIHtcclxuICAgICAgICBpZighcmVzdWx0KSB7IHJldHVybjsgfVxyXG4gICAgICAgIGZpbmFsQ2FsbGJhY2soKTtcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBmaW5hbENhbGxiYWNrKCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbn07XHJcblxyXG5nYW1lQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJHdpbmRvdycsICckaW50ZXJ2YWwnLCAnJGZpbHRlcicsICckbW9kYWwnLCAnR2FtZVN0YXRlJywgJ0NoYXJ0Q29uZmlncycsICdHYW1lVGltZXInLCAnVXBncmFkZU1hbmFnZXInLCAnRnVuY3Rpb25CdWlsZGVyJywgJ25nVGFibGVQYXJhbXMnXTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZ2FtZUNvbnRyb2xsZXI7XHJcbiIsInZhciBnYW1lU3RhdGUgPSBmdW5jdGlvbigkcSwgbm90aWZpY2F0aW9uU2VydmljZSwgJGZpbHRlciwgVVBHUkFERVMsIEdhaW5DYWxjdWxhdG9yLCBsb2NhbFN0b3JhZ2UsIEFuaW1hdGVkRmx5VGlwKSB7XHJcblxyXG4gIHZhciBnZXROZXdTdGF0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdXBncmFkZXM6IHt9LFxyXG4gICAgICB1bml0czogMCxcclxuICAgICAgc3RhcnQ6IERhdGUubm93KCksXHJcbiAgICAgIGxhc3RTYXZlOiBEYXRlLm5vdygpLFxyXG4gICAgICBjdXJyZW5jeU5hbWU6ICdVbml0JyxcclxuICAgICAgYWRzOiB0cnVlLFxyXG4gICAgICBzb3VyY2VzOiB7fSxcclxuICAgICAgaGlzdG9yeTogW11cclxuICAgIH07XHJcbiAgfTtcclxuXHJcbiAgdmFyIGN1cnJlbnRTdGF0ZSA9IGdldE5ld1N0YXRlKCk7XHJcblxyXG4gIHZhciB1cGdyYWRlRGVmZXIgPSAkcS5kZWZlcigpO1xyXG4gIHZhciB1bml0RGVmZXIgPSAkcS5kZWZlcigpO1xyXG5cclxuICB2YXIgYnVpbGRTYXZlT2JqZWN0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gY3VycmVudFN0YXRlO1xyXG4gIH07XHJcblxyXG4gIHZhciBzYXZlID0gZnVuY3Rpb24oKSB7XHJcbiAgICBjdXJyZW50U3RhdGUubGFzdFNhdmUgPSBEYXRlLm5vdygpO1xyXG4gICAgbG9jYWxTdG9yYWdlLnNldCgnZ2FtZScsIGJ1aWxkU2F2ZU9iamVjdCgpKTtcclxuICB9O1xyXG5cclxuICB2YXIgaGFyZFJlc2V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICBjdXJyZW50U3RhdGUgPSBnZXROZXdTdGF0ZSgpO1xyXG4gICAgc2F2ZSgpO1xyXG4gIH07XHJcblxyXG4gIHZhciBsb2FkID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgc3RhdGUgPSBsb2NhbFN0b3JhZ2UuZ2V0KCdnYW1lJyk7XHJcblxyXG4gICAgaWYoIXN0YXRlKSB7IHJldHVybjsgfVxyXG5cclxuICAgIF8uYXNzaWduKGN1cnJlbnRTdGF0ZSwgc3RhdGUpO1xyXG5cclxuICAgIGlmKCF1cGdyYWRlLmhhcygnT2ZmbGluZSBQcm9ncmVzcycpKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgZGlmZiA9IERhdGUubm93KCkgLSBzdGF0ZS5sYXN0U2F2ZTtcclxuICAgIHZhciBtdWx0aXBsaWVyID0gMC4yNSArICgwLjI1ICogdXBncmFkZS5nZXRLZXkoJ09mZmxpbmUgUHJvZ3Jlc3MnKSk7XHJcbiAgICB2YXIgdGltZXJzRWxhcHNlZCA9IE1hdGguZmxvb3IoZGlmZiAvIEdhaW5DYWxjdWxhdG9yLnRpbWVyKHVwZ3JhZGUpKTtcclxuICAgIHZhciBnYWluID0gdGltZXJzRWxhcHNlZCAqIG11bHRpcGxpZXIgKiBHYWluQ2FsY3VsYXRvci5hbGwodXBncmFkZSkgKiBHYWluQ2FsY3VsYXRvci50aW1lckJvb3N0KHVwZ3JhZGUpO1xyXG5cclxuICAgIGlmKGdhaW4gPD0gMCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdW5pdC5pbmMoZ2FpbiwgZmFsc2UsICdPZmZsaW5lIFByb2dyZXNzJyk7XHJcbiAgICBzYXZlKCk7XHJcblxyXG4gICAgaWYodXBncmFkZS5oYXMoJ05vdGlmaWNhdGlvbnMnKSkge1xyXG4gICAgICB2YXIgbnVtU3RyaW5nID0gZ2FpbjtcclxuICAgICAgaWYgKHVwZ3JhZGUuaGFzKCdOdW1iZXIgRm9ybWF0dGluZycpKSB7XHJcbiAgICAgICAgbnVtU3RyaW5nID0gJGZpbHRlcignbnVtYmVyJykobnVtU3RyaW5nLCAwKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbm90aWZpY2F0aW9uU2VydmljZS5ub3RpZnlXaXRoRGVmYXVsdHMoe1xyXG4gICAgICAgIHR5cGU6ICdzdWNjZXNzJyxcclxuICAgICAgICB0aXRsZTogJ09mZmxpbmUgUHJvZ3Jlc3Npb24nLFxyXG4gICAgICAgIHRleHQ6IGBZb3UgZ2FpbmVkICR7bnVtU3RyaW5nfSAke2N1cnJlbnRTdGF0ZS5jdXJyZW5jeU5hbWV9cyB3aGlsZSBvZmZsaW5lLiBXZWxjb21lIGJhY2shYFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB2YXIgaGlzdG9yeUdldCA9IHtcclxuICAgIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBjdXJyZW50U3RhdGUuaGlzdG9yeTsgfVxyXG4gIH07XHJcblxyXG4gIHZhciBzb3VyY2VzR2V0ID0ge1xyXG4gICAgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIGN1cnJlbnRTdGF0ZS5zb3VyY2VzOyB9XHJcbiAgfTtcclxuXHJcbiAgdmFyIGN1cnJlbmN5U2V0ID0ge1xyXG4gICAgc2V0OiBmdW5jdGlvbihuZXdOYW1lKSB7IGN1cnJlbnRTdGF0ZS5jdXJyZW5jeU5hbWUgPSBuZXdOYW1lOyBzYXZlKCk7IH0sXHJcbiAgICBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gY3VycmVudFN0YXRlLmN1cnJlbmN5TmFtZTsgfVxyXG4gIH07XHJcblxyXG4gIHZhciBhZFNldCA9IHtcclxuICAgIHNldDogZnVuY3Rpb24oaXNTZXQpIHsgY3VycmVudFN0YXRlLmFkcyA9IGlzU2V0OyB9LFxyXG4gICAgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIGN1cnJlbnRTdGF0ZS5hZHM7IH1cclxuICB9O1xyXG5cclxuICB2YXIgdXBncmFkZSA9IHtcclxuICAgIGhhczogZnVuY3Rpb24oa2V5LCBsZXZlbCA9IDApIHsgcmV0dXJuIGN1cnJlbnRTdGF0ZS51cGdyYWRlc1trZXldID4gbGV2ZWw7IH0sXHJcbiAgICBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gY3VycmVudFN0YXRlLnVwZ3JhZGVzOyB9LFxyXG4gICAgZ2V0S2V5OiBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIGN1cnJlbnRTdGF0ZS51cGdyYWRlc1trZXldOyB9LFxyXG4gICAgaW5jOiBmdW5jdGlvbihrZXkpIHtcclxuXHJcbiAgICAgIHZhciBuZXh0TGV2ZWwgPSBjdXJyZW50U3RhdGUudXBncmFkZXNba2V5XSB8fCAwO1xyXG5cclxuICAgICAgdmFyIGNvc3QgPSBfLmlzRnVuY3Rpb24oVVBHUkFERVNba2V5XS5sZXZlbHMpID9cclxuICAgICAgICBVUEdSQURFU1trZXldLmxldmVscyhuZXh0TGV2ZWwpLmNvc3QgOlxyXG4gICAgICAgIFVQR1JBREVTW2tleV0ubGV2ZWxzW25leHRMZXZlbF0uY29zdDtcclxuICAgICAgaWYoY3VycmVudFN0YXRlLnVuaXRzIDwgY29zdCkgeyByZXR1cm47IH1cclxuXHJcbiAgICAgIGlmKCFjdXJyZW50U3RhdGUudXBncmFkZXNba2V5XSkgeyBjdXJyZW50U3RhdGUudXBncmFkZXNba2V5XSA9IDA7IH1cclxuICAgICAgY3VycmVudFN0YXRlLnVwZ3JhZGVzW2tleV0rKztcclxuICAgICAgdW5pdC5pbmMoLWNvc3QpO1xyXG4gICAgICB1cGdyYWRlRGVmZXIubm90aWZ5KHtrZXk6IGtleSwgbGV2ZWw6IGN1cnJlbnRTdGF0ZS51cGdyYWRlc1trZXldLCBhbGw6IGN1cnJlbnRTdGF0ZS51cGdyYWRlc30pO1xyXG4gICAgfSxcclxuICAgIHdhdGNoOiBmdW5jdGlvbigpIHsgcmV0dXJuIHVwZ3JhZGVEZWZlci5wcm9taXNlOyB9XHJcbiAgfTtcclxuXHJcbiAgdmFyIG1hbmFnZUhpc3RvcnkgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBtYXggPSBHYWluQ2FsY3VsYXRvci5tYXhIaXN0b3J5KHVwZ3JhZGUpO1xyXG5cclxuICAgIGN1cnJlbnRTdGF0ZS5oaXN0b3J5LnB1c2goe3g6IERhdGUubm93KCksIHk6IGN1cnJlbnRTdGF0ZS51bml0c30pO1xyXG4gICAgaWYoY3VycmVudFN0YXRlLmhpc3RvcnkubGVuZ3RoID4gbWF4KSB7XHJcbiAgICAgIGN1cnJlbnRTdGF0ZS5oaXN0b3J5LnNoaWZ0KCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgdmFyIHRpY2sgPSAwO1xyXG5cclxuICB2YXIgdW5pdCA9IHtcclxuICAgIGhhczogZnVuY3Rpb24oYW10KSB7IHJldHVybiBjdXJyZW50U3RhdGUudW5pdHMgPiBhbXQ7IH0sXHJcbiAgICBpbmM6IGZ1bmN0aW9uKGFtdCwgZGlzcGxheSA9IHRydWUsIHNvdXJjZSA9ICdDbGljaycpIHtcclxuICAgICAgY3VycmVudFN0YXRlLnVuaXRzICs9IGFtdDtcclxuXHJcbiAgICAgIG1hbmFnZUhpc3RvcnkoKTtcclxuXHJcbiAgICAgIGlmKCFjdXJyZW50U3RhdGUuc291cmNlc1tzb3VyY2VdKSB7XHJcbiAgICAgICAgY3VycmVudFN0YXRlLnNvdXJjZXNbc291cmNlXSA9IDA7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmKGFtdCA+IDApIHtcclxuICAgICAgICBjdXJyZW50U3RhdGUuc291cmNlc1tzb3VyY2VdICs9IGFtdDtcclxuICAgICAgfVxyXG5cclxuICAgICAgdW5pdERlZmVyLm5vdGlmeShjdXJyZW50U3RhdGUudW5pdHMpO1xyXG5cclxuICAgICAgaWYodXBncmFkZS5oYXMoJ0Jhc2ljIEFuaW1hdGlvbicpICYmIGRpc3BsYXkpIHtcclxuICAgICAgICBBbmltYXRlZEZseVRpcC5mbHkoYW10LCB1cGdyYWRlLmhhcygnTnVtYmVyIEZvcm1hdHRpbmcnKSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmKHVwZ3JhZGUuaGFzKCdTYXZlJywgMSkgJiYgIXVwZ3JhZGUuaGFzKCdTYXZlJywgMykpIHtcclxuICAgICAgICBpZigrK3RpY2sgJSAxMCA9PT0gMCkge1xyXG4gICAgICAgICAgdGljayA9IDA7XHJcbiAgICAgICAgICBzYXZlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZih1cGdyYWRlLmhhcygnU2F2ZScsIDMpKSB7XHJcbiAgICAgICAgc2F2ZSgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgfSxcclxuICAgIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBjdXJyZW50U3RhdGUudW5pdHM7IH0sXHJcbiAgICB3YXRjaDogZnVuY3Rpb24oKSB7IHJldHVybiB1bml0RGVmZXIucHJvbWlzZTsgfVxyXG4gIH07XHJcblxyXG4gIGxvYWQoKTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIHVwZ3JhZGU6IHVwZ3JhZGUsXHJcbiAgICB1bml0OiB1bml0LFxyXG4gICAgY3VycmVuY3lTZXQ6IGN1cnJlbmN5U2V0LFxyXG4gICAgYWRTZXQ6IGFkU2V0LFxyXG4gICAgc291cmNlc0dldDogc291cmNlc0dldCxcclxuICAgIGhpc3RvcnlHZXQ6IGhpc3RvcnlHZXQsXHJcbiAgICBzYXZlOiBzYXZlLFxyXG4gICAgYnVpbGRTYXZlT2JqZWN0OiBidWlsZFNhdmVPYmplY3QsXHJcbiAgICBoYXJkUmVzZXQ6IGhhcmRSZXNldFxyXG4gIH07XHJcbn07XHJcblxyXG5nYW1lU3RhdGUuJGluamVjdCA9IFsnJHEnLCAnbm90aWZpY2F0aW9uU2VydmljZScsICckZmlsdGVyJywgJ1VwZ3JhZGVzJywgJ0dhaW5DYWxjdWxhdG9yJywgJ2xvY2FsU3RvcmFnZVNlcnZpY2UnLCAnQW5pbWF0ZWRGbHlUaXAnXTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZ2FtZVN0YXRlOyIsInZhciBnYW1lVGltZXIgPSBmdW5jdGlvbigkcSwgJGludGVydmFsLCAkdGltZW91dCwgJHdpbmRvdywgR2FtZVN0YXRlLCBBZE1hbmFnZXIsIEdhaW5DYWxjdWxhdG9yKSB7XHJcblxyXG4gIHZhciBpbnRlcnZhbCA9IG51bGw7XHJcbiAgdmFyIHRpbWVyRGVmZXIgPSAkcS5kZWZlcigpO1xyXG5cclxuICB2YXIgc3RhcnRUaW1lciA9IGZ1bmN0aW9uKHVwZ3JhZGVEYXRhID0ge2tleTogJ1RpbWVyJ30pIHtcclxuXHJcbiAgICBpZighR2FtZVN0YXRlLnVwZ3JhZGUuaGFzKCdCYXNpYyBUaW1lcicpKSB7IHJldHVybjsgfVxyXG4gICAgaWYoIV8uY29udGFpbnModXBncmFkZURhdGEua2V5LCAnVGltZXInKSkgeyByZXR1cm47IH1cclxuXHJcbiAgICBpZihpbnRlcnZhbCkge1xyXG4gICAgICAkaW50ZXJ2YWwuY2FuY2VsKGludGVydmFsKTtcclxuICAgIH1cclxuXHJcbiAgICBpbnRlcnZhbCA9ICRpbnRlcnZhbChmdW5jdGlvbigpIHtcclxuICAgICAgJHdpbmRvdy5pbmNyZWFzZVVuaXRzKDEgKyBHYWluQ2FsY3VsYXRvci50aW1lckJvb3N0KEdhbWVTdGF0ZS51cGdyYWRlKSwgJ1RpbWVyJyk7XHJcbiAgICAgIHRpbWVyRGVmZXIubm90aWZ5KEdhaW5DYWxjdWxhdG9yLnRpbWVyKEdhbWVTdGF0ZS51cGdyYWRlKSk7XHJcbiAgICB9LCBHYWluQ2FsY3VsYXRvci50aW1lcihHYW1lU3RhdGUudXBncmFkZSkpO1xyXG5cclxuICAgIHRpbWVyRGVmZXIubm90aWZ5KEdhaW5DYWxjdWxhdG9yLnRpbWVyKEdhbWVTdGF0ZS51cGdyYWRlKSk7XHJcbiAgfTtcclxuXHJcbiAgaWYoR2FtZVN0YXRlLnVwZ3JhZGUuaGFzKCdCYXNpYyBUaW1lcicpKSB7XHJcbiAgICAkdGltZW91dChzdGFydFRpbWVyLCAwKTtcclxuICB9XHJcblxyXG4gIEdhbWVTdGF0ZS51cGdyYWRlLndhdGNoKCkudGhlbihudWxsLCBudWxsLCBzdGFydFRpbWVyKTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIHdhdGNoOiBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIHRpbWVyRGVmZXIucHJvbWlzZTtcclxuICAgIH1cclxuICB9O1xyXG5cclxufTtcclxuXHJcbmdhbWVUaW1lci4kaW5qZWN0ID0gWyckcScsICckaW50ZXJ2YWwnLCAnJHRpbWVvdXQnLCAnJHdpbmRvdycsICdHYW1lU3RhdGUnLCAnQWRNYW5hZ2VyJywgJ0dhaW5DYWxjdWxhdG9yJ107XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGdhbWVUaW1lcjsiLCJ2YXIgdXBncmFkZU1hbmFnZXIgPSBmdW5jdGlvbihHYW1lU3RhdGUsIFVQR1JBREVTLCBmYXZpY28pIHtcclxuXHJcbiAgdmFyIGhhc1VwZ3JhZGUgPSBmdW5jdGlvbihrZXksIGxldmVsID0gMCkge1xyXG4gICAgcmV0dXJuIEdhbWVTdGF0ZS51cGdyYWRlLmhhcyhrZXksIGxldmVsKTtcclxuICB9O1xyXG5cclxuICB2YXIgdmlzaWJsZSA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgIHZhciBjdXJyZW50ID0gR2FtZVN0YXRlLnVuaXQuZ2V0KCk7XHJcbiAgICB2YXIgYWxsUmV0ID0gW107XHJcblxyXG4gICAgXy5lYWNoKFVQR1JBREVTLCAoaXRlbSwgaXRlbU5hbWUpID0+IHtcclxuXHJcbiAgICAgIHZhciByZXQgPSBbXTtcclxuXHJcbiAgICAgIHZhciBtZWV0c0FsbFJlcXMgPSB0cnVlO1xyXG5cclxuICAgICAgXy5lYWNoKGl0ZW0ucmVxdWlyZW1lbnRzLCAocmVxLCBrZXkpID0+IHtcclxuICAgICAgICBpZighaGFzVXBncmFkZShrZXksIHJlcSkpIHsgbWVldHNBbGxSZXFzID0gZmFsc2U7IH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICBpZighbWVldHNBbGxSZXFzKSB7IHJldHVybjsgfVxyXG5cclxuICAgICAgdmFyIGxldmVscyA9IGl0ZW0ubGV2ZWxzO1xyXG4gICAgICBpZihfLmlzRnVuY3Rpb24oaXRlbS5sZXZlbHMpKSB7XHJcbiAgICAgICAgdmFyIG5leHRMZXZlbCA9IEdhbWVTdGF0ZS51cGdyYWRlLmdldEtleShpdGVtTmFtZSkgfHwgMDtcclxuICAgICAgICBsZXZlbHMgPSB7fTtcclxuICAgICAgICBsZXZlbHNbbmV4dExldmVsXSA9IGl0ZW0ubGV2ZWxzKG5leHRMZXZlbCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIF8uZWFjaChsZXZlbHMsIChsZXZlbCwgaSkgPT4ge1xyXG4gICAgICAgIHZhciB2aXNMZXZlbCA9IEdhbWVTdGF0ZS51cGdyYWRlLmdldEtleSgnVXBncmFkZSBWaXNpYmlsaXR5Jyk7XHJcbiAgICAgICAgdmFyIHZpc2liaWxpdHlCb29zdCA9IDEgKyAoXy5pc1VuZGVmaW5lZCh2aXNMZXZlbCkgPyAwIDogMC4xNSp2aXNMZXZlbCk7XHJcbiAgICAgICAgdmFyIHByZXZJdGVtID0gcmV0W3JldC5sZW5ndGgtMV07XHJcbiAgICAgICAgdmFyIHRvdGFsQ29zdCA9IGxldmVsLmNvc3QgKyAocHJldkl0ZW0gPyBwcmV2SXRlbS5jb3N0IDogMCk7XHJcblxyXG4gICAgICAgIGlmKGhhc1VwZ3JhZGUoaXRlbU5hbWUsIGkpIHx8IHRvdGFsQ29zdC92aXNpYmlsaXR5Qm9vc3QgPiBjdXJyZW50KSB7IHJldHVybjsgfVxyXG5cclxuICAgICAgICByZXQucHVzaCh7XHJcbiAgICAgICAgICBuYW1lOiBpdGVtTmFtZSxcclxuICAgICAgICAgIGxldmVsOiBpLFxyXG4gICAgICAgICAgY29zdDogdG90YWxDb3N0LFxyXG4gICAgICAgICAgZGVzY3JpcHRpb246IGxldmVsLmRlc2NyaXB0aW9uLFxyXG4gICAgICAgICAgYnV5TGV2ZWxzOiAxICsgKHByZXZJdGVtID8gcHJldkl0ZW0uYnV5TGV2ZWxzIDogMCksXHJcbiAgICAgICAgICBjYXRlZ29yeTogaXRlbS5jYXRlZ29yeVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGFsbFJldC5wdXNoKC4uLnJldCk7XHJcblxyXG4gICAgfSk7XHJcblxyXG4gICAgaWYoaGFzVXBncmFkZSgnQWxwaGFiZXRpemVkIFVwZ3JhZGVzJykpIHtcclxuICAgICAgYWxsUmV0ID0gXy5zb3J0QnlPcmRlcihhbGxSZXQsIFsnbmFtZScsICdsZXZlbCddLCBbdHJ1ZSwgdHJ1ZV0pO1xyXG4gICAgfVxyXG5cclxuICAgIGlmKGhhc1VwZ3JhZGUoJ0Jlc3QgRmF2aWNvbicpKSB7XHJcbiAgICAgIHZhciBidXlhYmxlVXBncmFkZXMgPSBfLmZpbHRlcihhbGxSZXQsIGl0ZW0gPT4gaXRlbS5jb3N0IDwgY3VycmVudCkubGVuZ3RoO1xyXG4gICAgICBpZihidXlhYmxlVXBncmFkZXMgPiAwKSB7XHJcbiAgICAgICAgZmF2aWNvLmJhZGdlKGJ1eWFibGVVcGdyYWRlcyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZmF2aWNvLnJlc2V0KCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYWxsUmV0O1xyXG4gIH07XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICB2aXNpYmxlOiBfLnRocm90dGxlKHZpc2libGUsIDUwKVxyXG4gIH07XHJcbn07XHJcblxyXG51cGdyYWRlTWFuYWdlci4kaW5qZWN0ID0gWydHYW1lU3RhdGUnLCAnVXBncmFkZXMnLCAnZmF2aWNvJ107XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHVwZ3JhZGVNYW5hZ2VyOyIsIlxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICBTY29yZWJvYXJkOiB7XHJcbiAgICBjYXRlZ29yeTogJ1Zpc3VhbCcsXHJcbiAgICBsZXZlbHM6IFt7Y29zdDogMTAsIGRlc2NyaXB0aW9uOiAnVmlzdWFsaXplIHlvdXIgc2NvcmUhJ31dXHJcbiAgfSxcclxuICAnQmFzaWMgTGF5b3V0Jzoge1xyXG4gICAgY2F0ZWdvcnk6ICdWaXN1YWwnLFxyXG4gICAgbGV2ZWxzOiBbXHJcbiAgICAgIHtjb3N0OiAxNSwgZGVzY3JpcHRpb246ICdBIHNsaWdodGx5IGJldHRlciBsYXlvdXQuJ30sXHJcbiAgICAgIHtjb3N0OiAyMDAsIGRlc2NyaXB0aW9uOiAnQW5vdGhlciBzbGlnaHRseSBiZXR0ZXIgbGF5b3V0Lid9XHJcbiAgICBdXHJcbiAgfSxcclxuICAnQmV0dGVyIExheW91dCc6IHtcclxuICAgIGNhdGVnb3J5OiAnVmlzdWFsJyxcclxuICAgIHJlcXVpcmVtZW50czogeydCYXNpYyBMYXlvdXQnOiAxfSxcclxuICAgIGxldmVsczogW1xyXG4gICAgICB7Y29zdDogMjAwLCBkZXNjcmlwdGlvbjogJ09uZSBvZiB0aGUgYmV0dGVyIGxheW91dHMgeW91IGdldCB0byBzZWUuJ30sXHJcbiAgICAgIHtjb3N0OiAyMDAwLCBkZXNjcmlwdGlvbjogJ1Byb2JhYmx5IHRoZSBiZXN0IGxheW91dCBpbiB0aGUgZ2FtZS4nfVxyXG4gICAgXVxyXG4gIH0sXHJcbiAgRnVuY3Rpb246IHtcclxuICAgIGNhdGVnb3J5OiAnVGVjaCcsXHJcbiAgICBsZXZlbHM6IFt7Y29zdDogMjAsIGRlc2NyaXB0aW9uOiAnQWNjZXNzIHRvIGEgZnVuY3Rpb24gaXMgbmVjZXNzYXJ5IHRvIGdhaW4gbW9yZSBwb3dlci4nfV1cclxuICB9LFxyXG4gICdCYXNpYyBJdGVyYXRpb24nOiB7XHJcbiAgICBjYXRlZ29yeTogJ1RlY2gnLFxyXG4gICAgcmVxdWlyZW1lbnRzOiB7RnVuY3Rpb246IDB9LFxyXG4gICAgbGV2ZWxzOiBbXHJcbiAgICAgIHtjb3N0OiA1MCwgZGVzY3JpcHRpb246ICdNb3JlIGl0ZXJhdGlvbnMgbWVhbnMgZmFzdGVyIHByb2R1Y3Rpb24uJ30sXHJcbiAgICAgIHtjb3N0OiAzMDAsIGRlc2NyaXB0aW9uOiAnRXZlbiBtb3JlIGl0ZXJhdGlvbnMgbWVhbnMgZXZlbiBmYXN0ZXIgcHJvZHVjdGlvbi4nfSxcclxuICAgICAge2Nvc3Q6IDIwMDAwLCBkZXNjcmlwdGlvbjogJ1lldCBtb3JlIGl0ZXJhdGlvbnMgbWVhbnMgeWV0IGZhc3RlciBwcm9kdWN0aW9uLid9LFxyXG4gICAgICB7Y29zdDogMTUwMDAwLCBkZXNjcmlwdGlvbjogJ01hbnkgaXRlcmF0aW9ucyBtZWFucyBtdWNoIGZhc3RlciBwcm9kdWN0aW9uLid9XHJcbiAgICBdXHJcbiAgfSxcclxuICAnQmFzaWMgVGltZXInOiB7XHJcbiAgICBjYXRlZ29yeTogJ1RlY2gnLFxyXG4gICAgcmVxdWlyZW1lbnRzOiB7RnVuY3Rpb246IDB9LFxyXG4gICAgbGV2ZWxzOiBbXHJcbiAgICAgIHtjb3N0OiA1MCwgZGVzY3JpcHRpb246ICdBIHRpbWVyIHJ1bnMgYW5kIGF1dG9tYXRpY2FsbHkgcHJvZHVjZXMgZm9yIHlvdSBldmVyeSBzbyBvZnRlbi4nfSxcclxuICAgICAge2Nvc3Q6IDYwMCwgZGVzY3JpcHRpb246ICdUaGUgdGltaW5nIG9mIHRoZSB0aW1lciBpcyBzbGlnaHRseSBmYXN0ZXIuJ30sXHJcbiAgICAgIHtjb3N0OiAyMDAwMCwgZGVzY3JpcHRpb246ICdUaGUgdGltZXIgcnVucyBldmVuIGZhc3RlciBub3cuJ30sXHJcbiAgICAgIHtjb3N0OiAxMDAwMDAsIGRlc2NyaXB0aW9uOiAnVGhlIHRpbWVyIGdvZXMgem9vbSB6b29tISd9XHJcbiAgICBdXHJcbiAgfSxcclxuICAnQmFzaWMgQm9vc3QnOiB7XHJcbiAgICBjYXRlZ29yeTogJ1RlY2gnLFxyXG4gICAgcmVxdWlyZW1lbnRzOiB7RnVuY3Rpb246IDB9LFxyXG4gICAgbGV2ZWxzOiBbXHJcbiAgICAgIHtjb3N0OiAxMCwgZGVzY3JpcHRpb246ICdCaWdnZXIgYm9vc3QgbWVhbnMgbW9yZSBwcm9kdWN0aW9uIGhhcHBlbmluZyBhdCBvbmNlLid9LFxyXG4gICAgICB7Y29zdDogMTAwMCwgZGVzY3JpcHRpb246ICdFdmVuIGJpZ2dlciBib29zdCBtZWFucyBldmVuIG1vcmUgcHJvZHVjdGlvbi4nfSxcclxuICAgICAge2Nvc3Q6IDI1MDAwLCBkZXNjcmlwdGlvbjogJ1lldCBhIGJpZ2dlciBib29zdCBtZWFucyBhIGhpZ2hlciBwcm9kdWN0aW9uIHlpZWxkLid9LFxyXG4gICAgICB7Y29zdDogMjAwMDAwLCBkZXNjcmlwdGlvbjogJ1RoZSBiaWdnZXN0IGJvb3N0IG1lYW5zIHRoZSBiZXN0IHByb2R1Y3Rpb24uJ31cclxuICAgIF1cclxuICB9LFxyXG4gIENhcGl0YWxpemF0aW9uOiB7XHJcbiAgICBjYXRlZ29yeTogJ1Zpc3VhbCcsXHJcbiAgICBsZXZlbHM6IFt7Y29zdDogMTAwLCBkZXNjcmlwdGlvbjogJ1NvbWV0aW1lcyBnb29kIHB1bmN0dWF0aW9uIGp1c3QgbG9va3MgbmljZS4nfV1cclxuICB9LFxyXG4gIFByZWZvcm1hdHRpbmc6IHtcclxuICAgIGNhdGVnb3J5OiAnVmlzdWFsJyxcclxuICAgIHJlcXVpcmVtZW50czogeydCYXNpYyBJdGVyYXRpb24nOiAwfSxcclxuICAgIGxldmVsczogW3tjb3N0OiAxNTAwLCBkZXNjcmlwdGlvbjogJ0JldHRlciBjb2RlIGZvcm1hdHRpbmcgZm9yIHJlYWRhYmlsaXR5J31dXHJcbiAgfSxcclxuICAnVmlzdWFsIENvdW50ZG93bic6IHtcclxuICAgIGNhdGVnb3J5OiAnVmlzdWFsJyxcclxuICAgIHJlcXVpcmVtZW50czogeydCYXNpYyBUaW1lcic6IDB9LFxyXG4gICAgbGV2ZWxzOiBbe2Nvc3Q6IDEwMDAsIGRlc2NyaXB0aW9uOiAnSXQgbWlnaHQgaGVscCB0byBzZWUgdGhlIGNvdW50ZG93biBmb3IgdGhlIHRpbWVyIHJ1bi4nfV1cclxuICB9LFxyXG4gICdQYWdlIFRpdGxlJzoge1xyXG4gICAgY2F0ZWdvcnk6ICdDb3NtZXRpYycsXHJcbiAgICByZXF1aXJlbWVudHM6IHsnQmFzaWMgTGF5b3V0JzogMH0sXHJcbiAgICBsZXZlbHM6IFt7Y29zdDogNTAwLCBkZXNjcmlwdGlvbjogJ0EgbmljZXIgbG9va2luZyBwYWdlIHRpdGxlLiBTbyByZXZlYWxpbmchJ31dXHJcbiAgfSxcclxuICAnQmV0dGVyIFBhZ2UgVGl0bGUnOiB7XHJcbiAgICBjYXRlZ29yeTogJ0Nvc21ldGljJyxcclxuICAgIHJlcXVpcmVtZW50czogeydQYWdlIFRpdGxlJzogMCwgJ1Njb3JlYm9hcmQnOiAwfSxcclxuICAgIGxldmVsczogW3tjb3N0OiAyNTAwLCBkZXNjcmlwdGlvbjogJ0p1c3Qgd2hlbiB5b3UgdGhvdWdodCB0aGUgcGFnZSB0aXRsZSBsb29rZWQgZ29vZCwgaXQgZ2V0cyBiZXR0ZXIhJ31dXHJcbiAgfSxcclxuICAnQWxwaGFiZXRpemVkIFVwZ3JhZGVzJzoge1xyXG4gICAgY2F0ZWdvcnk6ICdDb3NtZXRpYycsXHJcbiAgICByZXF1aXJlbWVudHM6IHsnQ2FwaXRhbGl6YXRpb24nOiAwLCAnQmV0dGVyIExheW91dCc6IDB9LFxyXG4gICAgbGV2ZWxzOiBbe2Nvc3Q6IDUwMDAsIGRlc2NyaXB0aW9uOiAnUHV0dGluZyB0aGUgdXBncmFkZXMgaW4gc29tZSBraW5kIG9mIG9yZGVyIG1ha2VzIHRoZW0gbXVjaCBlYXNpZXIgdG8gbmF2aWdhdGUuJ31dXHJcbiAgfSxcclxuICAnVXBncmFkZSBWaXNpYmlsaXR5Jzoge1xyXG4gICAgY2F0ZWdvcnk6ICdDb3NtZXRpYycsXHJcbiAgICByZXF1aXJlbWVudHM6IHsnQWxwaGFiZXRpemVkIFVwZ3JhZGVzJzogMH0sXHJcbiAgICBsZXZlbHM6IFtcclxuICAgICAge2Nvc3Q6IDY1MDAsIGRlc2NyaXB0aW9uOiAnVXBncmFkZXMgd2lsbCBhcHBlYXIgc2xpZ2h0bHkgYmVmb3JlIHlvdSBjYW4gYnV5IHRoZW0uJ30sXHJcbiAgICAgIHtjb3N0OiA4NTAwLCBkZXNjcmlwdGlvbjogJ1VwZ3JhZGVzIHdpbGwgYXBwZWFyIGEgd2hpbGUgYmVmb3JlIHlvdSBjYW4gYnV5IHRoZW0uJ30sXHJcbiAgICAgIHtjb3N0OiAxMDUwMCwgZGVzY3JpcHRpb246ICdVcGdyYWRlcyB3aWxsIHNob3cgdXAgcXVpdGUgYSB3YXlzIGJlZm9yZSB5b3UgY2FuIGJ1eSB0aGVtLid9XHJcbiAgICBdXHJcbiAgfSxcclxuICAnUHJvZ3Jlc3MgQmFyJzoge1xyXG4gICAgY2F0ZWdvcnk6ICdWaXN1YWwnLFxyXG4gICAgcmVxdWlyZW1lbnRzOiB7J0JldHRlciBMYXlvdXQnOiAxLCAnQmFzaWMgQ29sb3InOiAwLCAnVmlzdWFsIENvdW50ZG93bic6IDB9LFxyXG4gICAgbGV2ZWxzOiBbe2Nvc3Q6IDUwMDAsIGRlc2NyaXB0aW9uOiAnVHJhbnNmb3JtIHlvdXIgY291bnRkb3duIGludG8gYSBwcm9ncmVzcyBiYXIgaW5zdGVhZCEnfV1cclxuICB9LFxyXG4gICdCYXNpYyBTdHlsZSc6IHtcclxuICAgIGNhdGVnb3J5OiAnVmlzdWFsJyxcclxuICAgIHJlcXVpcmVtZW50czogeydCZXR0ZXIgTGF5b3V0JzogMX0sXHJcbiAgICBsZXZlbHM6IFtcclxuICAgICAge2Nvc3Q6IDEwMDAwLCBkZXNjcmlwdGlvbjogJ1llcywgaXQgZG9lcyBnZXQgYmV0dGVyISBUaGlzIHVwZ3JhZGUgbWFrZXMgdGhlIHRhYmxlIGxvb2sgbmljZXIuJ30sXHJcbiAgICAgIHtjb3N0OiAyMDAwMCwgZGVzY3JpcHRpb246ICdUaGlzIHVwZ3JhZGUgZml4ZXMgc29tZSBzbGlnaHQgYWxpZ25tZW50IGlzc3VlcyBpbnRyb2R1Y2VkIGJ5IHRoZSBwcmV2aW91cyB1cGdyYWRlLid9XHJcbiAgICBdXHJcbiAgfSxcclxuICAnQmFzaWMgQ29sb3InOiB7XHJcbiAgICBjYXRlZ29yeTogJ1Zpc3VhbCcsXHJcbiAgICByZXF1aXJlbWVudHM6IHsnQmFzaWMgU3R5bGUnOiAwfSxcclxuICAgIGxldmVsczogW3tjb3N0OiAxMjUwMCwgZGVzY3JpcHRpb246ICdBZGQgc29tZSBjb2xvciB0byB0aGUgcGFnZS4nfV1cclxuICB9LFxyXG4gIEljb25vZ3JhcGh5OiB7XHJcbiAgICBjYXRlZ29yeTogJ1Zpc3VhbCcsXHJcbiAgICByZXF1aXJlbWVudHM6IHsnQmFzaWMgU3R5bGUnOiAwfSxcclxuICAgIGxldmVsczogW3tjb3N0OiAyNTAwMCwgZGVzY3JpcHRpb246ICdHZXQgc29tZSBpY29ucyBvbiB0aGUgcGFnZS4nfV1cclxuICB9LFxyXG4gICdOdW1iZXIgRm9ybWF0dGluZyc6IHtcclxuICAgIGNhdGVnb3J5OiAnQ29zbWV0aWMnLFxyXG4gICAgcmVxdWlyZW1lbnRzOiB7J0Jhc2ljIFN0eWxlJzogMH0sXHJcbiAgICBsZXZlbHM6IFt7Y29zdDogMjAwMDAsIGRlc2NyaXB0aW9uOiAnRm9ybWF0IHRoZSBudW1iZXJzIG1vcmUgbmljZWx5ISd9XVxyXG4gIH0sXHJcbiAgJ0Jhc2ljIEFuaW1hdGlvbic6IHtcclxuICAgIGNhdGVnb3J5OiAnQ29zbWV0aWMnLFxyXG4gICAgcmVxdWlyZW1lbnRzOiB7J0Jhc2ljIFN0eWxlJzogMCwgJ0Jhc2ljIEl0ZXJhdGlvbic6IDAsICdCYXNpYyBDb2xvcic6IDAsICdCZXR0ZXIgTGF5b3V0JzogMX0sXHJcbiAgICBsZXZlbHM6IFt7Y29zdDogMTAwMDAwLCBkZXNjcmlwdGlvbjogJ1Nwcmlua2xlIHNvbWUgYW5pbWF0aW9ucyBvbnRvIHRoZSBwYWdlLid9XVxyXG4gIH0sXHJcbiAgJ0Zhdmljb24nOiB7XHJcbiAgICBjYXRlZ29yeTogJ0Nvc21ldGljJyxcclxuICAgIHJlcXVpcmVtZW50czogeydCZXR0ZXIgTGF5b3V0JzogMX0sXHJcbiAgICBsZXZlbHM6IFt7Y29zdDogMjAwMCwgZGVzY3JpcHRpb246ICdBZGQgdGhlIGZhdmljb24gdG8gdGhlIGhlYWRlciBiYXIuJ31dXHJcbiAgfSxcclxuICAnQmVzdCBGYXZpY29uJzoge1xyXG4gICAgY2F0ZWdvcnk6ICdDb3NtZXRpYycsXHJcbiAgICByZXF1aXJlbWVudHM6IHsnQmV0dGVyIFBhZ2UgVGl0bGUnOiAwLCAnRmF2aWNvbic6IDB9LFxyXG4gICAgbGV2ZWxzOiBbe2Nvc3Q6IDEwMDAwMCwgZGVzY3JpcHRpb246ICdHZXQgbm90aWZpZWQgdmlhIGZhdmljb24gd2hlbmV2ZXIgeW91IGhhdmUgYSBuZXcgdXBncmFkZSB0byBwdXJjaGFzZS4nfV1cclxuICB9LFxyXG4gICdTeW50YXggSGlnaGxpZ2h0aW5nJzoge1xyXG4gICAgY2F0ZWdvcnk6ICdDb3NtZXRpYycsXHJcbiAgICByZXF1aXJlbWVudHM6IHsnUHJlZm9ybWF0dGluZyc6IDB9LFxyXG4gICAgbGV2ZWxzOiBbe2Nvc3Q6IDUwMDAwLCBkZXNjcmlwdGlvbjogJ01ha2UgZXZlcnkgY29kZSBwb3J0aW9uIGxvb2sgZXZlbiBiZXR0ZXIhJ31dXHJcbiAgfSxcclxuICAnU2F2ZSc6IHtcclxuICAgIGNhdGVnb3J5OiAnVGVjaCcsXHJcbiAgICByZXF1aXJlbWVudHM6IHsnQmFzaWMgTGF5b3V0JzogMH0sXHJcbiAgICBsZXZlbHM6IFtcclxuICAgICAge2Nvc3Q6IDMwMCwgZGVzY3JpcHRpb246ICdJbnRyb2R1Y2UgYSBzYXZlIGJ1dHRvbiB0aGF0IGFsbG93cyB5b3UgdG8gc2F2ZSB5b3VyIHByb2dyZXNzLid9LFxyXG4gICAgICB7Y29zdDogNTAwMCwgZGVzY3JpcHRpb246ICdJbnRyb2R1Y2UgYSBtZWNoYW5pYyB0aGF0IHNhdmVzIG9jY2FzaW9uYWxseS4nfSxcclxuICAgICAge2Nvc3Q6IDIwMDAwLCBkZXNjcmlwdGlvbjogJ0ludHJvZHVjZSBhIGRlYnVnIG1lbnUgd2hlcmUgeW91IGNhbiBzZWUgeW91ciBzYXZlIGRhdGEuJ30sXHJcbiAgICAgIHtjb3N0OiAxNTAwMDAsIGRlc2NyaXB0aW9uOiAnTWFrZSB0aGUgZ2FtZSBzYXZlIGF1dG9tYXRpY2FsbHkgYWZ0ZXIgcHJvZHVjdGlvbiBvciBwdXJjaGFzZXMuJ31cclxuICAgIF1cclxuICB9LFxyXG4gICdBZHZhbmNlZCBUaW1lcic6IHtcclxuICAgIGNhdGVnb3J5OiAnVGVjaCcsXHJcbiAgICByZXF1aXJlbWVudHM6IHsnQmFzaWMgVGltZXInOiAzfSxcclxuICAgIGxldmVsczogW1xyXG4gICAgICB7Y29zdDogMjAwMDAwLCBkZXNjcmlwdGlvbjogJ1RoZSB0aW1lciBpcyBiYWNrIGFuZCBmYXN0ZXIgdGhhbiBldmVyLid9LFxyXG4gICAgICB7Y29zdDogNzUwMDAwLCBkZXNjcmlwdGlvbjogJ0p1c3Qgd2hlbiB5b3UgdGhvdWdodCB0aGUgdGltZXIgd2FzIG91dCBvZiB0cmlja3MsIGl0IGdldHMgZmFzdGVyISd9LFxyXG4gICAgICB7Y29zdDogMTUwMDAwMCwgZGVzY3JpcHRpb246ICdUaGUgZmFzdGVzdCB0aW1lciB5ZXQhJ31cclxuICAgIF1cclxuICB9LFxyXG4gICdCZXN0IFRhYmxlJzoge1xyXG4gICAgY2F0ZWdvcnk6ICdUZWNoJyxcclxuICAgIHJlcXVpcmVtZW50czogeydCYXNpYyBTdHlsZSc6IDEsICdBbHBoYWJldGl6ZWQgVXBncmFkZXMnOiAwfSxcclxuICAgIGxldmVsczogW3tjb3N0OiAyNTAwMDAsIGRlc2NyaXB0aW9uOiAnVGhpcyBnaXZlcyB5b3UgdGhlIGJlc3QgdXBncmFkZSB0YWJsZSBwb3NzaWJsZSEnfV1cclxuICB9LFxyXG4gIE1lbnU6IHtcclxuICAgIGNhdGVnb3J5OiAnVGVjaCcsXHJcbiAgICByZXF1aXJlbWVudHM6IHsnQmFzaWMgTGF5b3V0JzogMH0sXHJcbiAgICBsZXZlbHM6IFt7Y29zdDogMjUwMCwgZGVzY3JpcHRpb246ICdCdXkgYSBkcm9wZG93biBtZW51LiBUaGluZ3MgZW5kIHVwIGhlcmUuJ31dXHJcbiAgfSxcclxuICAnSGVscCBNZW51Jzoge1xyXG4gICAgY2F0ZWdvcnk6ICdUZWNoJyxcclxuICAgIHJlcXVpcmVtZW50czogeydNZW51JzogMH0sXHJcbiAgICBsZXZlbHM6IFt7Y29zdDogMiwgZGVzY3JpcHRpb246ICdUaGUgY2hlYXBlc3QgdXBncmFkZSBpbiB0aGUgZ2FtZS4gSSBiZXQgeW91IGhhdmUgbm8gaWRlYSB3aGF0IGl0IGRvZXMuJ31dXHJcbiAgfSxcclxuICBUb29sdGlwczoge1xyXG4gICAgY2F0ZWdvcnk6ICdUZWNoJyxcclxuICAgIHJlcXVpcmVtZW50czogeydIZWxwIE1lbnUnOiAwfSxcclxuICAgIGxldmVsczogW3tjb3N0OiAxNzUwMCwgZGVzY3JpcHRpb246ICdXZWxsLCB0aGlzIHN1cmUgaXMgc2VsZi1yZWZlcmVudGlhbC4nfV1cclxuICB9LFxyXG4gICdPcHRpb25zIE1lbnUnOiB7XHJcbiAgICBjYXRlZ29yeTogJ1RlY2gnLFxyXG4gICAgcmVxdWlyZW1lbnRzOiB7J01lbnUnOiAwfSxcclxuICAgIGxldmVsczogW3tjb3N0OiA1MDAwLCBkZXNjcmlwdGlvbjogJ0FsbCBvZiB0aGUgc3RhbmdlIG9wdGlvbnMgZ28gaGVyZS4gQWxzbywgeW91IGNhbiByZXNldCB5b3VyIGdhbWUuJ31dXHJcbiAgfSxcclxuICAnT2ZmbGluZSBQcm9ncmVzcyc6IHtcclxuICAgIGNhdGVnb3J5OiAnVGVjaCcsXHJcbiAgICByZXF1aXJlbWVudHM6IHsnQmFzaWMgVGltZXInOiAwfSxcclxuICAgIGxldmVsczogW1xyXG4gICAgICB7Y29zdDogMTAwMDAsIGRlc2NyaXB0aW9uOiAnWW91IHdpbGwgZ2FpbiBwcm9ncmVzcyBzbG93bHksIGV2ZW4gd2hpbGUgdGhlIGdhbWUgaXMgbm90IG9wZW4uJ30sXHJcbiAgICAgIHtjb3N0OiAxMDAwMDAsIGRlc2NyaXB0aW9uOiAnWW91IHdpbGwgZ2FpbiBwcm9ncmVzcyBzbGlnaHRseSBmYXN0ZXIsIGV2ZW4gd2hpbGUgdGhlIGdhbWUgaXMgbm90IG9wZW4uJ30sXHJcbiAgICAgIHtjb3N0OiAxMDAwMDAwLCBkZXNjcmlwdGlvbjogJ1lvdSB3aWxsIGdhaW4gcHJvZ3Jlc3Mgbm9ybWFsbHksIGV2ZW4gd2hpbGUgdGhlIGdhbWUgaXMgbm90IG9wZW4uJ31cclxuICAgIF1cclxuICB9LFxyXG4gICdDb25maXJtYXRpb24gRGlhbG9ncyc6IHtcclxuICAgIGNhdGVnb3J5OiAnVGVjaCcsXHJcbiAgICByZXF1aXJlbWVudHM6IHsnSGVscCBNZW51JzogMH0sXHJcbiAgICBsZXZlbHM6IFt7Y29zdDogMTAwMDAwLCBkZXNjcmlwdGlvbjogJ1lvdSBnZXQgbm90aWZpZWQgb2YgcG90ZW50aWFsbHkgZGFuZ2Vyb3VzIGFjdGlvbnMuIEJld2FyZSEnfV1cclxuICB9LFxyXG4gICdDdXJyZW5jeSBOYW1lIENoYW5nZSc6IHtcclxuICAgIGNhdGVnb3J5OiAnQ29zbWV0aWMnLFxyXG4gICAgcmVxdWlyZW1lbnRzOiB7J09wdGlvbnMgTWVudSc6IDB9LFxyXG4gICAgbGV2ZWxzOiBbe2Nvc3Q6IDY1MDAwMCwgZGVzY3JpcHRpb246ICdJZiB5b3UgZGlzbGlrZSB0aGUgbmFtZSB1bml0cywgeW91IGNhbiBjaGFuZ2UgaXQhJ31dXHJcbiAgfSxcclxuICAnQmFzaWMgVGltZXIgQm9vc3QnOiB7XHJcbiAgICBjYXRlZ29yeTogJ1RlY2gnLFxyXG4gICAgcmVxdWlyZW1lbnRzOiB7J0Jhc2ljIFRpbWVyJzogMH0sXHJcbiAgICBsZXZlbHM6IFtcclxuICAgICAge2Nvc3Q6IDEwMDAwLCBkZXNjcmlwdGlvbjogJ1lvdSBnZXQgbW9yZSBwcm9kdWN0aW9uIHZpYSB0aW1lciBtZXRob2RzLid9LFxyXG4gICAgICB7Y29zdDogNTAwMDAwLCBkZXNjcmlwdGlvbjogJ1lvdSBnZXQgZXZlbiBtb3JlIHByb2R1Y3Rpb24gdmlhIHRoZSB0aW1lci4nfSxcclxuICAgICAge2Nvc3Q6IDI1MDAwMDAsIGRlc2NyaXB0aW9uOiAnVGhlIHRpbWVyIGlzIG5vdyBxdWl0ZSBsdWNyYXRpdmUuJ31cclxuICAgIF1cclxuICB9LFxyXG4gIE5vdGlmaWNhdGlvbnM6IHtcclxuICAgIGNhdGVnb3J5OiAnVGVjaCcsXHJcbiAgICByZXF1aXJlbWVudHM6IHsnQmFzaWMgQW5pbWF0aW9uJzogMCwgSWNvbm9ncmFwaHk6IDAsICdCYXNpYyBDb2xvcic6IDAsICdCYXNpYyBTdHlsZSc6IDB9LFxyXG4gICAgbGV2ZWxzOiBbe2Nvc3Q6IDUwMDAwLCBkZXNjcmlwdGlvbjogJ0dldCBub3RpZmllZCBhYm91dCB2YXJpb3VzIGhhcHBlbmluZ3MhJ31dXHJcbiAgfSxcclxuICBBZHZlcnRpc2VtZW50czoge1xyXG4gICAgY2F0ZWdvcnk6ICdUZWNoJyxcclxuICAgIHJlcXVpcmVtZW50czoge05vdGlmaWNhdGlvbnM6IDB9LFxyXG4gICAgbGV2ZWxzOiBbe2Nvc3Q6IDIwMDAwLCBkZXNjcmlwdGlvbjogJ0FkdmVydGlzZW1lbnRzIGZvciBvdGhlciwgcmVsYXRlZCBnYW1lcyEnfV1cclxuICB9LFxyXG4gIEFkYmxvY2tlcjoge1xyXG4gICAgY2F0ZWdvcnk6ICdUZWNoJyxcclxuICAgIHJlcXVpcmVtZW50czoge0FkdmVydGlzZW1lbnRzOiAwfSxcclxuICAgIGxldmVsczogW3tjb3N0OiAyMDAwMDAsIGRlc2NyaXB0aW9uOiAnQWRzIGdvdCB5b3UgZG93bj8gVHVybiB0aGVtIG9mZiB3aXRoIHRoaXMgZmFuY3kgdXBncmFkZSEnfV1cclxuICB9LFxyXG4gICdUYWJiZWQgT3V0cHV0Jzoge1xyXG4gICAgY2F0ZWdvcnk6ICdUZWNoJyxcclxuICAgIHJlcXVpcmVtZW50czogeydCZXR0ZXIgTGF5b3V0JzogMCwgJ0Jhc2ljIFN0eWxlJzogMH0sXHJcbiAgICBsZXZlbHM6IFt7Y29zdDogMjAwMDAwLCBkZXNjcmlwdGlvbjogJ1Byb2R1Y2Ugc29tZSB0YWJzIGZvciB5b3VyIG91dHB1dCBzZWN0aW9uISBOb3RlLCB0aGlzIG9ubHkgY29tZXMgd2l0aCBvbmUgdGFiIC0tIHRoZSBvbmUgeW91IGhhdmUhJ31dXHJcbiAgfSxcclxuICAnT3Zlci10aW1lIFByb2R1Y3Rpb24nOiB7XHJcbiAgICBjYXRlZ29yeTogJ1RlY2gnLFxyXG4gICAgcmVxdWlyZW1lbnRzOiB7J1RhYmJlZCBPdXRwdXQnOiAwLCAnTnVtYmVyIEZvcm1hdHRpbmcnOiAwfSxcclxuICAgIGxldmVsczogW3tjb3N0OiAyMDAwMDAwLCBkZXNjcmlwdGlvbjogJ1Byb2R1Y2UgYSBuZXcgdGFiIHRoYXQgc2hvd3MgeW91ciBwcm9kdWN0aW9uIG92ZXIgdGltZSEnfV1cclxuICB9LFxyXG4gICdQcm9kdWN0aW9uIEJyZWFrZG93bic6IHtcclxuICAgIGNhdGVnb3J5OiAnVGVjaCcsXHJcbiAgICByZXF1aXJlbWVudHM6IHsnVGFiYmVkIE91dHB1dCc6IDAsICdOdW1iZXIgRm9ybWF0dGluZyc6IDB9LFxyXG4gICAgbGV2ZWxzOiBbe2Nvc3Q6IDIwMDAwMDAsIGRlc2NyaXB0aW9uOiAnUHJvZHVjZSBhIG5ldyB0YWIgdGhhdCBzaG93cyB5b3VyIHByb2R1Y3Rpb24gYnJlYWtkb3duISd9XVxyXG4gIH0sXHJcbiAgJ1Byb2R1Y3Rpb24gSGlzdG9yeSAnOiB7XHJcbiAgICBjYXRlZ29yeTogJ1RlY2gnLFxyXG4gICAgcmVxdWlyZW1lbnRzOiB7J1Byb2R1Y3Rpb24gQnJlYWtkb3duJzogMH0sXHJcbiAgICBsZXZlbHM6IFtcclxuICAgICAge2Nvc3Q6IDUwMDAwLCBkZXNjcmlwdGlvbjogJ1NsaWdodGx5IGltcHJvdmUgeW91ciBoaXN0b3JpY2FsIGRhdGEhJ30sXHJcbiAgICAgIHtjb3N0OiAxMjUwMDAsIGRlc2NyaXB0aW9uOiAnU2xpZ2h0bHkgaW1wcm92ZSB5b3VyIGhpc3RvcmljYWwgZGF0YSEnfVxyXG4gICAgXVxyXG4gIH1cclxufTsiXX0=
