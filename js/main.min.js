(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./src/js/main.js":[function(require,module,exports){
'use strict';

var upgrades = require('./upgrades');
var gameState = require('./gamestate');
var gameTimer = require('./gametimer');
var gainCalculator = require('./gaincalculator');
var functionBuilder = require('./functionbuilder');
var animatedFlyTip = require('./animatedflytip');
var favico = require('./favico');
var gameController = require('./gamecontroller');
var upgradeManager = require('./upgrademanager');
var adManager = require('./admanager');
var chartConfigs = require('./chartconfigs');
var upgradePath = require('./upgradepath');
var sankey = require('./sankey');

angular.module('c', ['ui.bootstrap', 'hljs', 'LocalStorageModule', 'ngTable', 'angularMoment', 'jlareau.pnotify', 'highcharts-ng']).constant('Upgrades', upgrades).constant('Version', '0.0.1').config(['notificationServiceProvider', function (notificationServiceProvider) {
  notificationServiceProvider.setDefaults({
    addclass: 'stack-bar-bottom',
    width: '70%',
    styling: 'fontawesome'
  });
}]).directive('sankey', sankey).service('favico', favico).service('AnimatedFlyTip', animatedFlyTip).service('GameState', gameState).service('AdManager', adManager).service('ChartConfigs', chartConfigs).service('GameTimer', gameTimer).service('UpgradePath', upgradePath).service('UpgradeManager', upgradeManager).service('GainCalculator', gainCalculator).service('FunctionBuilder', functionBuilder).controller('Game', gameController);

},{"./admanager":"/home/seiyria/projects/c/src/js/admanager.js","./animatedflytip":"/home/seiyria/projects/c/src/js/animatedflytip.js","./chartconfigs":"/home/seiyria/projects/c/src/js/chartconfigs.js","./favico":"/home/seiyria/projects/c/src/js/favico.js","./functionbuilder":"/home/seiyria/projects/c/src/js/functionbuilder.js","./gaincalculator":"/home/seiyria/projects/c/src/js/gaincalculator.js","./gamecontroller":"/home/seiyria/projects/c/src/js/gamecontroller.js","./gamestate":"/home/seiyria/projects/c/src/js/gamestate.js","./gametimer":"/home/seiyria/projects/c/src/js/gametimer.js","./sankey":"/home/seiyria/projects/c/src/js/sankey.js","./upgrademanager":"/home/seiyria/projects/c/src/js/upgrademanager.js","./upgradepath":"/home/seiyria/projects/c/src/js/upgradepath.js","./upgrades":"/home/seiyria/projects/c/src/js/upgrades.js"}],"/home/seiyria/projects/c/src/extjs/sankeyfunctionality.js":[function(require,module,exports){
"use strict";

module.exports = function () {
  var sankey = {},
      nodeWidth = 24,
      nodePadding = 8,
      size = [1, 1],
      nodes = [],
      links = [];

  sankey.nodeWidth = function (_) {
    if (!arguments.length) return nodeWidth;
    nodeWidth = +_;
    return sankey;
  };

  sankey.nodePadding = function (_) {
    if (!arguments.length) return nodePadding;
    nodePadding = +_;
    return sankey;
  };

  sankey.nodes = function (_) {
    if (!arguments.length) return nodes;
    nodes = _;
    return sankey;
  };

  sankey.links = function (_) {
    if (!arguments.length) return links;
    links = _;
    return sankey;
  };

  sankey.size = function (_) {
    if (!arguments.length) return size;
    size = _;
    return sankey;
  };

  sankey.layout = function (iterations) {
    computeNodeLinks();
    computeNodeValues();
    computeNodeBreadths();
    computeNodeDepths(iterations);
    computeLinkDepths();
    return sankey;
  };

  sankey.relayout = function () {
    computeLinkDepths();
    return sankey;
  };

  sankey.link = function () {
    var curvature = 0.5;

    function link(d) {
      var x0 = d.source.x + d.source.dx,
          x1 = d.target.x,
          xi = d3.interpolateNumber(x0, x1),
          x2 = xi(curvature),
          x3 = xi(1 - curvature),
          y0 = d.source.y + d.sy + d.dy / 2,
          y1 = d.target.y + d.ty + d.dy / 2;
      return "M" + x0 + "," + y0 + "C" + x2 + "," + y0 + " " + x3 + "," + y1 + " " + x1 + "," + y1;
    }

    link.curvature = function (_) {
      if (!arguments.length) return curvature;
      curvature = +_;
      return link;
    };

    return link;
  };

  // Populate the sourceLinks and targetLinks for each node.
  // Also, if the source and target are not objects, assume they are indices.
  function computeNodeLinks() {
    nodes.forEach(function (node) {
      node.sourceLinks = [];
      node.targetLinks = [];
    });
    links.forEach(function (link) {
      var source = link.source,
          target = link.target;
      if (typeof source === "number") source = link.source = nodes[link.source];
      if (typeof target === "number") target = link.target = nodes[link.target];
      source.sourceLinks.push(link);
      target.targetLinks.push(link);
    });
  }

  // Compute the value (size) of each node by summing the associated links.
  function computeNodeValues() {
    nodes.forEach(function (node) {
      node.value = Math.max(d3.sum(node.sourceLinks, value), d3.sum(node.targetLinks, value));
    });
  }

  // Iteratively assign the breadth (x-position) for each node.
  // Nodes are assigned the maximum breadth of incoming neighbors plus one;
  // nodes with no incoming links are assigned breadth zero, while
  // nodes with no outgoing links are assigned the maximum breadth.
  function computeNodeBreadths() {
    var remainingNodes = nodes,
        nextNodes,
        x = 0;

    while (remainingNodes.length) {
      nextNodes = [];
      remainingNodes.forEach(function (node) {
        node.x = x;
        node.dx = nodeWidth;
        node.sourceLinks.forEach(function (link) {
          if (nextNodes.indexOf(link.target) < 0) {
            nextNodes.push(link.target);
          }
        });
      });
      remainingNodes = nextNodes;
      ++x;
    }

    //
    moveSinksRight(x);
    scaleNodeBreadths((size[0] - nodeWidth) / (x - 1));
  }

  function moveSourcesRight() {
    nodes.forEach(function (node) {
      if (!node.targetLinks.length) {
        node.x = d3.min(node.sourceLinks, function (d) {
          return d.target.x;
        }) - 1;
      }
    });
  }

  function moveSinksRight(x) {
    nodes.forEach(function (node) {
      if (!node.sourceLinks.length) {
        node.x = x - 1;
      }
    });
  }

  function scaleNodeBreadths(kx) {
    nodes.forEach(function (node) {
      node.x *= kx;
    });
  }

  function computeNodeDepths(iterations) {
    var nodesByBreadth = d3.nest().key(function (d) {
      return d.x;
    }).sortKeys(d3.ascending).entries(nodes).map(function (d) {
      return d.values;
    });

    //
    initializeNodeDepth();
    resolveCollisions();
    for (var alpha = 1; iterations > 0; --iterations) {
      relaxRightToLeft(alpha *= 0.99);
      resolveCollisions();
      relaxLeftToRight(alpha);
      resolveCollisions();
    }

    function initializeNodeDepth() {
      var ky = d3.min(nodesByBreadth, function (nodes) {
        return (size[1] - (nodes.length - 1) * nodePadding) / d3.sum(nodes, value);
      });

      nodesByBreadth.forEach(function (nodes) {
        nodes.forEach(function (node, i) {
          node.y = i;
          node.dy = node.value * ky;
        });
      });

      links.forEach(function (link) {
        link.dy = link.value * ky;
      });
    }

    function relaxLeftToRight(alpha) {
      nodesByBreadth.forEach(function (nodes, breadth) {
        nodes.forEach(function (node) {
          if (node.targetLinks.length) {
            var y = d3.sum(node.targetLinks, weightedSource) / d3.sum(node.targetLinks, value);
            node.y += (y - center(node)) * alpha;
          }
        });
      });

      function weightedSource(link) {
        return center(link.source) * link.value;
      }
    }

    function relaxRightToLeft(alpha) {
      nodesByBreadth.slice().reverse().forEach(function (nodes) {
        nodes.forEach(function (node) {
          if (node.sourceLinks.length) {
            var y = d3.sum(node.sourceLinks, weightedTarget) / d3.sum(node.sourceLinks, value);
            node.y += (y - center(node)) * alpha;
          }
        });
      });

      function weightedTarget(link) {
        return center(link.target) * link.value;
      }
    }

    function resolveCollisions() {
      nodesByBreadth.forEach(function (nodes) {
        var node,
            dy,
            y0 = 0,
            n = nodes.length,
            i;

        // Push any overlapping nodes down.
        nodes.sort(ascendingDepth);
        for (i = 0; i < n; ++i) {
          node = nodes[i];
          dy = y0 - node.y;
          if (dy > 0) node.y += dy;
          y0 = node.y + node.dy + nodePadding;
        }

        // If the bottommost node goes outside the bounds, push it back up.
        dy = y0 - nodePadding - size[1];
        if (dy > 0) {
          y0 = node.y -= dy;

          // Push any overlapping nodes back up.
          for (i = n - 2; i >= 0; --i) {
            node = nodes[i];
            dy = node.y + node.dy + nodePadding - y0;
            if (dy > 0) node.y -= dy;
            y0 = node.y;
          }
        }
      });
    }

    function ascendingDepth(a, b) {
      return a.y - b.y;
    }
  }

  function computeLinkDepths() {
    nodes.forEach(function (node) {
      node.sourceLinks.sort(ascendingTargetDepth);
      node.targetLinks.sort(ascendingSourceDepth);
    });
    nodes.forEach(function (node) {
      var sy = 0,
          ty = 0;
      node.sourceLinks.forEach(function (link) {
        link.sy = sy;
        sy += link.dy;
      });
      node.targetLinks.forEach(function (link) {
        link.ty = ty;
        ty += link.dy;
      });
    });

    function ascendingSourceDepth(a, b) {
      return a.source.y - b.source.y;
    }

    function ascendingTargetDepth(a, b) {
      return a.target.y - b.target.y;
    }
  }

  function center(node) {
    return node.y + node.dy / 2;
  }

  function value(link) {
    return link.value;
  }

  return sankey;
};

},{}],"/home/seiyria/projects/c/src/js/admanager.js":[function(require,module,exports){
'use strict';

var ads = require('./ads');

var adManager = function adManager($interval, notificationService, GameState) {
  $interval(function () {

    if (!GameState.upgrade.has('Advertisements')) {
      return;
    }
    if (!GameState.adSet.get()) {
      return;
    }

    var ad = _.sample(ads);

    notificationService.notifyWithDefaults({
      title: '' + ad.name + ' <a target="_blank" href="' + ad.url + '"><span class=\'fa fa-external-link\'></span></a>',
      text: ad.text
    });
  }, 180000); //6 minutes

  return {};
};

adManager.$inject = ['$interval', 'notificationService', 'GameState'];

module.exports = adManager;

},{"./ads":"/home/seiyria/projects/c/src/js/ads.js"}],"/home/seiyria/projects/c/src/js/ads.js":[function(require,module,exports){
'use strict';

module.exports = [{
  name: 'IdleLands',
  url: 'http://webfe.idle.land',
  text: 'From the creator of this game, check out IdleLands, his prior project!'
}, {
  name: 'Conspiracy Clicker',
  url: 'http://deathraygames.com/play-online/miniLD48/',
  text: 'Made during a 48 hour period, this game captures the attention of that little conspiracist inside of us all. Find out how the real world operates.'
}, {
  name: 'Candy Empirical',
  url: 'http://candy-emperical.appspot.com/',
  text: 'A new incremental game with candy that makes candy. Start out with taffy, then progress through all the candy types.'
}, {
  name: 'Legend of the Fallen Warrior',
  url: 'https://tarnos12.github.io/project/',
  text: 'Surrounded by unfamiliar faces, the fallen warrior must try his best to survive. Will his skills be enough to help him through or will he have to grow and learn new talents in order to escape?'
}, {
  name: 'Critter Mound',
  url: 'http://yoyz.com/critter/',
  text: 'Breed new critters. Breed stronger critters. Destroy your enemies.'
}, {
  name: 'Progress Quest',
  url: 'http://progressquest.com/play/',
  text: 'Progress Quest is an antic and fantastical computer role-playing game. It\'s well worth the time you\'ll spend playing it.'
}, {
  name: 'Clickpocalypse 2',
  url: 'http://minmaxia.com/c2/',
  text: 'A fighter, ranger, wizard and a priest set out to purge the land of evil... one dungeon at a time.'
}];

},{}],"/home/seiyria/projects/c/src/js/animatedflytip.js":[function(require,module,exports){
'use strict';

var animatedFlyTip = function animatedFlyTip($filter) {
  return {
    fly: function fly(num) {
      var useSeparator = arguments[1] === undefined ? false : arguments[1];

      var $element = $('<div />');

      var numString = num;
      if (useSeparator) {
        numString = $filter('number')(numString, 0);
      }

      if (num < 0) {
        $element.addClass('text-danger');
        $element.html(numString);
      } else if (num > 0) {
        $element.addClass('text-success');
        $element.html('+' + numString);
      }

      $element.css('position', 'absolute');
      $('body').append($element);

      var $base = $('#navbar-unit');
      if (!$base.length) {
        return;
      }

      $element.offset({ left: $base.offset().left, top: $base.offset().top });

      $element.animate({ top: '60px' });
      $element.animate({ opacity: 0, top: '60px' }, 500, 'swing', function () {
        $(this).remove();
      });
    }
  };
};

animatedFlyTip.$inject = ['$filter'];

module.exports = animatedFlyTip;

},{}],"/home/seiyria/projects/c/src/js/chartconfigs.js":[function(require,module,exports){
'use strict';

var chartConfigs = function chartConfigs($q, GameState) {
  var defer = $q.defer();

  Highcharts.setOptions({
    global: {
      useUTC: false
    },
    lang: {
      thousandsSep: ','
    }
  });

  var productionValues = function productionValues() {
    return _.pairs(GameState.sourcesGet.get());
  };

  var production = {
    defaultObj: {
      options: {
        chart: {
          type: 'pie'
        },
        credits: {
          enabled: false
        },
        plotOptions: {
          pie: {
            dataLabels: {
              enabled: false
            },
            showInLegend: false
          }
        }
      },
      title: {
        text: ''
      },
      series: [{
        name: 'Data',
        data: productionValues()
      }]
    },

    chart: function chart() {
      return this.defaultObj;
    }
  };

  var overTimeValues = function overTimeValues() {
    return GameState.historyGet.get();
  };

  var overTime = {
    defaultObj: {
      options: {
        chart: {
          type: 'line'
        },
        legend: {
          enabled: false
        }
      },
      yAxis: {
        title: {
          text: ''
        }
      },
      xAxis: {
        type: 'datetime',
        tickPixelInterval: 150,
        title: {
          text: ''
        }
      },
      title: {
        text: ''
      },
      series: [{
        name: 'Data',
        data: overTimeValues()
      }]
    },
    chart: function chart() {
      return this.defaultObj;
    }
  };

  var checkDefaults = function checkDefaults() {
    if (GameState.upgrade.has('Production Labels')) {
      overTime.defaultObj.yAxis.title.text = 'Production';
      overTime.defaultObj.xAxis.title.text = 'Timestamp';
    }

    if (GameState.upgrade.has('Breakdown Labels')) {
      production.defaultObj.options.plotOptions.pie.dataLabels.enabled = true;
      production.defaultObj.options.plotOptions.pie.showInLegend = true;
    }
  };

  checkDefaults();

  GameState.upgrade.watch().then(null, null, checkDefaults);

  GameState.unit.watch().then(null, null, function () {
    defer.notify({ overTime: overTimeValues(), production: productionValues() });
  });

  return {
    get: function get() {
      return { overTime: overTime.chart(), production: production.chart() };
    },
    watch: function watch() {
      return defer.promise;
    }
  };
};

chartConfigs.$inject = ['$q', 'GameState'];

module.exports = chartConfigs;

},{}],"/home/seiyria/projects/c/src/js/favico.js":[function(require,module,exports){
'use strict';

var favico = function favico() {
  var favico = new Favico({
    animation: 'fade'
  });

  var currentNum = 0;

  var badge = function badge(num) {
    if (num === currentNum) {
      return;
    }
    currentNum = num;
    favico.badge(num);
  };
  var reset = function reset() {
    favico.reset();
  };

  return {
    badge: badge,
    reset: reset
  };
};

module.exports = favico;

},{}],"/home/seiyria/projects/c/src/js/functionbuilder.js":[function(require,module,exports){
'use strict';

var functionBuilder = function functionBuilder(GameState, GainCalculator, $window) {
  return {
    build: function build() {

      var upgrade = GameState.upgrade;

      var unitText = '' + GameState.currencySet.get() + 's';

      var functionHeader = ['', ''];
      if (GameState.upgrade.has('Function')) {
        functionHeader = ['function increaseUnits() {', '}'];
      }

      var iterationHeader = ['', ''];
      if (GameState.upgrade.has('Basic Iteration')) {
        iterationHeader = ['for(var i = 0; i < ' + GainCalculator.iteration(upgrade) + '; i++) {', '}'];
      }

      var timeout = '';
      if (GameState.upgrade.has('Basic Timer')) {
        var timeoutText = 'increaseUnits';

        if (GameState.upgrade.has('Basic Timer Boost')) {
          timeoutText = 'function massiveGains() {\n  for(var i = 0; i < ' + GainCalculator.timerBoost(upgrade) + '; i++) {\n    ' + timeoutText + '();\n  }\n}';
        }

        timeout = '$interval(' + timeoutText + ', ' + GainCalculator.timer(upgrade) + ');\n';
      }

      var animationHeader = ['', ''];
      if (GameState.upgrade.has('Basic Animation')) {
        animationHeader = ['var totalUnitsGained = 0;', 'units += totalUnitsGained;\n  animateUnitChange(totalUnitsGained);'];
        unitText = 'totalUnitsGained';
      }

      var saveHeader = ['', ''];
      if (GameState.upgrade.has('Save', 1)) {
        saveHeader = ['\nvar currentTick = 0;', '\n  if(++currentTick % 10 === 0) {\n    currentTick = 0;\n    save();\n  }'];
      }

      if (GameState.upgrade.has('Save', 3)) {
        saveHeader = ['', '\n  save();'];
      }

      // dump it on the page. it's an "exploit"
      $window.increaseUnits = function () {
        var mult = arguments[0] === undefined ? 1 : arguments[0];
        var source = arguments[1] === undefined ? 'Cheating' : arguments[1];
        GameState.unit.inc(mult * GainCalculator.all(upgrade), true, source);
      };

      return '' + timeout + '' + saveHeader[0] + '\n' + functionHeader[0] + '\n  ' + animationHeader[0] + '\n  ' + iterationHeader[0] + '\n    ' + unitText + ' += ' + GainCalculator.boost(upgrade) + ';\n  ' + iterationHeader[1] + '\n  ' + saveHeader[1] + '\n  ' + animationHeader[1] + '\n' + functionHeader[1] + '\n';
    }
  };
};

functionBuilder.$inject = ['GameState', 'GainCalculator', '$window'];

module.exports = functionBuilder;

},{}],"/home/seiyria/projects/c/src/js/gaincalculator.js":[function(require,module,exports){
'use strict';

var gainCalculator = function gainCalculator() {

  var boost = function boost(upgrade) {
    return Math.pow((upgrade.getKey('Basic Boost') || 0) + 1, 2);
  };

  var iteration = function iteration(upgrade) {
    var iterLevel = upgrade.getKey('Basic Iteration');
    if (!iterLevel) {
      return 1;
    }
    return Math.pow(2, iterLevel + 1);
  };

  var timerBoost = function timerBoost(upgrade) {
    return Math.pow((upgrade.getKey('Basic Timer Boost') || 0) + 1, 2);
  };

  var timer = function timer(upgrade) {
    var basicReduction = 0.05 * upgrade.getKey('Basic Timer');
    var advancedReduction = 0.15 * upgrade.getKey('Advanced Timer');
    advancedReduction = _.isNaN(advancedReduction) ? 0 : advancedReduction;
    return 30000 - Math.round(30000 * (basicReduction + advancedReduction));
  };

  var maxHistory = function maxHistory(upgrade) {
    return 10 + 5 * (upgrade.getKey('Production History') || 0);
  };

  return {
    boost: boost,
    iteration: iteration,
    timer: timer,
    timerBoost: timerBoost,
    maxHistory: maxHistory,
    all: function all(upgrade) {
      return boost(upgrade) * iteration(upgrade);
    }
  };
};

module.exports = gainCalculator;

},{}],"/home/seiyria/projects/c/src/js/gamecontroller.js":[function(require,module,exports){
'use strict';

var gameController = function gameController($scope, $window, $interval, $filter, $modal, GameState, ChartConfigs, GameTimer, UpgradeManager, FunctionBuilder, UpgradePath, NgTableParams) {
  $scope._visibleUpgrades = [];
  $scope.groupVisibleHash = {};
  $scope.tabActive = [true, false, false, false];

  $scope.ads = GameState.adSet.get();
  $scope.setAds = function (val) {
    GameState.adSet.set(val);
  };

  $scope.tableParams = new NgTableParams({
    page: 1,
    count: 1000
  }, {
    groupBy: 'category',
    total: $scope._visibleUpgrades.length,
    getData: function getData($defer, params) {
      var data = $scope._visibleUpgrades;

      var orderedData = params.sorting() ? $filter('orderBy')(data, params.orderBy()) : data;

      var filteredData = params.filter() ? $filter('filter')(orderedData, params.filter()) : orderedData;

      params.total($scope._visibleUpgrades.length);

      $defer.resolve(filteredData.slice((params.page() - 1) * params.count(), params.page() * params.count()));
    }
  });

  $scope.hasUpgrade = function (key) {
    var level = arguments[1] === undefined ? 0 : arguments[1];

    return GameState.upgrade.has(key, level);
  };

  $scope.hasUnits = function (amt) {
    return GameState.unit.has(amt);
  };

  $scope.buyUpgrade = function (upgName) {
    var levels = arguments[1] === undefined ? 1 : arguments[1];

    do {
      GameState.upgrade.inc(upgName);
    } while (--levels > 0);
  };

  $scope.gainUnits = function () {
    $window.increaseUnits(1, 'Click');
  };

  $scope.save = function () {
    GameState.save();
  };

  $scope.refresh = function () {
    $scope._units = GameState.unit.get();

    var newUpgrades = UpgradeManager.visible();
    var visible = _.pluck($scope._visibleUpgrades, 'name');
    var newPlucked = _.pluck(newUpgrades, 'name');
    if (newPlucked.length !== visible.length || _.difference(newPlucked, visible).length > 0) {
      $scope._visibleUpgrades = newUpgrades;
    }
    $scope._function = FunctionBuilder.build();
    $scope.tableParams.reload();
  };

  $scope.openModal = function (modal) {
    $modal.open({
      templateUrl: 'modal-' + modal,
      scope: $scope
    });
  };

  $scope.refresh();
  $scope._timer = 0;
  $scope._timermax = 0;
  var timerInterval;

  GameState.unit.watch().then(null, null, $scope.refresh);
  GameState.upgrade.watch().then(null, null, $scope.refresh);

  GameTimer.watch().then(null, null, function (newTimerValue) {
    $scope._timer = $scope._timerMax = newTimerValue;
    if (timerInterval) {
      $interval.cancel(timerInterval);
    }
    timerInterval = $interval(function () {
      $scope._timer -= 100;
    }, 100);
  });

  $scope.chartData = ChartConfigs.get();

  ChartConfigs.watch().then(null, null, function (chartData) {
    _.each(_.keys(chartData), function (key) {
      $scope.chartData[key].series[0].data = chartData[key];
    });
  });

  $scope.saveObject = function () {
    return GameState.buildSaveObject();
  };

  $scope.debugInfo = $window.dumpDebugInfo = function () {
    return JSON.stringify($scope.saveObject(), null, 4);
  };

  $scope.resetGame = function () {
    var callback = arguments[0] === undefined ? function () {} : arguments[0];

    var finalCallback = function finalCallback() {
      GameState.hardReset();
      $scope.refresh();
      $scope.currencyName = GameState.currencySet.get();
      callback();
    };

    if ($scope.hasUpgrade('Confirmation Dialogs')) {
      bootbox.confirm('Are you sure you want to hard reset? Nothing will be saved.', function (result) {
        if (!result) {
          return;
        }
        finalCallback();
      });
    } else {
      finalCallback();
    }
  };

  $scope.currencyName = GameState.currencySet.get();
  $scope.changeCurrency = function () {
    bootbox.prompt({ title: 'What would you like to call the currency?', value: $scope.currencyName, callback: function callback(result) {
        if (!result || !result.trim()) {
          return;
        }
        GameState.currencySet.set(result);
        $scope.currencyName = GameState.currencySet.get();
        $scope.$digest();
        $scope.refresh();
      } });
  };
};

gameController.$inject = ['$scope', '$window', '$interval', '$filter', '$modal', 'GameState', 'ChartConfigs', 'GameTimer', 'UpgradeManager', 'FunctionBuilder', 'UpgradePath', 'ngTableParams'];

module.exports = gameController;

},{}],"/home/seiyria/projects/c/src/js/gamestate.js":[function(require,module,exports){
'use strict';

var gameState = function gameState($q, notificationService, $filter, UPGRADES, GainCalculator, localStorage, AnimatedFlyTip) {

  var getNewState = function getNewState() {
    return {
      upgrades: {},
      units: 0,
      start: Date.now(),
      lastSave: Date.now(),
      currencyName: 'Unit',
      ads: true,
      sources: {},
      history: []
    };
  };

  var currentState = getNewState();

  var upgradeDefer = $q.defer();
  var unitDefer = $q.defer();

  var buildSaveObject = function buildSaveObject() {
    return currentState;
  };

  var save = function save() {
    currentState.lastSave = Date.now();
    localStorage.set('game', buildSaveObject());
  };

  var hardReset = function hardReset() {
    currentState = getNewState();
    save();
  };

  var load = function load() {
    var state = localStorage.get('game');

    if (!state) {
      return;
    }

    _.assign(currentState, state);

    if (!upgrade.has('Offline Progress')) {
      return;
    }

    var diff = Date.now() - state.lastSave;
    var multiplier = 0.25 + 0.25 * upgrade.getKey('Offline Progress');
    var timersElapsed = Math.floor(diff / GainCalculator.timer(upgrade));
    var gain = timersElapsed * multiplier * GainCalculator.all(upgrade) * GainCalculator.timerBoost(upgrade);

    if (gain <= 0) {
      return;
    }

    unit.inc(gain, false, 'Offline Progress');
    save();

    if (upgrade.has('Notifications')) {
      var numString = gain;
      if (upgrade.has('Number Formatting')) {
        numString = $filter('number')(numString, 0);
      }

      notificationService.notifyWithDefaults({
        type: 'success',
        title: 'Offline Progression',
        text: 'You gained ' + numString + ' ' + currentState.currencyName + 's while offline. Welcome back!'
      });
    }
  };

  var historyGet = {
    get: function get() {
      return currentState.history;
    }
  };

  var sourcesGet = {
    get: function get() {
      return currentState.sources;
    }
  };

  var currencySet = {
    set: function set(newName) {
      currentState.currencyName = newName;save();
    },
    get: function get() {
      return currentState.currencyName;
    }
  };

  var adSet = {
    set: function set(isSet) {
      currentState.ads = isSet;
    },
    get: function get() {
      return currentState.ads;
    }
  };

  var upgrade = {
    has: function has(key) {
      var level = arguments[1] === undefined ? 0 : arguments[1];
      return currentState.upgrades[key] > level;
    },
    get: function get() {
      return currentState.upgrades;
    },
    getKey: function getKey(key) {
      return currentState.upgrades[key];
    },
    inc: function inc(key) {

      var nextLevel = currentState.upgrades[key] || 0;

      var cost = _.isFunction(UPGRADES[key].levels) ? UPGRADES[key].levels(nextLevel).cost : UPGRADES[key].levels[nextLevel].cost;
      if (currentState.units < cost) {
        return;
      }

      if (!currentState.upgrades[key]) {
        currentState.upgrades[key] = 0;
      }
      currentState.upgrades[key]++;
      unit.inc(-cost);
      upgradeDefer.notify({ key: key, level: currentState.upgrades[key], all: currentState.upgrades });
    },
    watch: function watch() {
      return upgradeDefer.promise;
    }
  };

  var manageHistory = function manageHistory() {
    var max = GainCalculator.maxHistory(upgrade);

    currentState.history.push({ x: Date.now(), y: currentState.units });
    if (currentState.history.length > max) {
      currentState.history.shift();
    }
  };

  var tick = 0;

  var unit = {
    has: function has(amt) {
      return currentState.units > amt;
    },
    inc: function inc(amt) {
      var display = arguments[1] === undefined ? true : arguments[1];
      var source = arguments[2] === undefined ? 'Click' : arguments[2];

      currentState.units += amt;

      manageHistory();

      if (!currentState.sources[source]) {
        currentState.sources[source] = 0;
      }

      if (amt > 0) {
        currentState.sources[source] += amt;
      }

      unitDefer.notify(currentState.units);

      if (upgrade.has('Basic Animation') && display) {
        AnimatedFlyTip.fly(amt, upgrade.has('Number Formatting'));
      }

      if (upgrade.has('Save', 1) && !upgrade.has('Save', 3)) {
        if (++tick % 10 === 0) {
          tick = 0;
          save();
        }
      }

      if (upgrade.has('Save', 3)) {
        save();
      }
    },
    get: function get() {
      return currentState.units;
    },
    watch: function watch() {
      return unitDefer.promise;
    }
  };

  load();

  return {
    upgrade: upgrade,
    unit: unit,
    currencySet: currencySet,
    adSet: adSet,
    sourcesGet: sourcesGet,
    historyGet: historyGet,
    save: save,
    buildSaveObject: buildSaveObject,
    hardReset: hardReset
  };
};

gameState.$inject = ['$q', 'notificationService', '$filter', 'Upgrades', 'GainCalculator', 'localStorageService', 'AnimatedFlyTip'];

module.exports = gameState;

},{}],"/home/seiyria/projects/c/src/js/gametimer.js":[function(require,module,exports){
'use strict';

var gameTimer = function gameTimer($q, $interval, $timeout, $window, GameState, AdManager, GainCalculator) {

  var interval = null;
  var timerDefer = $q.defer();

  var startTimer = function startTimer() {
    var upgradeData = arguments[0] === undefined ? { key: 'Timer' } : arguments[0];

    if (!GameState.upgrade.has('Basic Timer')) {
      return;
    }
    if (!_.contains(upgradeData.key, 'Timer')) {
      return;
    }

    if (interval) {
      $interval.cancel(interval);
    }

    interval = $interval(function () {
      $window.increaseUnits(1 + GainCalculator.timerBoost(GameState.upgrade), 'Timer');
      timerDefer.notify(GainCalculator.timer(GameState.upgrade));
    }, GainCalculator.timer(GameState.upgrade));

    timerDefer.notify(GainCalculator.timer(GameState.upgrade));
  };

  if (GameState.upgrade.has('Basic Timer')) {
    $timeout(startTimer, 0);
  }

  GameState.upgrade.watch().then(null, null, startTimer);

  return {
    watch: function watch() {
      return timerDefer.promise;
    }
  };
};

gameTimer.$inject = ['$q', '$interval', '$timeout', '$window', 'GameState', 'AdManager', 'GainCalculator'];

module.exports = gameTimer;

},{}],"/home/seiyria/projects/c/src/js/sankey.js":[function(require,module,exports){
'use strict';

var sankeyFunctionality = require('../extjs/sankeyfunctionality');
d3.sankey = sankeyFunctionality;

var sankey = function sankey(UpgradePath) {
  return {
    restrict: 'E',
    scope: {},
    link: function link(scope, element) {

      var constants = {
        OPACITY_LOW: 0.2,
        OPACITY_HIGH: 0.6
      };

      scope.data = UpgradePath.get();

      var width = 500;
      var height = 750;

      var svg = d3.select(element[0]).append('svg').attr('height', height).style('width', '100%').style('height', height);

      var sankeyD = d3.sankey().nodeWidth(8).nodePadding(10).size([width, height]);

      var color = d3.scale.category20();
      var path = sankeyD.link();

      var reinit = function reinit() {
        svg.selectAll('g').remove();
        sankeyD.nodes(scope.data.nodes).links(scope.data.links).layout(256);

        var link = svg.append('g').selectAll('.link').data(scope.data.links).enter().append('path').attr('class', 'link').attr('d', path).attr('stroke-width', function (d) {
          return Math.max(1, d.dy);
        }).attr('stroke', function (d) {
          return d3.rgb(color(d.source.name.split(' ').join(''))).darker();
        }).attr('opacity', constants.OPACITY_LOW).on('mouseover', function () {
          d3.select(this).transition().style('opacity', constants.OPACITY_HIGH);
        }).on('mouseout', function () {
          d3.select(this).transition().style('opacity', constants.OPACITY_LOW);
        }).sort(function (a, b) {
          return b.dy - a.dy;
        });

        link.append('title').text(function (d) {
          return '' + d.source.name + ' → ' + d.target.name;
        });

        var node = svg.append('g').selectAll('.node').data(scope.data.nodes).enter().append('g').attr('class', 'node').attr('transform', function (d) {
          return 'translate(' + d.x + ',' + (_.isNaN(d.y) ? 0 : d.y) + ')';
        });

        var mouseFilter = function mouseFilter(d, opacity) {
          svg.selectAll('.link').filter(function (l) {
            return l.source === d || l.target === d;
          }).transition().style('opacity', opacity);
        };

        node.append('rect').attr('height', function (d) {
          return d.dy;
        }).attr('width', sankeyD.nodeWidth()).style('fill', function (d) {
          return color(d.name.split(' ').join(''));
        }).style('stroke', function (d) {
          return d3.rgb(d.color).darker(2);
        }).on('mouseover', function (d) {
          return mouseFilter(d, constants.OPACITY_HIGH);
        }).on('mouseout', function (d) {
          return mouseFilter(d, constants.OPACITY_LOW);
        }).on('dblclick', function (d) {
          svg.selectAll('.link').filter(function (l) {
            return l.target === d;
          }).attr('display', function () {
            return d3.select(this).attr('display') === 'none' ? 'inline' : 'none';
          });
        }).append('title').text(function (d) {
          return d.name;
        });

        node.append('text').append('tspan').attr('x', -6).attr('y', function (d) {
          return d.dy / 2;
        }).attr('dy', '.35em').attr('text-anchor', 'end').attr('transform', null).text(function (d) {
          return d.name;
        }).filter(function (d) {
          return d.x < width * 0.75;
        }).attr('x', 2 + sankeyD.nodeWidth()).attr('text-anchor', 'start').filter(function (d) {
          return d.x > width * 0.25;
        }).attr('text-anchor', 'middle');
      };

      reinit();

      UpgradePath.watch().then(null, null, function () {
        scope.data = UpgradePath.get();

        reinit();
      });
    }
  };
};

sankey.$inject = ['UpgradePath'];

module.exports = sankey;

},{"../extjs/sankeyfunctionality":"/home/seiyria/projects/c/src/extjs/sankeyfunctionality.js"}],"/home/seiyria/projects/c/src/js/upgrademanager.js":[function(require,module,exports){
'use strict';

var upgradeManager = function upgradeManager(GameState, UPGRADES, favico) {

  var hasUpgrade = function hasUpgrade(key) {
    var level = arguments[1] === undefined ? 0 : arguments[1];

    return GameState.upgrade.has(key, level);
  };

  var visible = function visible() {

    var current = GameState.unit.get();
    var allRet = [];

    _.each(UPGRADES, function (item, itemName) {

      var ret = [];

      var meetsAllReqs = true;

      _.each(item.requirements, function (req, key) {
        if (!hasUpgrade(key, req)) {
          meetsAllReqs = false;
        }
      });

      if (!meetsAllReqs) {
        return;
      }

      var levels = item.levels;
      if (_.isFunction(item.levels)) {
        var nextLevel = GameState.upgrade.getKey(itemName) || 0;
        levels = {};
        levels[nextLevel] = item.levels(nextLevel);
      }

      _.each(levels, function (level, i) {
        var visLevel = GameState.upgrade.getKey('Upgrade Visibility');
        var visibilityBoost = 1 + (_.isUndefined(visLevel) ? 0 : 0.15 * visLevel);
        var prevItem = ret[ret.length - 1];
        var totalCost = level.cost + (prevItem ? prevItem.cost : 0);

        if (hasUpgrade(itemName, i) || totalCost / visibilityBoost > current) {
          return;
        }

        ret.push({
          name: itemName,
          level: i,
          cost: totalCost,
          description: level.description,
          buyLevels: 1 + (prevItem ? prevItem.buyLevels : 0),
          category: item.category
        });
      });

      allRet.push.apply(allRet, ret);
    });

    if (hasUpgrade('Alphabetized Upgrades')) {
      allRet = _.sortByOrder(allRet, ['name', 'level'], [true, true]);
    }

    if (hasUpgrade('Best Favicon')) {
      var buyableUpgrades = _.filter(allRet, function (item) {
        return item.cost < current;
      }).length;
      if (buyableUpgrades > 0) {
        favico.badge(buyableUpgrades);
      } else {
        favico.reset();
      }
    }

    return allRet;
  };

  return {
    visible: _.throttle(visible, 50)
  };
};

upgradeManager.$inject = ['GameState', 'Upgrades', 'favico'];

module.exports = upgradeManager;

},{}],"/home/seiyria/projects/c/src/js/upgradepath.js":[function(require,module,exports){
'use strict';

var upgradePath = function upgradePath($q, GameState, UPGRADES) {
  var defer = $q.defer();

  var structure = {
    nodes: [],
    links: []
  };

  var recalculate = function recalculate() {
    structure.nodes = _(GameState.upgrade.get()).keys().filter(function (key) {
      return _.has(UPGRADES, key);
    }).map(function (key) {
      return { name: key };
    }).value();
    structure.links = _(structure.nodes).map(function (node) {
      var nodeLinks = [];

      _.each(UPGRADES[node.name].requirements, function (val, key) {
        nodeLinks.push({
          source: _.findWhere(structure.nodes, { name: key }),
          value: 1,
          target: _.findWhere(structure.nodes, { name: node.name })
        });
      });

      return nodeLinks;
    }).flatten().value();

    defer.notify(structure);
  };

  recalculate();

  GameState.upgrade.watch().then(null, null, recalculate);

  return {
    get: function get() {
      return structure;
    },
    watch: function watch() {
      return defer.promise;
    }
  };
};

upgradePath.$inject = ['$q', 'GameState', 'Upgrades'];

module.exports = upgradePath;

},{}],"/home/seiyria/projects/c/src/js/upgrades.js":[function(require,module,exports){
'use strict';

module.exports = {
  Scoreboard: {
    category: 'Visual',
    levels: [{ cost: 5, description: 'Visualize your score!' }]
  },
  'Basic Layout': {
    category: 'Visual',
    levels: [{ cost: 15, description: 'A slightly better layout.' }, { cost: 200, description: 'Another slightly better layout.' }]
  },
  'Better Layout': {
    category: 'Visual',
    requirements: { 'Basic Layout': 1 },
    levels: [{ cost: 200, description: 'One of the better layouts you get to see.' }, { cost: 2000, description: 'Probably the best layout in the game.' }]
  },
  Function: {
    category: 'Tech',
    levels: [{ cost: 20, description: 'Access to a function is necessary to gain more power.' }]
  },
  'Basic Iteration': {
    category: 'Tech',
    requirements: { Function: 0 },
    levels: [{ cost: 50, description: 'More iterations means faster production.' }, { cost: 300, description: 'Even more iterations means even faster production.' }, { cost: 20000, description: 'Yet more iterations means yet faster production.' }, { cost: 150000, description: 'Many iterations means much faster production.' }]
  },
  'Basic Timer': {
    category: 'Tech',
    requirements: { Function: 0 },
    levels: [{ cost: 50, description: 'A timer runs and automatically produces for you every so often.' }, { cost: 600, description: 'The timing of the timer is slightly faster.' }, { cost: 20000, description: 'The timer runs even faster now.' }, { cost: 100000, description: 'The timer goes zoom zoom!' }]
  },
  'Basic Boost': {
    category: 'Tech',
    requirements: { Function: 0 },
    levels: [{ cost: 10, description: 'Bigger boost means more production happening at once.' }, { cost: 1000, description: 'Even bigger boost means even more production.' }, { cost: 25000, description: 'Yet a bigger boost means a higher production yield.' }, { cost: 200000, description: 'The biggest boost means the best production.' }]
  },
  Capitalization: {
    category: 'Visual',
    requirements: { Scoreboard: 0 },
    levels: [{ cost: 100, description: 'Sometimes good punctuation just looks nice.' }]
  },
  Preformatting: {
    category: 'Visual',
    requirements: { 'Basic Iteration': 0 },
    levels: [{ cost: 1500, description: 'Better code formatting for readability' }]
  },
  'Visual Countdown': {
    category: 'Visual',
    requirements: { 'Basic Timer': 0 },
    levels: [{ cost: 1000, description: 'It might help to see the countdown for the timer run.' }]
  },
  'Page Title': {
    category: 'Cosmetic',
    requirements: { 'Basic Layout': 0 },
    levels: [{ cost: 500, description: 'A nicer looking page title. So revealing!' }]
  },
  'Better Page Title': {
    category: 'Cosmetic',
    requirements: { 'Page Title': 0, Scoreboard: 0 },
    levels: [{ cost: 2500, description: 'Just when you thought the page title looked good, it gets better!' }]
  },
  'Alphabetized Upgrades': {
    category: 'Cosmetic',
    requirements: { Capitalization: 0, 'Better Layout': 0 },
    levels: [{ cost: 5000, description: 'Putting the upgrades in some kind of order makes them much easier to navigate.' }]
  },
  'Upgrade Visibility': {
    category: 'Cosmetic',
    requirements: { 'Alphabetized Upgrades': 0 },
    levels: [{ cost: 6500, description: 'Upgrades will appear slightly before you can buy them.' }, { cost: 8500, description: 'Upgrades will appear a while before you can buy them.' }, { cost: 10500, description: 'Upgrades will show up quite a ways before you can buy them.' }]
  },
  'Progress Bar': {
    category: 'Visual',
    requirements: { 'Better Layout': 1, 'Basic Color': 0, 'Visual Countdown': 0 },
    levels: [{ cost: 5000, description: 'Transform your countdown into a progress bar instead!' }]
  },
  'Basic Style': {
    category: 'Visual',
    requirements: { 'Better Layout': 1 },
    levels: [{ cost: 10000, description: 'Yes, it does get better! This upgrade makes the table look nicer.' }, { cost: 20000, description: 'This upgrade fixes some slight alignment issues introduced by the previous upgrade.' }]
  },
  'Basic Color': {
    category: 'Visual',
    requirements: { 'Basic Style': 0 },
    levels: [{ cost: 12500, description: 'Add some color to the page.' }]
  },
  Iconography: {
    category: 'Visual',
    requirements: { 'Basic Style': 0 },
    levels: [{ cost: 25000, description: 'Get some icons on the page.' }]
  },
  'Number Formatting': {
    category: 'Cosmetic',
    requirements: { 'Basic Style': 0 },
    levels: [{ cost: 20000, description: 'Format the numbers more nicely!' }]
  },
  'Basic Animation': {
    category: 'Cosmetic',
    requirements: { 'Basic Style': 0, 'Basic Iteration': 0, 'Basic Color': 0, 'Better Layout': 1 },
    levels: [{ cost: 100000, description: 'Sprinkle some animations onto the page.' }]
  },
  Favicon: {
    category: 'Cosmetic',
    requirements: { 'Better Layout': 1 },
    levels: [{ cost: 2000, description: 'Add the favicon to the header bar.' }]
  },
  'Best Favicon': {
    category: 'Cosmetic',
    requirements: { 'Better Page Title': 0, Favicon: 0 },
    levels: [{ cost: 100000, description: 'Get notified via favicon whenever you have a new upgrade to purchase.' }]
  },
  'Syntax Highlighting': {
    category: 'Cosmetic',
    requirements: { Preformatting: 0 },
    levels: [{ cost: 50000, description: 'Make every code portion look even better!' }]
  },
  Save: {
    category: 'Tech',
    requirements: { 'Basic Layout': 0 },
    levels: [{ cost: 300, description: 'Introduce a save button that allows you to save your progress.' }, { cost: 5000, description: 'Introduce a mechanic that saves occasionally.' }, { cost: 20000, description: 'Introduce a debug menu where you can see your save data.' }, { cost: 150000, description: 'Make the game save automatically after production or purchases.' }]
  },
  'Advanced Timer': {
    category: 'Tech',
    requirements: { 'Basic Timer': 3 },
    levels: [{ cost: 200000, description: 'The timer is back and faster than ever.' }, { cost: 750000, description: 'Just when you thought the timer was out of tricks, it gets faster!' }, { cost: 1500000, description: 'The fastest timer yet!' }]
  },
  'Best Table': {
    category: 'Tech',
    requirements: { 'Basic Style': 1, 'Alphabetized Upgrades': 0 },
    levels: [{ cost: 250000, description: 'This gives you the best upgrade table possible!' }]
  },
  Menu: {
    category: 'Tech',
    requirements: { 'Basic Layout': 0 },
    levels: [{ cost: 2500, description: 'Buy a dropdown menu. Things end up here.' }]
  },
  'Help Menu': {
    category: 'Tech',
    requirements: { Menu: 0 },
    levels: [{ cost: 2, description: 'The cheapest upgrade in the game. I bet you have no idea what it does.' }]
  },
  Tooltips: {
    category: 'Tech',
    requirements: { 'Help Menu': 0 },
    levels: [{ cost: 17500, description: 'Well, this sure is self-referential.' }]
  },
  'Options Menu': {
    category: 'Tech',
    requirements: { Menu: 0 },
    levels: [{ cost: 5000, description: 'All of the stange options go here. Also, you can reset your game.' }]
  },
  'Offline Progress': {
    category: 'Tech',
    requirements: { 'Basic Timer': 0 },
    levels: [{ cost: 10000, description: 'You will gain progress slowly, even while the game is not open.' }, { cost: 100000, description: 'You will gain progress slightly faster, even while the game is not open.' }, { cost: 1000000, description: 'You will gain progress normally, even while the game is not open.' }]
  },
  'Confirmation Dialogs': {
    category: 'Tech',
    requirements: { 'Help Menu': 0 },
    levels: [{ cost: 100000, description: 'You get notified of potentially dangerous actions. Beware!' }]
  },
  'Currency Name Change': {
    category: 'Cosmetic',
    requirements: { 'Options Menu': 0 },
    levels: [{ cost: 650000, description: 'If you dislike the name units, you can change it!' }]
  },
  'Basic Timer Boost': {
    category: 'Tech',
    requirements: { 'Basic Timer': 0 },
    levels: [{ cost: 10000, description: 'You get more production via timer methods.' }, { cost: 500000, description: 'You get even more production via the timer.' }, { cost: 2500000, description: 'The timer is now quite lucrative.' }]
  },
  Notifications: {
    category: 'Tech',
    requirements: { 'Basic Animation': 0, Iconography: 0, 'Basic Color': 0, 'Basic Style': 0 },
    levels: [{ cost: 50000, description: 'Get notified about various happenings!' }]
  },
  Advertisements: {
    category: 'Tech',
    requirements: { Notifications: 0 },
    levels: [{ cost: 20000, description: 'Advertisements for other, related games!' }]
  },
  Adblocker: {
    category: 'Tech',
    requirements: { Advertisements: 0 },
    levels: [{ cost: 200000, description: 'Ads got you down? Turn them off with this fancy upgrade!' }]
  },
  'Tabbed Output': {
    category: 'Tech',
    requirements: { 'Better Layout': 0, 'Basic Style': 0 },
    levels: [{ cost: 200000, description: 'Produce some tabs for your output section! Note, this only comes with one tab -- the one you have!' }]
  },
  'Production Over Time': {
    category: 'Tech',
    requirements: { 'Tabbed Output': 0, 'Number Formatting': 0 },
    levels: [{ cost: 2000000, description: 'Produce a new tab that shows your production over time!' }]
  },
  'Production Breakdown': {
    category: 'Tech',
    requirements: { 'Tabbed Output': 0, 'Number Formatting': 0 },
    levels: [{ cost: 2000000, description: 'Produce a new tab that shows your production breakdown!' }]
  },
  'Production History': {
    category: 'Tech',
    requirements: { 'Production Breakdown': 0 },
    levels: [{ cost: 50000, description: 'Slightly improve your historical data!' }, { cost: 125000, description: 'Slightly improve your historical data!' }]
  },
  'Production Labels': {
    category: 'Tech',
    requirements: { 'Production Over Time': 0 },
    levels: [{ cost: 50000, description: 'Get some labels on that chart!' }]
  },
  'Breakdown Labels': {
    category: 'Tech',
    requirements: { 'Production Breakdown': 0 },
    levels: [{ cost: 50000, description: 'Get some labels on that chart!' }]
  },
  'Upgrade Tree': {
    category: 'Tech',
    requirements: { 'Tabbed Output': 0, 'Basic Color': 0, Tooltips: 0, 'Basic Animation': 0 },
    levels: [{ cost: 100000, description: 'Visualize the upgrade tree! Oooh, pretty!' }]
  }
};

},{}]},{},["./src/js/main.js"])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvaG9tZS9zZWl5cmlhL3Byb2plY3RzL2Mvc3JjL2pzL21haW4uanMiLCIvaG9tZS9zZWl5cmlhL3Byb2plY3RzL2Mvc3JjL2V4dGpzL3NhbmtleWZ1bmN0aW9uYWxpdHkuanMiLCIvaG9tZS9zZWl5cmlhL3Byb2plY3RzL2Mvc3JjL2pzL2FkbWFuYWdlci5qcyIsIi9ob21lL3NlaXlyaWEvcHJvamVjdHMvYy9zcmMvanMvYWRzLmpzIiwiL2hvbWUvc2VpeXJpYS9wcm9qZWN0cy9jL3NyYy9qcy9hbmltYXRlZGZseXRpcC5qcyIsIi9ob21lL3NlaXlyaWEvcHJvamVjdHMvYy9zcmMvanMvY2hhcnRjb25maWdzLmpzIiwiL2hvbWUvc2VpeXJpYS9wcm9qZWN0cy9jL3NyYy9qcy9mYXZpY28uanMiLCIvaG9tZS9zZWl5cmlhL3Byb2plY3RzL2Mvc3JjL2pzL2Z1bmN0aW9uYnVpbGRlci5qcyIsIi9ob21lL3NlaXlyaWEvcHJvamVjdHMvYy9zcmMvanMvZ2FpbmNhbGN1bGF0b3IuanMiLCIvaG9tZS9zZWl5cmlhL3Byb2plY3RzL2Mvc3JjL2pzL2dhbWVjb250cm9sbGVyLmpzIiwiL2hvbWUvc2VpeXJpYS9wcm9qZWN0cy9jL3NyYy9qcy9nYW1lc3RhdGUuanMiLCIvaG9tZS9zZWl5cmlhL3Byb2plY3RzL2Mvc3JjL2pzL2dhbWV0aW1lci5qcyIsIi9ob21lL3NlaXlyaWEvcHJvamVjdHMvYy9zcmMvanMvc2Fua2V5LmpzIiwiL2hvbWUvc2VpeXJpYS9wcm9qZWN0cy9jL3NyYy9qcy91cGdyYWRlbWFuYWdlci5qcyIsIi9ob21lL3NlaXlyaWEvcHJvamVjdHMvYy9zcmMvanMvdXBncmFkZXBhdGguanMiLCIvaG9tZS9zZWl5cmlhL3Byb2plY3RzL2Mvc3JjL2pzL3VwZ3JhZGVzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUND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LEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSx3Q0FBd0MsRUFBQyxDQUN0RTtHQUNGO0FBQ0QscUJBQW1CLEVBQUU7QUFDbkIsWUFBUSxFQUFFLE1BQU07QUFDaEIsZ0JBQVksRUFBRSxFQUFDLHNCQUFzQixFQUFFLENBQUMsRUFBQztBQUN6QyxVQUFNLEVBQUUsQ0FBQyxFQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLGdDQUFnQyxFQUFDLENBQUM7R0FDdkU7QUFDRCxvQkFBa0IsRUFBRTtBQUNsQixZQUFRLEVBQUUsTUFBTTtBQUNoQixnQkFBWSxFQUFFLEVBQUMsc0JBQXNCLEVBQUUsQ0FBQyxFQUFDO0FBQ3pDLFVBQU0sRUFBRSxDQUFDLEVBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsZ0NBQWdDLEVBQUMsQ0FBQztHQUN2RTtBQUNELGdCQUFjLEVBQUU7QUFDZCxZQUFRLEVBQUUsTUFBTTtBQUNoQixnQkFBWSxFQUFFLEVBQUMsZUFBZSxFQUFFLENBQUMsRUFBRSxhQUFhLEVBQUUsQ0FBQyxFQUFFLFVBQVksQ0FBQyxFQUFFLGlCQUFpQixFQUFFLENBQUMsRUFBQztBQUN6RixVQUFNLEVBQUUsQ0FBQyxFQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLDJDQUEyQyxFQUFDLENBQUM7R0FDbkY7Q0FDRixDQUFDIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIlxudmFyIHVwZ3JhZGVzID0gcmVxdWlyZSgnLi91cGdyYWRlcycpO1xudmFyIGdhbWVTdGF0ZSA9IHJlcXVpcmUoJy4vZ2FtZXN0YXRlJyk7XG52YXIgZ2FtZVRpbWVyID0gcmVxdWlyZSgnLi9nYW1ldGltZXInKTtcbnZhciBnYWluQ2FsY3VsYXRvciA9IHJlcXVpcmUoJy4vZ2FpbmNhbGN1bGF0b3InKTtcbnZhciBmdW5jdGlvbkJ1aWxkZXIgPSByZXF1aXJlKCcuL2Z1bmN0aW9uYnVpbGRlcicpO1xudmFyIGFuaW1hdGVkRmx5VGlwID0gcmVxdWlyZSgnLi9hbmltYXRlZGZseXRpcCcpO1xudmFyIGZhdmljbyA9IHJlcXVpcmUoJy4vZmF2aWNvJyk7XG52YXIgZ2FtZUNvbnRyb2xsZXIgPSByZXF1aXJlKCcuL2dhbWVjb250cm9sbGVyJyk7XG52YXIgdXBncmFkZU1hbmFnZXIgPSByZXF1aXJlKCcuL3VwZ3JhZGVtYW5hZ2VyJyk7XG52YXIgYWRNYW5hZ2VyID0gcmVxdWlyZSgnLi9hZG1hbmFnZXInKTtcbnZhciBjaGFydENvbmZpZ3MgPSByZXF1aXJlKCcuL2NoYXJ0Y29uZmlncycpO1xudmFyIHVwZ3JhZGVQYXRoID0gcmVxdWlyZSgnLi91cGdyYWRlcGF0aCcpO1xudmFyIHNhbmtleSA9IHJlcXVpcmUoJy4vc2Fua2V5Jyk7XG5cbmFuZ3VsYXIubW9kdWxlKCdjJywgWyd1aS5ib290c3RyYXAnLCAnaGxqcycsICdMb2NhbFN0b3JhZ2VNb2R1bGUnLCAnbmdUYWJsZScsICdhbmd1bGFyTW9tZW50JywgJ2psYXJlYXUucG5vdGlmeScsICdoaWdoY2hhcnRzLW5nJ10pXG5cbiAgLmNvbnN0YW50KCdVcGdyYWRlcycsIHVwZ3JhZGVzKVxuXG4gIC5jb25zdGFudCgnVmVyc2lvbicsICcwLjAuMScpXG5cbiAgLmNvbmZpZyhbJ25vdGlmaWNhdGlvblNlcnZpY2VQcm92aWRlcicsIGZ1bmN0aW9uKG5vdGlmaWNhdGlvblNlcnZpY2VQcm92aWRlcikge1xuICAgIG5vdGlmaWNhdGlvblNlcnZpY2VQcm92aWRlci5zZXREZWZhdWx0cyh7XG4gICAgICBhZGRjbGFzczogJ3N0YWNrLWJhci1ib3R0b20nLFxuICAgICAgd2lkdGg6ICc3MCUnLFxuICAgICAgc3R5bGluZzogJ2ZvbnRhd2Vzb21lJ1xuICAgIH0pO1xuICB9XSlcblxuICAuZGlyZWN0aXZlKCdzYW5rZXknLCBzYW5rZXkpXG5cbiAgLnNlcnZpY2UoJ2ZhdmljbycsIGZhdmljbylcblxuICAuc2VydmljZSgnQW5pbWF0ZWRGbHlUaXAnLCBhbmltYXRlZEZseVRpcClcblxuICAuc2VydmljZSgnR2FtZVN0YXRlJywgZ2FtZVN0YXRlKVxuXG4gIC5zZXJ2aWNlKCdBZE1hbmFnZXInLCBhZE1hbmFnZXIpXG5cbiAgLnNlcnZpY2UoJ0NoYXJ0Q29uZmlncycsIGNoYXJ0Q29uZmlncylcblxuICAuc2VydmljZSgnR2FtZVRpbWVyJywgZ2FtZVRpbWVyKVxuXG4gIC5zZXJ2aWNlKCdVcGdyYWRlUGF0aCcsIHVwZ3JhZGVQYXRoKVxuXG4gIC5zZXJ2aWNlKCdVcGdyYWRlTWFuYWdlcicsIHVwZ3JhZGVNYW5hZ2VyKVxuXG4gIC5zZXJ2aWNlKCdHYWluQ2FsY3VsYXRvcicsIGdhaW5DYWxjdWxhdG9yKVxuXG4gIC5zZXJ2aWNlKCdGdW5jdGlvbkJ1aWxkZXInLCBmdW5jdGlvbkJ1aWxkZXIpXG5cbiAgLmNvbnRyb2xsZXIoJ0dhbWUnLCBnYW1lQ29udHJvbGxlcik7IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHNhbmtleSA9IHt9LFxuICAgIG5vZGVXaWR0aCA9IDI0LFxuICAgIG5vZGVQYWRkaW5nID0gOCxcbiAgICBzaXplID0gWzEsIDFdLFxuICAgIG5vZGVzID0gW10sXG4gICAgbGlua3MgPSBbXTtcblxuICBzYW5rZXkubm9kZVdpZHRoID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIG5vZGVXaWR0aDtcbiAgICBub2RlV2lkdGggPSArXztcbiAgICByZXR1cm4gc2Fua2V5O1xuICB9O1xuXG4gIHNhbmtleS5ub2RlUGFkZGluZyA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBub2RlUGFkZGluZztcbiAgICBub2RlUGFkZGluZyA9ICtfO1xuICAgIHJldHVybiBzYW5rZXk7XG4gIH07XG5cbiAgc2Fua2V5Lm5vZGVzID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIG5vZGVzO1xuICAgIG5vZGVzID0gXztcbiAgICByZXR1cm4gc2Fua2V5O1xuICB9O1xuXG4gIHNhbmtleS5saW5rcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBsaW5rcztcbiAgICBsaW5rcyA9IF87XG4gICAgcmV0dXJuIHNhbmtleTtcbiAgfTtcblxuICBzYW5rZXkuc2l6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzaXplO1xuICAgIHNpemUgPSBfO1xuICAgIHJldHVybiBzYW5rZXk7XG4gIH07XG5cbiAgc2Fua2V5LmxheW91dCA9IGZ1bmN0aW9uKGl0ZXJhdGlvbnMpIHtcbiAgICBjb21wdXRlTm9kZUxpbmtzKCk7XG4gICAgY29tcHV0ZU5vZGVWYWx1ZXMoKTtcbiAgICBjb21wdXRlTm9kZUJyZWFkdGhzKCk7XG4gICAgY29tcHV0ZU5vZGVEZXB0aHMoaXRlcmF0aW9ucyk7XG4gICAgY29tcHV0ZUxpbmtEZXB0aHMoKTtcbiAgICByZXR1cm4gc2Fua2V5O1xuICB9O1xuXG4gIHNhbmtleS5yZWxheW91dCA9IGZ1bmN0aW9uKCkge1xuICAgIGNvbXB1dGVMaW5rRGVwdGhzKCk7XG4gICAgcmV0dXJuIHNhbmtleTtcbiAgfTtcblxuICBzYW5rZXkubGluayA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjdXJ2YXR1cmUgPSAuNTtcblxuICAgIGZ1bmN0aW9uIGxpbmsoZCkge1xuICAgICAgdmFyIHgwID0gZC5zb3VyY2UueCArIGQuc291cmNlLmR4LFxuICAgICAgICB4MSA9IGQudGFyZ2V0LngsXG4gICAgICAgIHhpID0gZDMuaW50ZXJwb2xhdGVOdW1iZXIoeDAsIHgxKSxcbiAgICAgICAgeDIgPSB4aShjdXJ2YXR1cmUpLFxuICAgICAgICB4MyA9IHhpKDEgLSBjdXJ2YXR1cmUpLFxuICAgICAgICB5MCA9IGQuc291cmNlLnkgKyBkLnN5ICsgZC5keSAvIDIsXG4gICAgICAgIHkxID0gZC50YXJnZXQueSArIGQudHkgKyBkLmR5IC8gMjtcbiAgICAgIHJldHVybiBcIk1cIiArIHgwICsgXCIsXCIgKyB5MFxuICAgICAgICArIFwiQ1wiICsgeDIgKyBcIixcIiArIHkwXG4gICAgICAgICsgXCIgXCIgKyB4MyArIFwiLFwiICsgeTFcbiAgICAgICAgKyBcIiBcIiArIHgxICsgXCIsXCIgKyB5MTtcbiAgICB9XG5cbiAgICBsaW5rLmN1cnZhdHVyZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGN1cnZhdHVyZTtcbiAgICAgIGN1cnZhdHVyZSA9ICtfO1xuICAgICAgcmV0dXJuIGxpbms7XG4gICAgfTtcblxuICAgIHJldHVybiBsaW5rO1xuICB9O1xuXG4gIC8vIFBvcHVsYXRlIHRoZSBzb3VyY2VMaW5rcyBhbmQgdGFyZ2V0TGlua3MgZm9yIGVhY2ggbm9kZS5cbiAgLy8gQWxzbywgaWYgdGhlIHNvdXJjZSBhbmQgdGFyZ2V0IGFyZSBub3Qgb2JqZWN0cywgYXNzdW1lIHRoZXkgYXJlIGluZGljZXMuXG4gIGZ1bmN0aW9uIGNvbXB1dGVOb2RlTGlua3MoKSB7XG4gICAgbm9kZXMuZm9yRWFjaChmdW5jdGlvbihub2RlKSB7XG4gICAgICBub2RlLnNvdXJjZUxpbmtzID0gW107XG4gICAgICBub2RlLnRhcmdldExpbmtzID0gW107XG4gICAgfSk7XG4gICAgbGlua3MuZm9yRWFjaChmdW5jdGlvbihsaW5rKSB7XG4gICAgICB2YXIgc291cmNlID0gbGluay5zb3VyY2UsXG4gICAgICAgIHRhcmdldCA9IGxpbmsudGFyZ2V0O1xuICAgICAgaWYgKHR5cGVvZiBzb3VyY2UgPT09IFwibnVtYmVyXCIpIHNvdXJjZSA9IGxpbmsuc291cmNlID0gbm9kZXNbbGluay5zb3VyY2VdO1xuICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09IFwibnVtYmVyXCIpIHRhcmdldCA9IGxpbmsudGFyZ2V0ID0gbm9kZXNbbGluay50YXJnZXRdO1xuICAgICAgc291cmNlLnNvdXJjZUxpbmtzLnB1c2gobGluayk7XG4gICAgICB0YXJnZXQudGFyZ2V0TGlua3MucHVzaChsaW5rKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIENvbXB1dGUgdGhlIHZhbHVlIChzaXplKSBvZiBlYWNoIG5vZGUgYnkgc3VtbWluZyB0aGUgYXNzb2NpYXRlZCBsaW5rcy5cbiAgZnVuY3Rpb24gY29tcHV0ZU5vZGVWYWx1ZXMoKSB7XG4gICAgbm9kZXMuZm9yRWFjaChmdW5jdGlvbihub2RlKSB7XG4gICAgICBub2RlLnZhbHVlID0gTWF0aC5tYXgoXG4gICAgICAgIGQzLnN1bShub2RlLnNvdXJjZUxpbmtzLCB2YWx1ZSksXG4gICAgICAgIGQzLnN1bShub2RlLnRhcmdldExpbmtzLCB2YWx1ZSlcbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICAvLyBJdGVyYXRpdmVseSBhc3NpZ24gdGhlIGJyZWFkdGggKHgtcG9zaXRpb24pIGZvciBlYWNoIG5vZGUuXG4gIC8vIE5vZGVzIGFyZSBhc3NpZ25lZCB0aGUgbWF4aW11bSBicmVhZHRoIG9mIGluY29taW5nIG5laWdoYm9ycyBwbHVzIG9uZTtcbiAgLy8gbm9kZXMgd2l0aCBubyBpbmNvbWluZyBsaW5rcyBhcmUgYXNzaWduZWQgYnJlYWR0aCB6ZXJvLCB3aGlsZVxuICAvLyBub2RlcyB3aXRoIG5vIG91dGdvaW5nIGxpbmtzIGFyZSBhc3NpZ25lZCB0aGUgbWF4aW11bSBicmVhZHRoLlxuICBmdW5jdGlvbiBjb21wdXRlTm9kZUJyZWFkdGhzKCkge1xuICAgIHZhciByZW1haW5pbmdOb2RlcyA9IG5vZGVzLFxuICAgICAgbmV4dE5vZGVzLFxuICAgICAgeCA9IDA7XG5cbiAgICB3aGlsZSAocmVtYWluaW5nTm9kZXMubGVuZ3RoKSB7XG4gICAgICBuZXh0Tm9kZXMgPSBbXTtcbiAgICAgIHJlbWFpbmluZ05vZGVzLmZvckVhY2goZnVuY3Rpb24obm9kZSkge1xuICAgICAgICBub2RlLnggPSB4O1xuICAgICAgICBub2RlLmR4ID0gbm9kZVdpZHRoO1xuICAgICAgICBub2RlLnNvdXJjZUxpbmtzLmZvckVhY2goZnVuY3Rpb24obGluaykge1xuICAgICAgICAgIGlmIChuZXh0Tm9kZXMuaW5kZXhPZihsaW5rLnRhcmdldCkgPCAwKSB7XG4gICAgICAgICAgICBuZXh0Tm9kZXMucHVzaChsaW5rLnRhcmdldCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgcmVtYWluaW5nTm9kZXMgPSBuZXh0Tm9kZXM7XG4gICAgICArK3g7XG4gICAgfVxuXG4gICAgLy9cbiAgICBtb3ZlU2lua3NSaWdodCh4KTtcbiAgICBzY2FsZU5vZGVCcmVhZHRocygoc2l6ZVswXSAtIG5vZGVXaWR0aCkgLyAoeCAtIDEpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1vdmVTb3VyY2VzUmlnaHQoKSB7XG4gICAgbm9kZXMuZm9yRWFjaChmdW5jdGlvbihub2RlKSB7XG4gICAgICBpZiAoIW5vZGUudGFyZ2V0TGlua3MubGVuZ3RoKSB7XG4gICAgICAgIG5vZGUueCA9IGQzLm1pbihub2RlLnNvdXJjZUxpbmtzLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnRhcmdldC54OyB9KSAtIDE7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBtb3ZlU2lua3NSaWdodCh4KSB7XG4gICAgbm9kZXMuZm9yRWFjaChmdW5jdGlvbihub2RlKSB7XG4gICAgICBpZiAoIW5vZGUuc291cmNlTGlua3MubGVuZ3RoKSB7XG4gICAgICAgIG5vZGUueCA9IHggLSAxO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gc2NhbGVOb2RlQnJlYWR0aHMoa3gpIHtcbiAgICBub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIG5vZGUueCAqPSBreDtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbXB1dGVOb2RlRGVwdGhzKGl0ZXJhdGlvbnMpIHtcbiAgICB2YXIgbm9kZXNCeUJyZWFkdGggPSBkMy5uZXN0KClcbiAgICAgIC5rZXkoZnVuY3Rpb24oZCkgeyByZXR1cm4gZC54OyB9KVxuICAgICAgLnNvcnRLZXlzKGQzLmFzY2VuZGluZylcbiAgICAgIC5lbnRyaWVzKG5vZGVzKVxuICAgICAgLm1hcChmdW5jdGlvbihkKSB7IHJldHVybiBkLnZhbHVlczsgfSk7XG5cbiAgICAvL1xuICAgIGluaXRpYWxpemVOb2RlRGVwdGgoKTtcbiAgICByZXNvbHZlQ29sbGlzaW9ucygpO1xuICAgIGZvciAodmFyIGFscGhhID0gMTsgaXRlcmF0aW9ucyA+IDA7IC0taXRlcmF0aW9ucykge1xuICAgICAgcmVsYXhSaWdodFRvTGVmdChhbHBoYSAqPSAuOTkpO1xuICAgICAgcmVzb2x2ZUNvbGxpc2lvbnMoKTtcbiAgICAgIHJlbGF4TGVmdFRvUmlnaHQoYWxwaGEpO1xuICAgICAgcmVzb2x2ZUNvbGxpc2lvbnMoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbml0aWFsaXplTm9kZURlcHRoKCkge1xuICAgICAgdmFyIGt5ID0gZDMubWluKG5vZGVzQnlCcmVhZHRoLCBmdW5jdGlvbihub2Rlcykge1xuICAgICAgICByZXR1cm4gKHNpemVbMV0gLSAobm9kZXMubGVuZ3RoIC0gMSkgKiBub2RlUGFkZGluZykgLyBkMy5zdW0obm9kZXMsIHZhbHVlKTtcbiAgICAgIH0pO1xuXG4gICAgICBub2Rlc0J5QnJlYWR0aC5mb3JFYWNoKGZ1bmN0aW9uKG5vZGVzKSB7XG4gICAgICAgIG5vZGVzLmZvckVhY2goZnVuY3Rpb24obm9kZSwgaSkge1xuICAgICAgICAgIG5vZGUueSA9IGk7XG4gICAgICAgICAgbm9kZS5keSA9IG5vZGUudmFsdWUgKiBreTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgbGlua3MuZm9yRWFjaChmdW5jdGlvbihsaW5rKSB7XG4gICAgICAgIGxpbmsuZHkgPSBsaW5rLnZhbHVlICoga3k7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWxheExlZnRUb1JpZ2h0KGFscGhhKSB7XG4gICAgICBub2Rlc0J5QnJlYWR0aC5mb3JFYWNoKGZ1bmN0aW9uKG5vZGVzLCBicmVhZHRoKSB7XG4gICAgICAgIG5vZGVzLmZvckVhY2goZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgIGlmIChub2RlLnRhcmdldExpbmtzLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIHkgPSBkMy5zdW0obm9kZS50YXJnZXRMaW5rcywgd2VpZ2h0ZWRTb3VyY2UpIC8gZDMuc3VtKG5vZGUudGFyZ2V0TGlua3MsIHZhbHVlKTtcbiAgICAgICAgICAgIG5vZGUueSArPSAoeSAtIGNlbnRlcihub2RlKSkgKiBhbHBoYTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIGZ1bmN0aW9uIHdlaWdodGVkU291cmNlKGxpbmspIHtcbiAgICAgICAgcmV0dXJuIGNlbnRlcihsaW5rLnNvdXJjZSkgKiBsaW5rLnZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbGF4UmlnaHRUb0xlZnQoYWxwaGEpIHtcbiAgICAgIG5vZGVzQnlCcmVhZHRoLnNsaWNlKCkucmV2ZXJzZSgpLmZvckVhY2goZnVuY3Rpb24obm9kZXMpIHtcbiAgICAgICAgbm9kZXMuZm9yRWFjaChmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgaWYgKG5vZGUuc291cmNlTGlua3MubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgeSA9IGQzLnN1bShub2RlLnNvdXJjZUxpbmtzLCB3ZWlnaHRlZFRhcmdldCkgLyBkMy5zdW0obm9kZS5zb3VyY2VMaW5rcywgdmFsdWUpO1xuICAgICAgICAgICAgbm9kZS55ICs9ICh5IC0gY2VudGVyKG5vZGUpKSAqIGFscGhhO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgZnVuY3Rpb24gd2VpZ2h0ZWRUYXJnZXQobGluaykge1xuICAgICAgICByZXR1cm4gY2VudGVyKGxpbmsudGFyZ2V0KSAqIGxpbmsudmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzb2x2ZUNvbGxpc2lvbnMoKSB7XG4gICAgICBub2Rlc0J5QnJlYWR0aC5mb3JFYWNoKGZ1bmN0aW9uKG5vZGVzKSB7XG4gICAgICAgIHZhciBub2RlLFxuICAgICAgICAgIGR5LFxuICAgICAgICAgIHkwID0gMCxcbiAgICAgICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgICAgIGk7XG5cbiAgICAgICAgLy8gUHVzaCBhbnkgb3ZlcmxhcHBpbmcgbm9kZXMgZG93bi5cbiAgICAgICAgbm9kZXMuc29ydChhc2NlbmRpbmdEZXB0aCk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgICBub2RlID0gbm9kZXNbaV07XG4gICAgICAgICAgZHkgPSB5MCAtIG5vZGUueTtcbiAgICAgICAgICBpZiAoZHkgPiAwKSBub2RlLnkgKz0gZHk7XG4gICAgICAgICAgeTAgPSBub2RlLnkgKyBub2RlLmR5ICsgbm9kZVBhZGRpbmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiB0aGUgYm90dG9tbW9zdCBub2RlIGdvZXMgb3V0c2lkZSB0aGUgYm91bmRzLCBwdXNoIGl0IGJhY2sgdXAuXG4gICAgICAgIGR5ID0geTAgLSBub2RlUGFkZGluZyAtIHNpemVbMV07XG4gICAgICAgIGlmIChkeSA+IDApIHtcbiAgICAgICAgICB5MCA9IG5vZGUueSAtPSBkeTtcblxuICAgICAgICAgIC8vIFB1c2ggYW55IG92ZXJsYXBwaW5nIG5vZGVzIGJhY2sgdXAuXG4gICAgICAgICAgZm9yIChpID0gbiAtIDI7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgICAgICBub2RlID0gbm9kZXNbaV07XG4gICAgICAgICAgICBkeSA9IG5vZGUueSArIG5vZGUuZHkgKyBub2RlUGFkZGluZyAtIHkwO1xuICAgICAgICAgICAgaWYgKGR5ID4gMCkgbm9kZS55IC09IGR5O1xuICAgICAgICAgICAgeTAgPSBub2RlLnk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhc2NlbmRpbmdEZXB0aChhLCBiKSB7XG4gICAgICByZXR1cm4gYS55IC0gYi55O1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbXB1dGVMaW5rRGVwdGhzKCkge1xuICAgIG5vZGVzLmZvckVhY2goZnVuY3Rpb24obm9kZSkge1xuICAgICAgbm9kZS5zb3VyY2VMaW5rcy5zb3J0KGFzY2VuZGluZ1RhcmdldERlcHRoKTtcbiAgICAgIG5vZGUudGFyZ2V0TGlua3Muc29ydChhc2NlbmRpbmdTb3VyY2VEZXB0aCk7XG4gICAgfSk7XG4gICAgbm9kZXMuZm9yRWFjaChmdW5jdGlvbihub2RlKSB7XG4gICAgICB2YXIgc3kgPSAwLCB0eSA9IDA7XG4gICAgICBub2RlLnNvdXJjZUxpbmtzLmZvckVhY2goZnVuY3Rpb24obGluaykge1xuICAgICAgICBsaW5rLnN5ID0gc3k7XG4gICAgICAgIHN5ICs9IGxpbmsuZHk7XG4gICAgICB9KTtcbiAgICAgIG5vZGUudGFyZ2V0TGlua3MuZm9yRWFjaChmdW5jdGlvbihsaW5rKSB7XG4gICAgICAgIGxpbmsudHkgPSB0eTtcbiAgICAgICAgdHkgKz0gbGluay5keTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gYXNjZW5kaW5nU291cmNlRGVwdGgoYSwgYikge1xuICAgICAgcmV0dXJuIGEuc291cmNlLnkgLSBiLnNvdXJjZS55O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFzY2VuZGluZ1RhcmdldERlcHRoKGEsIGIpIHtcbiAgICAgIHJldHVybiBhLnRhcmdldC55IC0gYi50YXJnZXQueTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjZW50ZXIobm9kZSkge1xuICAgIHJldHVybiBub2RlLnkgKyBub2RlLmR5IC8gMjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHZhbHVlKGxpbmspIHtcbiAgICByZXR1cm4gbGluay52YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBzYW5rZXk7XG59OyIsInZhciBhZHMgPSByZXF1aXJlKCcuL2FkcycpO1xuXG52YXIgYWRNYW5hZ2VyID0gZnVuY3Rpb24oJGludGVydmFsLCBub3RpZmljYXRpb25TZXJ2aWNlLCBHYW1lU3RhdGUpIHtcbiAgJGludGVydmFsKGZ1bmN0aW9uKCkge1xuXG4gICAgaWYoIUdhbWVTdGF0ZS51cGdyYWRlLmhhcygnQWR2ZXJ0aXNlbWVudHMnKSkgeyByZXR1cm47IH1cbiAgICBpZighR2FtZVN0YXRlLmFkU2V0LmdldCgpKSB7IHJldHVybjsgfVxuXG4gICAgdmFyIGFkID0gXy5zYW1wbGUoYWRzKTtcblxuICAgIG5vdGlmaWNhdGlvblNlcnZpY2Uubm90aWZ5V2l0aERlZmF1bHRzKHtcbiAgICAgIHRpdGxlOiBgJHthZC5uYW1lfSA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiJHthZC51cmx9XCI+PHNwYW4gY2xhc3M9J2ZhIGZhLWV4dGVybmFsLWxpbmsnPjwvc3Bhbj48L2E+YCxcbiAgICAgIHRleHQ6IGFkLnRleHRcbiAgICB9KTtcbiAgfSwgMTgwMDAwKTsgLy82IG1pbnV0ZXNcblxuICByZXR1cm4ge307XG59O1xuXG5hZE1hbmFnZXIuJGluamVjdCA9IFsnJGludGVydmFsJywgJ25vdGlmaWNhdGlvblNlcnZpY2UnLCAnR2FtZVN0YXRlJ107XG5cbm1vZHVsZS5leHBvcnRzID0gYWRNYW5hZ2VyO1xuIiwiXG5tb2R1bGUuZXhwb3J0cyA9IFtcbiAge1xuICAgIG5hbWU6ICdJZGxlTGFuZHMnLFxuICAgIHVybDogJ2h0dHA6Ly93ZWJmZS5pZGxlLmxhbmQnLFxuICAgIHRleHQ6ICdGcm9tIHRoZSBjcmVhdG9yIG9mIHRoaXMgZ2FtZSwgY2hlY2sgb3V0IElkbGVMYW5kcywgaGlzIHByaW9yIHByb2plY3QhJ1xuICB9LFxuICB7XG4gICAgbmFtZTogJ0NvbnNwaXJhY3kgQ2xpY2tlcicsXG4gICAgdXJsOiAnaHR0cDovL2RlYXRocmF5Z2FtZXMuY29tL3BsYXktb25saW5lL21pbmlMRDQ4LycsXG4gICAgdGV4dDogJ01hZGUgZHVyaW5nIGEgNDggaG91ciBwZXJpb2QsIHRoaXMgZ2FtZSBjYXB0dXJlcyB0aGUgYXR0ZW50aW9uIG9mIHRoYXQgbGl0dGxlIGNvbnNwaXJhY2lzdCBpbnNpZGUgb2YgdXMgYWxsLiBGaW5kIG91dCBob3cgdGhlIHJlYWwgd29ybGQgb3BlcmF0ZXMuJ1xuICB9LFxuICB7XG4gICAgbmFtZTogJ0NhbmR5IEVtcGlyaWNhbCcsXG4gICAgdXJsOiAnaHR0cDovL2NhbmR5LWVtcGVyaWNhbC5hcHBzcG90LmNvbS8nLFxuICAgIHRleHQ6ICdBIG5ldyBpbmNyZW1lbnRhbCBnYW1lIHdpdGggY2FuZHkgdGhhdCBtYWtlcyBjYW5keS4gU3RhcnQgb3V0IHdpdGggdGFmZnksIHRoZW4gcHJvZ3Jlc3MgdGhyb3VnaCBhbGwgdGhlIGNhbmR5IHR5cGVzLidcbiAgfSxcbiAge1xuICAgIG5hbWU6ICdMZWdlbmQgb2YgdGhlIEZhbGxlbiBXYXJyaW9yJyxcbiAgICB1cmw6ICdodHRwczovL3Rhcm5vczEyLmdpdGh1Yi5pby9wcm9qZWN0LycsXG4gICAgdGV4dDogJ1N1cnJvdW5kZWQgYnkgdW5mYW1pbGlhciBmYWNlcywgdGhlIGZhbGxlbiB3YXJyaW9yIG11c3QgdHJ5IGhpcyBiZXN0IHRvIHN1cnZpdmUuIFdpbGwgaGlzIHNraWxscyBiZSBlbm91Z2ggdG8gaGVscCBoaW0gdGhyb3VnaCBvciB3aWxsIGhlIGhhdmUgdG8gZ3JvdyBhbmQgbGVhcm4gbmV3IHRhbGVudHMgaW4gb3JkZXIgdG8gZXNjYXBlPydcbiAgfSxcbiAge1xuICAgIG5hbWU6ICdDcml0dGVyIE1vdW5kJyxcbiAgICB1cmw6ICdodHRwOi8veW95ei5jb20vY3JpdHRlci8nLFxuICAgIHRleHQ6ICdCcmVlZCBuZXcgY3JpdHRlcnMuIEJyZWVkIHN0cm9uZ2VyIGNyaXR0ZXJzLiBEZXN0cm95IHlvdXIgZW5lbWllcy4nXG4gIH0sXG4gIHtcbiAgICBuYW1lOiAnUHJvZ3Jlc3MgUXVlc3QnLFxuICAgIHVybDogJ2h0dHA6Ly9wcm9ncmVzc3F1ZXN0LmNvbS9wbGF5LycsXG4gICAgdGV4dDogJ1Byb2dyZXNzIFF1ZXN0IGlzIGFuIGFudGljIGFuZCBmYW50YXN0aWNhbCBjb21wdXRlciByb2xlLXBsYXlpbmcgZ2FtZS4gSXRcXCdzIHdlbGwgd29ydGggdGhlIHRpbWUgeW91XFwnbGwgc3BlbmQgcGxheWluZyBpdC4nXG4gIH0sXG4gIHtcbiAgICBuYW1lOiAnQ2xpY2twb2NhbHlwc2UgMicsXG4gICAgdXJsOiAnaHR0cDovL21pbm1heGlhLmNvbS9jMi8nLFxuICAgIHRleHQ6ICdBIGZpZ2h0ZXIsIHJhbmdlciwgd2l6YXJkIGFuZCBhIHByaWVzdCBzZXQgb3V0IHRvIHB1cmdlIHRoZSBsYW5kIG9mIGV2aWwuLi4gb25lIGR1bmdlb24gYXQgYSB0aW1lLidcbiAgfVxuXTtcbiIsInZhciBhbmltYXRlZEZseVRpcCA9IGZ1bmN0aW9uKCRmaWx0ZXIpIHtcbiAgcmV0dXJuIHtcbiAgICBmbHk6IGZ1bmN0aW9uKG51bSwgdXNlU2VwYXJhdG9yID0gZmFsc2UpIHtcbiAgICAgIHZhciAkZWxlbWVudCA9ICQoJzxkaXYgLz4nKTtcblxuICAgICAgdmFyIG51bVN0cmluZyA9IG51bTtcbiAgICAgIGlmKHVzZVNlcGFyYXRvcikge1xuICAgICAgICBudW1TdHJpbmcgPSAkZmlsdGVyKCdudW1iZXInKShudW1TdHJpbmcsIDApO1xuICAgICAgfVxuXG4gICAgICBpZihudW0gPCAwKSB7XG4gICAgICAgICRlbGVtZW50LmFkZENsYXNzKCd0ZXh0LWRhbmdlcicpO1xuICAgICAgICAkZWxlbWVudC5odG1sKG51bVN0cmluZyk7XG4gICAgICB9IGVsc2UgaWYobnVtID4gMCkge1xuICAgICAgICAkZWxlbWVudC5hZGRDbGFzcygndGV4dC1zdWNjZXNzJyk7XG4gICAgICAgICRlbGVtZW50Lmh0bWwoYCske251bVN0cmluZ31gKTtcbiAgICAgIH1cblxuICAgICAgJGVsZW1lbnQuY3NzKCdwb3NpdGlvbicsICdhYnNvbHV0ZScpO1xuICAgICAgJCgnYm9keScpLmFwcGVuZCgkZWxlbWVudCk7XG5cbiAgICAgIHZhciAkYmFzZSA9ICQoJyNuYXZiYXItdW5pdCcpO1xuICAgICAgaWYoISRiYXNlLmxlbmd0aCkgeyByZXR1cm47IH1cblxuICAgICAgJGVsZW1lbnQub2Zmc2V0KHtsZWZ0OiAkYmFzZS5vZmZzZXQoKS5sZWZ0LCB0b3A6ICRiYXNlLm9mZnNldCgpLnRvcH0pO1xuXG4gICAgICAkZWxlbWVudC5hbmltYXRlKHt0b3A6ICc2MHB4J30pO1xuICAgICAgJGVsZW1lbnQuYW5pbWF0ZSh7b3BhY2l0eTogMCwgdG9wOiAnNjBweCd9LCA1MDAsICdzd2luZycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAkKHRoaXMpLnJlbW92ZSgpO1xuICAgICAgfSk7XG5cbiAgICB9XG4gIH07XG59O1xuXG5hbmltYXRlZEZseVRpcC4kaW5qZWN0ID0gWyckZmlsdGVyJ107XG5cbm1vZHVsZS5leHBvcnRzID0gYW5pbWF0ZWRGbHlUaXA7IiwiXG52YXIgY2hhcnRDb25maWdzID0gZnVuY3Rpb24oJHEsIEdhbWVTdGF0ZSkge1xuICB2YXIgZGVmZXIgPSAkcS5kZWZlcigpO1xuXG4gIEhpZ2hjaGFydHMuc2V0T3B0aW9ucyh7XG4gICAgZ2xvYmFsOiB7XG4gICAgICB1c2VVVEM6IGZhbHNlXG4gICAgfSxcbiAgICBsYW5nOiB7XG4gICAgICB0aG91c2FuZHNTZXA6ICcsJ1xuICAgIH1cbiAgfSk7XG5cbiAgdmFyIHByb2R1Y3Rpb25WYWx1ZXMgPSAoKSA9PiBfLnBhaXJzKEdhbWVTdGF0ZS5zb3VyY2VzR2V0LmdldCgpKTtcblxuICB2YXIgcHJvZHVjdGlvbiA9IHtcbiAgICBkZWZhdWx0T2JqOiB7XG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgdHlwZTogJ3BpZSdcbiAgICAgICAgfSxcbiAgICAgICAgY3JlZGl0czoge1xuICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIHBsb3RPcHRpb25zOiB7XG4gICAgICAgICAgcGllOiB7XG4gICAgICAgICAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2hvd0luTGVnZW5kOiBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHRpdGxlOiB7XG4gICAgICAgIHRleHQ6ICcnXG4gICAgICB9LFxuICAgICAgc2VyaWVzOiBbe1xuICAgICAgICBuYW1lOiAnRGF0YScsXG4gICAgICAgIGRhdGE6IHByb2R1Y3Rpb25WYWx1ZXMoKVxuICAgICAgfV1cbiAgICB9LFxuXG4gICAgY2hhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZGVmYXVsdE9iajtcbiAgICB9XG4gIH07XG5cbiAgdmFyIG92ZXJUaW1lVmFsdWVzID0gKCkgPT4gR2FtZVN0YXRlLmhpc3RvcnlHZXQuZ2V0KCk7XG5cbiAgdmFyIG92ZXJUaW1lID0ge1xuICAgIGRlZmF1bHRPYmo6IHtcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICB0eXBlOiAnbGluZSdcbiAgICAgICAgfSxcbiAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHlBeGlzOiB7XG4gICAgICAgIHRpdGxlOiB7XG4gICAgICAgICAgdGV4dDogJydcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHhBeGlzOiB7XG4gICAgICAgIHR5cGU6ICdkYXRldGltZScsXG4gICAgICAgIHRpY2tQaXhlbEludGVydmFsOiAxNTAsXG4gICAgICAgIHRpdGxlOiB7XG4gICAgICAgICAgdGV4dDogJydcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHRpdGxlOiB7XG4gICAgICAgIHRleHQ6ICcnXG4gICAgICB9LFxuICAgICAgc2VyaWVzOiBbe1xuICAgICAgICBuYW1lOiAnRGF0YScsXG4gICAgICAgIGRhdGE6IG92ZXJUaW1lVmFsdWVzKClcbiAgICAgIH1dXG4gICAgfSxcbiAgICBjaGFydDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5kZWZhdWx0T2JqO1xuICAgIH1cbiAgfTtcblxuICB2YXIgY2hlY2tEZWZhdWx0cyA9ICgpID0+IHtcbiAgICBpZihHYW1lU3RhdGUudXBncmFkZS5oYXMoJ1Byb2R1Y3Rpb24gTGFiZWxzJykpIHtcbiAgICAgIG92ZXJUaW1lLmRlZmF1bHRPYmoueUF4aXMudGl0bGUudGV4dCA9ICdQcm9kdWN0aW9uJztcbiAgICAgIG92ZXJUaW1lLmRlZmF1bHRPYmoueEF4aXMudGl0bGUudGV4dCA9ICdUaW1lc3RhbXAnO1xuICAgIH1cblxuICAgIGlmKEdhbWVTdGF0ZS51cGdyYWRlLmhhcygnQnJlYWtkb3duIExhYmVscycpKSB7XG4gICAgICBwcm9kdWN0aW9uLmRlZmF1bHRPYmoub3B0aW9ucy5wbG90T3B0aW9ucy5waWUuZGF0YUxhYmVscy5lbmFibGVkID0gdHJ1ZTtcbiAgICAgIHByb2R1Y3Rpb24uZGVmYXVsdE9iai5vcHRpb25zLnBsb3RPcHRpb25zLnBpZS5zaG93SW5MZWdlbmQgPSB0cnVlO1xuICAgIH1cbiAgfTtcblxuICBjaGVja0RlZmF1bHRzKCk7XG5cbiAgR2FtZVN0YXRlLnVwZ3JhZGUud2F0Y2goKS50aGVuKG51bGwsIG51bGwsIGNoZWNrRGVmYXVsdHMpO1xuXG4gIEdhbWVTdGF0ZS51bml0LndhdGNoKCkudGhlbihudWxsLCBudWxsLCBmdW5jdGlvbigpIHtcbiAgICBkZWZlci5ub3RpZnkoe292ZXJUaW1lOiBvdmVyVGltZVZhbHVlcygpLCBwcm9kdWN0aW9uOiBwcm9kdWN0aW9uVmFsdWVzKCl9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHtvdmVyVGltZTogb3ZlclRpbWUuY2hhcnQoKSwgcHJvZHVjdGlvbjogcHJvZHVjdGlvbi5jaGFydCgpfTtcbiAgICB9LFxuICAgIHdhdGNoOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkZWZlci5wcm9taXNlO1xuICAgIH1cbiAgfTtcbn07XG5cbmNoYXJ0Q29uZmlncy4kaW5qZWN0ID0gWyckcScsICdHYW1lU3RhdGUnXTtcblxubW9kdWxlLmV4cG9ydHMgPSBjaGFydENvbmZpZ3M7XG4iLCJcbnZhciBmYXZpY28gPSBmdW5jdGlvbigpIHtcbiAgdmFyIGZhdmljbyA9IG5ldyBGYXZpY28oe1xuICAgIGFuaW1hdGlvbiA6ICdmYWRlJ1xuICB9KTtcblxuICB2YXIgY3VycmVudE51bSA9IDA7XG5cbiAgdmFyIGJhZGdlID0gZnVuY3Rpb24obnVtKSB7XG4gICAgaWYobnVtID09PSBjdXJyZW50TnVtKSB7IHJldHVybjsgfVxuICAgIGN1cnJlbnROdW0gPSBudW07XG4gICAgZmF2aWNvLmJhZGdlKG51bSk7XG4gIH07XG4gIHZhciByZXNldCA9IGZ1bmN0aW9uKCkge1xuICAgIGZhdmljby5yZXNldCgpO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgYmFkZ2UgOiBiYWRnZSxcbiAgICByZXNldCA6IHJlc2V0XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZhdmljbzsiLCJ2YXIgZnVuY3Rpb25CdWlsZGVyID0gZnVuY3Rpb24oR2FtZVN0YXRlLCBHYWluQ2FsY3VsYXRvciwgJHdpbmRvdykge1xuICByZXR1cm4ge1xuICAgIGJ1aWxkOiBmdW5jdGlvbigpIHtcblxuICAgICAgdmFyIHVwZ3JhZGUgPSBHYW1lU3RhdGUudXBncmFkZTtcblxuICAgICAgdmFyIHVuaXRUZXh0ID0gYCR7R2FtZVN0YXRlLmN1cnJlbmN5U2V0LmdldCgpfXNgO1xuXG4gICAgICB2YXIgZnVuY3Rpb25IZWFkZXIgPSBbJycsJyddO1xuICAgICAgaWYoR2FtZVN0YXRlLnVwZ3JhZGUuaGFzKCdGdW5jdGlvbicpKSB7XG4gICAgICAgIGZ1bmN0aW9uSGVhZGVyID0gW2BmdW5jdGlvbiBpbmNyZWFzZVVuaXRzKCkge2AsIGB9YF07XG4gICAgICB9XG5cbiAgICAgIHZhciBpdGVyYXRpb25IZWFkZXIgPSBbJycsJyddO1xuICAgICAgaWYoR2FtZVN0YXRlLnVwZ3JhZGUuaGFzKCdCYXNpYyBJdGVyYXRpb24nKSkge1xuICAgICAgICBpdGVyYXRpb25IZWFkZXIgPSBbYGZvcih2YXIgaSA9IDA7IGkgPCAke0dhaW5DYWxjdWxhdG9yLml0ZXJhdGlvbih1cGdyYWRlKX07IGkrKykge2AsIGB9YF07XG4gICAgICB9XG5cbiAgICAgIHZhciB0aW1lb3V0ID0gYGA7XG4gICAgICBpZihHYW1lU3RhdGUudXBncmFkZS5oYXMoJ0Jhc2ljIFRpbWVyJykpIHtcbiAgICAgICAgdmFyIHRpbWVvdXRUZXh0ID0gJ2luY3JlYXNlVW5pdHMnO1xuXG4gICAgICAgIGlmKEdhbWVTdGF0ZS51cGdyYWRlLmhhcygnQmFzaWMgVGltZXIgQm9vc3QnKSkge1xuICAgICAgICAgIHRpbWVvdXRUZXh0ID1cbmBmdW5jdGlvbiBtYXNzaXZlR2FpbnMoKSB7XG4gIGZvcih2YXIgaSA9IDA7IGkgPCAke0dhaW5DYWxjdWxhdG9yLnRpbWVyQm9vc3QodXBncmFkZSl9OyBpKyspIHtcbiAgICAke3RpbWVvdXRUZXh0fSgpO1xuICB9XG59YDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRpbWVvdXQgPSBgJGludGVydmFsKCR7dGltZW91dFRleHR9LCAke0dhaW5DYWxjdWxhdG9yLnRpbWVyKHVwZ3JhZGUpfSk7XFxuYDtcbiAgICAgIH1cblxuICAgICAgdmFyIGFuaW1hdGlvbkhlYWRlciA9IFsnJywnJ107XG4gICAgICBpZihHYW1lU3RhdGUudXBncmFkZS5oYXMoJ0Jhc2ljIEFuaW1hdGlvbicpKSB7XG4gICAgICAgIGFuaW1hdGlvbkhlYWRlciA9IFtcbiAgYHZhciB0b3RhbFVuaXRzR2FpbmVkID0gMDtgLFxuICBgdW5pdHMgKz0gdG90YWxVbml0c0dhaW5lZDtcbiAgYW5pbWF0ZVVuaXRDaGFuZ2UodG90YWxVbml0c0dhaW5lZCk7YF07XG4gICAgICAgIHVuaXRUZXh0ID0gJ3RvdGFsVW5pdHNHYWluZWQnO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2F2ZUhlYWRlciA9IFsnJywgJyddO1xuICAgICAgaWYoR2FtZVN0YXRlLnVwZ3JhZGUuaGFzKCdTYXZlJywgMSkpIHtcbiAgICAgICAgc2F2ZUhlYWRlciA9IFtcbiAgYFxcbnZhciBjdXJyZW50VGljayA9IDA7YCwgYFxuICBpZigrK2N1cnJlbnRUaWNrICUgMTAgPT09IDApIHtcbiAgICBjdXJyZW50VGljayA9IDA7XG4gICAgc2F2ZSgpO1xuICB9YF07XG4gICAgICB9XG5cbiAgICAgIGlmKEdhbWVTdGF0ZS51cGdyYWRlLmhhcygnU2F2ZScsIDMpKSB7XG4gICAgICAgIHNhdmVIZWFkZXIgPSBbJycsIGBcbiAgc2F2ZSgpO2BdO1xuICAgICAgfVxuXG4gICAgICAvLyBkdW1wIGl0IG9uIHRoZSBwYWdlLiBpdCdzIGFuIFwiZXhwbG9pdFwiXG4gICAgICAkd2luZG93LmluY3JlYXNlVW5pdHMgPSBmdW5jdGlvbihtdWx0ID0gMSwgc291cmNlID0gJ0NoZWF0aW5nJykgeyBHYW1lU3RhdGUudW5pdC5pbmMobXVsdCAqIEdhaW5DYWxjdWxhdG9yLmFsbCh1cGdyYWRlKSwgdHJ1ZSwgc291cmNlKTsgfTtcblxuICAgICAgcmV0dXJuIGAke3RpbWVvdXR9JHtzYXZlSGVhZGVyWzBdfVxuJHtmdW5jdGlvbkhlYWRlclswXX1cbiAgJHthbmltYXRpb25IZWFkZXJbMF19XG4gICR7aXRlcmF0aW9uSGVhZGVyWzBdfVxuICAgICR7dW5pdFRleHR9ICs9ICR7R2FpbkNhbGN1bGF0b3IuYm9vc3QodXBncmFkZSl9O1xuICAke2l0ZXJhdGlvbkhlYWRlclsxXX1cbiAgJHtzYXZlSGVhZGVyWzFdfVxuICAke2FuaW1hdGlvbkhlYWRlclsxXX1cbiR7ZnVuY3Rpb25IZWFkZXJbMV19XG5gO1xuICAgIH1cbiAgfTtcbn07XG5cbmZ1bmN0aW9uQnVpbGRlci4kaW5qZWN0ID0gWydHYW1lU3RhdGUnLCAnR2FpbkNhbGN1bGF0b3InLCAnJHdpbmRvdyddO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uQnVpbGRlcjsiLCJ2YXIgZ2FpbkNhbGN1bGF0b3IgPSBmdW5jdGlvbigpIHtcblxuICB2YXIgYm9vc3QgPSBmdW5jdGlvbih1cGdyYWRlKSB7XG4gICAgcmV0dXJuIE1hdGgucG93KCh1cGdyYWRlLmdldEtleSgnQmFzaWMgQm9vc3QnKSB8fCAwKSsxLCAyKTtcbiAgfTtcblxuICB2YXIgaXRlcmF0aW9uID0gZnVuY3Rpb24odXBncmFkZSkge1xuICAgIHZhciBpdGVyTGV2ZWwgPSB1cGdyYWRlLmdldEtleSgnQmFzaWMgSXRlcmF0aW9uJyk7XG4gICAgaWYoIWl0ZXJMZXZlbCkgeyByZXR1cm4gMTsgfVxuICAgIHJldHVybiBNYXRoLnBvdygyLCBpdGVyTGV2ZWwrMSk7XG4gIH07XG5cbiAgdmFyIHRpbWVyQm9vc3QgPSBmdW5jdGlvbih1cGdyYWRlKSB7XG4gICAgcmV0dXJuIE1hdGgucG93KCh1cGdyYWRlLmdldEtleSgnQmFzaWMgVGltZXIgQm9vc3QnKSB8fCAwKSsxLCAyKTtcbiAgfTtcblxuICB2YXIgdGltZXIgPSBmdW5jdGlvbih1cGdyYWRlKSB7XG4gICAgdmFyIGJhc2ljUmVkdWN0aW9uID0gMC4wNSAqIHVwZ3JhZGUuZ2V0S2V5KCdCYXNpYyBUaW1lcicpO1xuICAgIHZhciBhZHZhbmNlZFJlZHVjdGlvbiA9IDAuMTUgKiB1cGdyYWRlLmdldEtleSgnQWR2YW5jZWQgVGltZXInKTtcbiAgICBhZHZhbmNlZFJlZHVjdGlvbiA9IF8uaXNOYU4oYWR2YW5jZWRSZWR1Y3Rpb24pID8gMCA6IGFkdmFuY2VkUmVkdWN0aW9uO1xuICAgIHJldHVybiAzMDAwMCAtIE1hdGgucm91bmQoMzAwMDAgKiAoYmFzaWNSZWR1Y3Rpb24gKyBhZHZhbmNlZFJlZHVjdGlvbikpO1xuICB9O1xuXG4gIHZhciBtYXhIaXN0b3J5ID0gZnVuY3Rpb24odXBncmFkZSkge1xuICAgIHJldHVybiAxMCArICg1ICogKHVwZ3JhZGUuZ2V0S2V5KCdQcm9kdWN0aW9uIEhpc3RvcnknKSB8fCAwKSk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBib29zdDogYm9vc3QsXG4gICAgaXRlcmF0aW9uOiBpdGVyYXRpb24sXG4gICAgdGltZXI6IHRpbWVyLFxuICAgIHRpbWVyQm9vc3Q6IHRpbWVyQm9vc3QsXG4gICAgbWF4SGlzdG9yeTogbWF4SGlzdG9yeSxcbiAgICBhbGw6IGZ1bmN0aW9uKHVwZ3JhZGUpIHsgcmV0dXJuIGJvb3N0KHVwZ3JhZGUpICogaXRlcmF0aW9uKHVwZ3JhZGUpOyB9XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdhaW5DYWxjdWxhdG9yOyIsInZhciBnYW1lQ29udHJvbGxlciA9IGZ1bmN0aW9uKCRzY29wZSwgJHdpbmRvdywgJGludGVydmFsLCAkZmlsdGVyLCAkbW9kYWwsIEdhbWVTdGF0ZSwgQ2hhcnRDb25maWdzLCBHYW1lVGltZXIsIFVwZ3JhZGVNYW5hZ2VyLCBGdW5jdGlvbkJ1aWxkZXIsIFVwZ3JhZGVQYXRoLCBOZ1RhYmxlUGFyYW1zKSB7XG4gICRzY29wZS5fdmlzaWJsZVVwZ3JhZGVzID0gW107XG4gICRzY29wZS5ncm91cFZpc2libGVIYXNoID0ge307XG4gICRzY29wZS50YWJBY3RpdmUgPSBbdHJ1ZSwgZmFsc2UsIGZhbHNlLCBmYWxzZV07XG5cbiAgJHNjb3BlLmFkcyA9IEdhbWVTdGF0ZS5hZFNldC5nZXQoKTtcbiAgJHNjb3BlLnNldEFkcyA9IGZ1bmN0aW9uKHZhbCkge1xuICAgIEdhbWVTdGF0ZS5hZFNldC5zZXQodmFsKTtcbiAgfTtcblxuICAkc2NvcGUudGFibGVQYXJhbXMgPSBuZXcgTmdUYWJsZVBhcmFtcyh7XG4gICAgcGFnZTogMSxcbiAgICBjb3VudDogMTAwMFxuICB9LCB7XG4gICAgZ3JvdXBCeTogJ2NhdGVnb3J5JyxcbiAgICB0b3RhbDogJHNjb3BlLl92aXNpYmxlVXBncmFkZXMubGVuZ3RoLFxuICAgIGdldERhdGE6IGZ1bmN0aW9uKCRkZWZlciwgcGFyYW1zKSB7XG4gICAgICB2YXIgZGF0YSA9ICRzY29wZS5fdmlzaWJsZVVwZ3JhZGVzO1xuXG4gICAgICB2YXIgb3JkZXJlZERhdGEgPSBwYXJhbXMuc29ydGluZygpID9cbiAgICAgICAgJGZpbHRlcignb3JkZXJCeScpKGRhdGEsIHBhcmFtcy5vcmRlckJ5KCkpIDpcbiAgICAgICAgZGF0YTtcblxuICAgICAgdmFyIGZpbHRlcmVkRGF0YSA9IHBhcmFtcy5maWx0ZXIoKSA/XG4gICAgICAgICRmaWx0ZXIoJ2ZpbHRlcicpKG9yZGVyZWREYXRhLCBwYXJhbXMuZmlsdGVyKCkpIDpcbiAgICAgICAgb3JkZXJlZERhdGE7XG5cbiAgICAgIHBhcmFtcy50b3RhbCgkc2NvcGUuX3Zpc2libGVVcGdyYWRlcy5sZW5ndGgpO1xuXG4gICAgICAkZGVmZXIucmVzb2x2ZShmaWx0ZXJlZERhdGEuc2xpY2UoKHBhcmFtcy5wYWdlKCkgLSAxKSAqIHBhcmFtcy5jb3VudCgpLCBwYXJhbXMucGFnZSgpICogcGFyYW1zLmNvdW50KCkpKTtcbiAgICB9XG4gIH0pO1xuXG4gICRzY29wZS5oYXNVcGdyYWRlID0gZnVuY3Rpb24oa2V5LCBsZXZlbCA9IDApIHtcbiAgICByZXR1cm4gR2FtZVN0YXRlLnVwZ3JhZGUuaGFzKGtleSwgbGV2ZWwpO1xuICB9O1xuXG4gICRzY29wZS5oYXNVbml0cyA9IGZ1bmN0aW9uKGFtdCkge1xuICAgIHJldHVybiBHYW1lU3RhdGUudW5pdC5oYXMoYW10KTtcbiAgfTtcblxuICAkc2NvcGUuYnV5VXBncmFkZSA9IGZ1bmN0aW9uKHVwZ05hbWUsIGxldmVscyA9IDEpIHtcbiAgICBkbyB7XG4gICAgICBHYW1lU3RhdGUudXBncmFkZS5pbmModXBnTmFtZSk7XG4gICAgfSB3aGlsZSgtLWxldmVscyA+IDApO1xuICB9O1xuXG4gICRzY29wZS5nYWluVW5pdHMgPSBmdW5jdGlvbigpIHtcbiAgICAkd2luZG93LmluY3JlYXNlVW5pdHMoMSwgJ0NsaWNrJyk7XG4gIH07XG5cbiAgJHNjb3BlLnNhdmUgPSBmdW5jdGlvbigpIHtcbiAgICBHYW1lU3RhdGUuc2F2ZSgpO1xuICB9O1xuXG4gICRzY29wZS5yZWZyZXNoID0gZnVuY3Rpb24oKSB7XG4gICAgJHNjb3BlLl91bml0cyA9IEdhbWVTdGF0ZS51bml0LmdldCgpO1xuXG4gICAgdmFyIG5ld1VwZ3JhZGVzID0gVXBncmFkZU1hbmFnZXIudmlzaWJsZSgpO1xuICAgIHZhciB2aXNpYmxlID0gXy5wbHVjaygkc2NvcGUuX3Zpc2libGVVcGdyYWRlcywgJ25hbWUnKTtcbiAgICB2YXIgbmV3UGx1Y2tlZCA9IF8ucGx1Y2sobmV3VXBncmFkZXMsICduYW1lJyk7XG4gICAgaWYobmV3UGx1Y2tlZC5sZW5ndGggIT09IHZpc2libGUubGVuZ3RoIHx8IF8uZGlmZmVyZW5jZShuZXdQbHVja2VkLCB2aXNpYmxlKS5sZW5ndGggPiAwKSB7XG4gICAgICAkc2NvcGUuX3Zpc2libGVVcGdyYWRlcyA9IG5ld1VwZ3JhZGVzO1xuICAgIH1cbiAgICAkc2NvcGUuX2Z1bmN0aW9uID0gRnVuY3Rpb25CdWlsZGVyLmJ1aWxkKCk7XG4gICAgJHNjb3BlLnRhYmxlUGFyYW1zLnJlbG9hZCgpO1xuICB9O1xuXG4gICRzY29wZS5vcGVuTW9kYWwgPSBmdW5jdGlvbihtb2RhbCkge1xuICAgICRtb2RhbC5vcGVuKHtcbiAgICAgIHRlbXBsYXRlVXJsOiBgbW9kYWwtJHttb2RhbH1gLFxuICAgICAgc2NvcGU6ICRzY29wZVxuICAgIH0pO1xuICB9O1xuXG4gICRzY29wZS5yZWZyZXNoKCk7XG4gICRzY29wZS5fdGltZXIgPSAwO1xuICAkc2NvcGUuX3RpbWVybWF4ID0gMDtcbiAgdmFyIHRpbWVySW50ZXJ2YWw7XG5cbiAgR2FtZVN0YXRlLnVuaXQud2F0Y2goKS50aGVuKG51bGwsIG51bGwsICRzY29wZS5yZWZyZXNoKTtcbiAgR2FtZVN0YXRlLnVwZ3JhZGUud2F0Y2goKS50aGVuKG51bGwsIG51bGwsICRzY29wZS5yZWZyZXNoKTtcblxuICBHYW1lVGltZXIud2F0Y2goKS50aGVuKG51bGwsIG51bGwsIGZ1bmN0aW9uKG5ld1RpbWVyVmFsdWUpIHtcbiAgICAkc2NvcGUuX3RpbWVyID0gJHNjb3BlLl90aW1lck1heCA9IG5ld1RpbWVyVmFsdWU7XG4gICAgaWYodGltZXJJbnRlcnZhbCkge1xuICAgICAgJGludGVydmFsLmNhbmNlbCh0aW1lckludGVydmFsKTtcbiAgICB9XG4gICAgdGltZXJJbnRlcnZhbCA9ICRpbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgICRzY29wZS5fdGltZXIgLT0gMTAwO1xuICAgIH0sIDEwMCk7XG4gIH0pO1xuXG4gICRzY29wZS5jaGFydERhdGEgPSBDaGFydENvbmZpZ3MuZ2V0KCk7XG5cbiAgQ2hhcnRDb25maWdzLndhdGNoKCkudGhlbihudWxsLCBudWxsLCBmdW5jdGlvbihjaGFydERhdGEpIHtcbiAgICBfLmVhY2goXy5rZXlzKGNoYXJ0RGF0YSksIGtleSA9PiB7XG4gICAgICAkc2NvcGUuY2hhcnREYXRhW2tleV0uc2VyaWVzWzBdLmRhdGEgPSBjaGFydERhdGFba2V5XTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgJHNjb3BlLnNhdmVPYmplY3QgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gR2FtZVN0YXRlLmJ1aWxkU2F2ZU9iamVjdCgpO1xuICB9O1xuXG4gICRzY29wZS5kZWJ1Z0luZm8gPSAkd2luZG93LmR1bXBEZWJ1Z0luZm8gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoJHNjb3BlLnNhdmVPYmplY3QoKSwgbnVsbCwgNCk7XG4gIH07XG5cbiAgJHNjb3BlLnJlc2V0R2FtZSA9IGZ1bmN0aW9uKGNhbGxiYWNrID0gZnVuY3Rpb24oKXt9KSB7XG5cbiAgICB2YXIgZmluYWxDYWxsYmFjayA9IGZ1bmN0aW9uKCkge1xuICAgICAgR2FtZVN0YXRlLmhhcmRSZXNldCgpO1xuICAgICAgJHNjb3BlLnJlZnJlc2goKTtcbiAgICAgICRzY29wZS5jdXJyZW5jeU5hbWUgPSBHYW1lU3RhdGUuY3VycmVuY3lTZXQuZ2V0KCk7XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH07XG5cbiAgICBpZigkc2NvcGUuaGFzVXBncmFkZSgnQ29uZmlybWF0aW9uIERpYWxvZ3MnKSkge1xuICAgICAgYm9vdGJveC5jb25maXJtKCdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gaGFyZCByZXNldD8gTm90aGluZyB3aWxsIGJlIHNhdmVkLicsIGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICBpZighcmVzdWx0KSB7IHJldHVybjsgfVxuICAgICAgICBmaW5hbENhbGxiYWNrKCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZmluYWxDYWxsYmFjaygpO1xuICAgIH1cbiAgfTtcblxuICAkc2NvcGUuY3VycmVuY3lOYW1lID0gR2FtZVN0YXRlLmN1cnJlbmN5U2V0LmdldCgpO1xuICAkc2NvcGUuY2hhbmdlQ3VycmVuY3kgPSBmdW5jdGlvbigpIHtcbiAgICBib290Ym94LnByb21wdCh7dGl0bGU6ICdXaGF0IHdvdWxkIHlvdSBsaWtlIHRvIGNhbGwgdGhlIGN1cnJlbmN5PycsIHZhbHVlOiAkc2NvcGUuY3VycmVuY3lOYW1lLCBjYWxsYmFjazogZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICBpZighcmVzdWx0IHx8ICFyZXN1bHQudHJpbSgpKSB7IHJldHVybjsgfVxuICAgICAgR2FtZVN0YXRlLmN1cnJlbmN5U2V0LnNldChyZXN1bHQpO1xuICAgICAgJHNjb3BlLmN1cnJlbmN5TmFtZSA9IEdhbWVTdGF0ZS5jdXJyZW5jeVNldC5nZXQoKTtcbiAgICAgICRzY29wZS4kZGlnZXN0KCk7XG4gICAgICAkc2NvcGUucmVmcmVzaCgpO1xuICAgIH19KTtcbiAgfTtcblxufTtcblxuZ2FtZUNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyR3aW5kb3cnLCAnJGludGVydmFsJywgJyRmaWx0ZXInLCAnJG1vZGFsJywgJ0dhbWVTdGF0ZScsICdDaGFydENvbmZpZ3MnLCAnR2FtZVRpbWVyJywgJ1VwZ3JhZGVNYW5hZ2VyJywgJ0Z1bmN0aW9uQnVpbGRlcicsICdVcGdyYWRlUGF0aCcsICduZ1RhYmxlUGFyYW1zJ107XG5cbm1vZHVsZS5leHBvcnRzID0gZ2FtZUNvbnRyb2xsZXI7XG4iLCJ2YXIgZ2FtZVN0YXRlID0gZnVuY3Rpb24oJHEsIG5vdGlmaWNhdGlvblNlcnZpY2UsICRmaWx0ZXIsIFVQR1JBREVTLCBHYWluQ2FsY3VsYXRvciwgbG9jYWxTdG9yYWdlLCBBbmltYXRlZEZseVRpcCkge1xuXG4gIHZhciBnZXROZXdTdGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICB1cGdyYWRlczoge30sXG4gICAgICB1bml0czogMCxcbiAgICAgIHN0YXJ0OiBEYXRlLm5vdygpLFxuICAgICAgbGFzdFNhdmU6IERhdGUubm93KCksXG4gICAgICBjdXJyZW5jeU5hbWU6ICdVbml0JyxcbiAgICAgIGFkczogdHJ1ZSxcbiAgICAgIHNvdXJjZXM6IHt9LFxuICAgICAgaGlzdG9yeTogW11cbiAgICB9O1xuICB9O1xuXG4gIHZhciBjdXJyZW50U3RhdGUgPSBnZXROZXdTdGF0ZSgpO1xuXG4gIHZhciB1cGdyYWRlRGVmZXIgPSAkcS5kZWZlcigpO1xuICB2YXIgdW5pdERlZmVyID0gJHEuZGVmZXIoKTtcblxuICB2YXIgYnVpbGRTYXZlT2JqZWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGN1cnJlbnRTdGF0ZTtcbiAgfTtcblxuICB2YXIgc2F2ZSA9IGZ1bmN0aW9uKCkge1xuICAgIGN1cnJlbnRTdGF0ZS5sYXN0U2F2ZSA9IERhdGUubm93KCk7XG4gICAgbG9jYWxTdG9yYWdlLnNldCgnZ2FtZScsIGJ1aWxkU2F2ZU9iamVjdCgpKTtcbiAgfTtcblxuICB2YXIgaGFyZFJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgY3VycmVudFN0YXRlID0gZ2V0TmV3U3RhdGUoKTtcbiAgICBzYXZlKCk7XG4gIH07XG5cbiAgdmFyIGxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RhdGUgPSBsb2NhbFN0b3JhZ2UuZ2V0KCdnYW1lJyk7XG5cbiAgICBpZighc3RhdGUpIHsgcmV0dXJuOyB9XG5cbiAgICBfLmFzc2lnbihjdXJyZW50U3RhdGUsIHN0YXRlKTtcblxuICAgIGlmKCF1cGdyYWRlLmhhcygnT2ZmbGluZSBQcm9ncmVzcycpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGRpZmYgPSBEYXRlLm5vdygpIC0gc3RhdGUubGFzdFNhdmU7XG4gICAgdmFyIG11bHRpcGxpZXIgPSAwLjI1ICsgKDAuMjUgKiB1cGdyYWRlLmdldEtleSgnT2ZmbGluZSBQcm9ncmVzcycpKTtcbiAgICB2YXIgdGltZXJzRWxhcHNlZCA9IE1hdGguZmxvb3IoZGlmZiAvIEdhaW5DYWxjdWxhdG9yLnRpbWVyKHVwZ3JhZGUpKTtcbiAgICB2YXIgZ2FpbiA9IHRpbWVyc0VsYXBzZWQgKiBtdWx0aXBsaWVyICogR2FpbkNhbGN1bGF0b3IuYWxsKHVwZ3JhZGUpICogR2FpbkNhbGN1bGF0b3IudGltZXJCb29zdCh1cGdyYWRlKTtcblxuICAgIGlmKGdhaW4gPD0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHVuaXQuaW5jKGdhaW4sIGZhbHNlLCAnT2ZmbGluZSBQcm9ncmVzcycpO1xuICAgIHNhdmUoKTtcblxuICAgIGlmKHVwZ3JhZGUuaGFzKCdOb3RpZmljYXRpb25zJykpIHtcbiAgICAgIHZhciBudW1TdHJpbmcgPSBnYWluO1xuICAgICAgaWYgKHVwZ3JhZGUuaGFzKCdOdW1iZXIgRm9ybWF0dGluZycpKSB7XG4gICAgICAgIG51bVN0cmluZyA9ICRmaWx0ZXIoJ251bWJlcicpKG51bVN0cmluZywgMCk7XG4gICAgICB9XG5cbiAgICAgIG5vdGlmaWNhdGlvblNlcnZpY2Uubm90aWZ5V2l0aERlZmF1bHRzKHtcbiAgICAgICAgdHlwZTogJ3N1Y2Nlc3MnLFxuICAgICAgICB0aXRsZTogJ09mZmxpbmUgUHJvZ3Jlc3Npb24nLFxuICAgICAgICB0ZXh0OiBgWW91IGdhaW5lZCAke251bVN0cmluZ30gJHtjdXJyZW50U3RhdGUuY3VycmVuY3lOYW1lfXMgd2hpbGUgb2ZmbGluZS4gV2VsY29tZSBiYWNrIWBcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGlzdG9yeUdldCA9IHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gY3VycmVudFN0YXRlLmhpc3Rvcnk7IH1cbiAgfTtcblxuICB2YXIgc291cmNlc0dldCA9IHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gY3VycmVudFN0YXRlLnNvdXJjZXM7IH1cbiAgfTtcblxuICB2YXIgY3VycmVuY3lTZXQgPSB7XG4gICAgc2V0OiBmdW5jdGlvbihuZXdOYW1lKSB7IGN1cnJlbnRTdGF0ZS5jdXJyZW5jeU5hbWUgPSBuZXdOYW1lOyBzYXZlKCk7IH0sXG4gICAgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIGN1cnJlbnRTdGF0ZS5jdXJyZW5jeU5hbWU7IH1cbiAgfTtcblxuICB2YXIgYWRTZXQgPSB7XG4gICAgc2V0OiBmdW5jdGlvbihpc1NldCkgeyBjdXJyZW50U3RhdGUuYWRzID0gaXNTZXQ7IH0sXG4gICAgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIGN1cnJlbnRTdGF0ZS5hZHM7IH1cbiAgfTtcblxuICB2YXIgdXBncmFkZSA9IHtcbiAgICBoYXM6IGZ1bmN0aW9uKGtleSwgbGV2ZWwgPSAwKSB7IHJldHVybiBjdXJyZW50U3RhdGUudXBncmFkZXNba2V5XSA+IGxldmVsOyB9LFxuICAgIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBjdXJyZW50U3RhdGUudXBncmFkZXM7IH0sXG4gICAgZ2V0S2V5OiBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIGN1cnJlbnRTdGF0ZS51cGdyYWRlc1trZXldOyB9LFxuICAgIGluYzogZnVuY3Rpb24oa2V5KSB7XG5cbiAgICAgIHZhciBuZXh0TGV2ZWwgPSBjdXJyZW50U3RhdGUudXBncmFkZXNba2V5XSB8fCAwO1xuXG4gICAgICB2YXIgY29zdCA9IF8uaXNGdW5jdGlvbihVUEdSQURFU1trZXldLmxldmVscykgP1xuICAgICAgICBVUEdSQURFU1trZXldLmxldmVscyhuZXh0TGV2ZWwpLmNvc3QgOlxuICAgICAgICBVUEdSQURFU1trZXldLmxldmVsc1tuZXh0TGV2ZWxdLmNvc3Q7XG4gICAgICBpZihjdXJyZW50U3RhdGUudW5pdHMgPCBjb3N0KSB7IHJldHVybjsgfVxuXG4gICAgICBpZighY3VycmVudFN0YXRlLnVwZ3JhZGVzW2tleV0pIHsgY3VycmVudFN0YXRlLnVwZ3JhZGVzW2tleV0gPSAwOyB9XG4gICAgICBjdXJyZW50U3RhdGUudXBncmFkZXNba2V5XSsrO1xuICAgICAgdW5pdC5pbmMoLWNvc3QpO1xuICAgICAgdXBncmFkZURlZmVyLm5vdGlmeSh7a2V5OiBrZXksIGxldmVsOiBjdXJyZW50U3RhdGUudXBncmFkZXNba2V5XSwgYWxsOiBjdXJyZW50U3RhdGUudXBncmFkZXN9KTtcbiAgICB9LFxuICAgIHdhdGNoOiBmdW5jdGlvbigpIHsgcmV0dXJuIHVwZ3JhZGVEZWZlci5wcm9taXNlOyB9XG4gIH07XG5cbiAgdmFyIG1hbmFnZUhpc3RvcnkgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbWF4ID0gR2FpbkNhbGN1bGF0b3IubWF4SGlzdG9yeSh1cGdyYWRlKTtcblxuICAgIGN1cnJlbnRTdGF0ZS5oaXN0b3J5LnB1c2goe3g6IERhdGUubm93KCksIHk6IGN1cnJlbnRTdGF0ZS51bml0c30pO1xuICAgIGlmKGN1cnJlbnRTdGF0ZS5oaXN0b3J5Lmxlbmd0aCA+IG1heCkge1xuICAgICAgY3VycmVudFN0YXRlLmhpc3Rvcnkuc2hpZnQoKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHRpY2sgPSAwO1xuXG4gIHZhciB1bml0ID0ge1xuICAgIGhhczogZnVuY3Rpb24oYW10KSB7IHJldHVybiBjdXJyZW50U3RhdGUudW5pdHMgPiBhbXQ7IH0sXG4gICAgaW5jOiBmdW5jdGlvbihhbXQsIGRpc3BsYXkgPSB0cnVlLCBzb3VyY2UgPSAnQ2xpY2snKSB7XG4gICAgICBjdXJyZW50U3RhdGUudW5pdHMgKz0gYW10O1xuXG4gICAgICBtYW5hZ2VIaXN0b3J5KCk7XG5cbiAgICAgIGlmKCFjdXJyZW50U3RhdGUuc291cmNlc1tzb3VyY2VdKSB7XG4gICAgICAgIGN1cnJlbnRTdGF0ZS5zb3VyY2VzW3NvdXJjZV0gPSAwO1xuICAgICAgfVxuXG4gICAgICBpZihhbXQgPiAwKSB7XG4gICAgICAgIGN1cnJlbnRTdGF0ZS5zb3VyY2VzW3NvdXJjZV0gKz0gYW10O1xuICAgICAgfVxuXG4gICAgICB1bml0RGVmZXIubm90aWZ5KGN1cnJlbnRTdGF0ZS51bml0cyk7XG5cbiAgICAgIGlmKHVwZ3JhZGUuaGFzKCdCYXNpYyBBbmltYXRpb24nKSAmJiBkaXNwbGF5KSB7XG4gICAgICAgIEFuaW1hdGVkRmx5VGlwLmZseShhbXQsIHVwZ3JhZGUuaGFzKCdOdW1iZXIgRm9ybWF0dGluZycpKTtcbiAgICAgIH1cblxuICAgICAgaWYodXBncmFkZS5oYXMoJ1NhdmUnLCAxKSAmJiAhdXBncmFkZS5oYXMoJ1NhdmUnLCAzKSkge1xuICAgICAgICBpZigrK3RpY2sgJSAxMCA9PT0gMCkge1xuICAgICAgICAgIHRpY2sgPSAwO1xuICAgICAgICAgIHNhdmUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZih1cGdyYWRlLmhhcygnU2F2ZScsIDMpKSB7XG4gICAgICAgIHNhdmUoKTtcbiAgICAgIH1cblxuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIGN1cnJlbnRTdGF0ZS51bml0czsgfSxcbiAgICB3YXRjaDogZnVuY3Rpb24oKSB7IHJldHVybiB1bml0RGVmZXIucHJvbWlzZTsgfVxuICB9O1xuXG4gIGxvYWQoKTtcblxuICByZXR1cm4ge1xuICAgIHVwZ3JhZGU6IHVwZ3JhZGUsXG4gICAgdW5pdDogdW5pdCxcbiAgICBjdXJyZW5jeVNldDogY3VycmVuY3lTZXQsXG4gICAgYWRTZXQ6IGFkU2V0LFxuICAgIHNvdXJjZXNHZXQ6IHNvdXJjZXNHZXQsXG4gICAgaGlzdG9yeUdldDogaGlzdG9yeUdldCxcbiAgICBzYXZlOiBzYXZlLFxuICAgIGJ1aWxkU2F2ZU9iamVjdDogYnVpbGRTYXZlT2JqZWN0LFxuICAgIGhhcmRSZXNldDogaGFyZFJlc2V0XG4gIH07XG59O1xuXG5nYW1lU3RhdGUuJGluamVjdCA9IFsnJHEnLCAnbm90aWZpY2F0aW9uU2VydmljZScsICckZmlsdGVyJywgJ1VwZ3JhZGVzJywgJ0dhaW5DYWxjdWxhdG9yJywgJ2xvY2FsU3RvcmFnZVNlcnZpY2UnLCAnQW5pbWF0ZWRGbHlUaXAnXTtcblxubW9kdWxlLmV4cG9ydHMgPSBnYW1lU3RhdGU7IiwidmFyIGdhbWVUaW1lciA9IGZ1bmN0aW9uKCRxLCAkaW50ZXJ2YWwsICR0aW1lb3V0LCAkd2luZG93LCBHYW1lU3RhdGUsIEFkTWFuYWdlciwgR2FpbkNhbGN1bGF0b3IpIHtcblxuICB2YXIgaW50ZXJ2YWwgPSBudWxsO1xuICB2YXIgdGltZXJEZWZlciA9ICRxLmRlZmVyKCk7XG5cbiAgdmFyIHN0YXJ0VGltZXIgPSBmdW5jdGlvbih1cGdyYWRlRGF0YSA9IHtrZXk6ICdUaW1lcid9KSB7XG5cbiAgICBpZighR2FtZVN0YXRlLnVwZ3JhZGUuaGFzKCdCYXNpYyBUaW1lcicpKSB7IHJldHVybjsgfVxuICAgIGlmKCFfLmNvbnRhaW5zKHVwZ3JhZGVEYXRhLmtleSwgJ1RpbWVyJykpIHsgcmV0dXJuOyB9XG5cbiAgICBpZihpbnRlcnZhbCkge1xuICAgICAgJGludGVydmFsLmNhbmNlbChpbnRlcnZhbCk7XG4gICAgfVxuXG4gICAgaW50ZXJ2YWwgPSAkaW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAkd2luZG93LmluY3JlYXNlVW5pdHMoMSArIEdhaW5DYWxjdWxhdG9yLnRpbWVyQm9vc3QoR2FtZVN0YXRlLnVwZ3JhZGUpLCAnVGltZXInKTtcbiAgICAgIHRpbWVyRGVmZXIubm90aWZ5KEdhaW5DYWxjdWxhdG9yLnRpbWVyKEdhbWVTdGF0ZS51cGdyYWRlKSk7XG4gICAgfSwgR2FpbkNhbGN1bGF0b3IudGltZXIoR2FtZVN0YXRlLnVwZ3JhZGUpKTtcblxuICAgIHRpbWVyRGVmZXIubm90aWZ5KEdhaW5DYWxjdWxhdG9yLnRpbWVyKEdhbWVTdGF0ZS51cGdyYWRlKSk7XG4gIH07XG5cbiAgaWYoR2FtZVN0YXRlLnVwZ3JhZGUuaGFzKCdCYXNpYyBUaW1lcicpKSB7XG4gICAgJHRpbWVvdXQoc3RhcnRUaW1lciwgMCk7XG4gIH1cblxuICBHYW1lU3RhdGUudXBncmFkZS53YXRjaCgpLnRoZW4obnVsbCwgbnVsbCwgc3RhcnRUaW1lcik7XG5cbiAgcmV0dXJuIHtcbiAgICB3YXRjaDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGltZXJEZWZlci5wcm9taXNlO1xuICAgIH1cbiAgfTtcblxufTtcblxuZ2FtZVRpbWVyLiRpbmplY3QgPSBbJyRxJywgJyRpbnRlcnZhbCcsICckdGltZW91dCcsICckd2luZG93JywgJ0dhbWVTdGF0ZScsICdBZE1hbmFnZXInLCAnR2FpbkNhbGN1bGF0b3InXTtcblxubW9kdWxlLmV4cG9ydHMgPSBnYW1lVGltZXI7IiwidmFyIHNhbmtleUZ1bmN0aW9uYWxpdHkgPSByZXF1aXJlKCcuLi9leHRqcy9zYW5rZXlmdW5jdGlvbmFsaXR5Jyk7XG5kMy5zYW5rZXkgPSBzYW5rZXlGdW5jdGlvbmFsaXR5O1xuXG52YXIgc2Fua2V5ID0gZnVuY3Rpb24oVXBncmFkZVBhdGgpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHNjb3BlOiB7fSxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCkge1xuXG4gICAgICBjb25zdCBjb25zdGFudHMgPSB7XG4gICAgICAgIE9QQUNJVFlfTE9XOiAwLjIsXG4gICAgICAgIE9QQUNJVFlfSElHSDogMC42XG4gICAgICB9O1xuXG4gICAgICBzY29wZS5kYXRhID0gVXBncmFkZVBhdGguZ2V0KCk7XG5cbiAgICAgIHZhciB3aWR0aCA9IDUwMDtcbiAgICAgIHZhciBoZWlnaHQgPSA3NTA7XG5cbiAgICAgIHZhciBzdmcgPSBkMy5zZWxlY3QoZWxlbWVudFswXSlcbiAgICAgICAgLmFwcGVuZCgnc3ZnJylcbiAgICAgICAgLmF0dHIoJ2hlaWdodCcsIGhlaWdodClcbiAgICAgICAgLnN0eWxlKCd3aWR0aCcsICcxMDAlJylcbiAgICAgICAgLnN0eWxlKCdoZWlnaHQnLCBoZWlnaHQpO1xuXG4gICAgICB2YXIgc2Fua2V5RCA9IGQzLnNhbmtleSgpXG4gICAgICAgIC5ub2RlV2lkdGgoOClcbiAgICAgICAgLm5vZGVQYWRkaW5nKDEwKVxuICAgICAgICAuc2l6ZShbd2lkdGgsIGhlaWdodF0pO1xuXG4gICAgICB2YXIgY29sb3IgPSBkMy5zY2FsZS5jYXRlZ29yeTIwKCk7XG4gICAgICB2YXIgcGF0aCA9IHNhbmtleUQubGluaygpO1xuXG4gICAgICB2YXIgcmVpbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHN2Zy5zZWxlY3RBbGwoJ2cnKS5yZW1vdmUoKTtcbiAgICAgICAgc2Fua2V5RFxuICAgICAgICAgIC5ub2RlcyhzY29wZS5kYXRhLm5vZGVzKVxuICAgICAgICAgIC5saW5rcyhzY29wZS5kYXRhLmxpbmtzKVxuICAgICAgICAgIC5sYXlvdXQoMjU2KTtcblxuICAgICAgICB2YXIgbGluayA9IHN2Zy5hcHBlbmQoJ2cnKS5zZWxlY3RBbGwoJy5saW5rJylcbiAgICAgICAgICAuZGF0YShzY29wZS5kYXRhLmxpbmtzKVxuICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgLmFwcGVuZCgncGF0aCcpXG4gICAgICAgICAgICAuYXR0cignY2xhc3MnLCAnbGluaycpXG4gICAgICAgICAgICAuYXR0cignZCcsIHBhdGgpXG4gICAgICAgICAgICAuYXR0cignc3Ryb2tlLXdpZHRoJywgZCA9PiBNYXRoLm1heCgxLCBkLmR5KSlcbiAgICAgICAgICAgIC5hdHRyKCdzdHJva2UnLCBkID0+IGQzLnJnYihjb2xvcihkLnNvdXJjZS5uYW1lLnNwbGl0KCcgJykuam9pbignJykpKS5kYXJrZXIoKSlcbiAgICAgICAgICAgIC5hdHRyKCdvcGFjaXR5JywgY29uc3RhbnRzLk9QQUNJVFlfTE9XKVxuICAgICAgICAgICAgLm9uKCdtb3VzZW92ZXInLCBmdW5jdGlvbigpIHsgZDMuc2VsZWN0KHRoaXMpLnRyYW5zaXRpb24oKS5zdHlsZSgnb3BhY2l0eScsIGNvbnN0YW50cy5PUEFDSVRZX0hJR0gpOyB9KVxuICAgICAgICAgICAgLm9uKCdtb3VzZW91dCcsIGZ1bmN0aW9uKCkgeyBkMy5zZWxlY3QodGhpcykudHJhbnNpdGlvbigpLnN0eWxlKCdvcGFjaXR5JywgY29uc3RhbnRzLk9QQUNJVFlfTE9XKTsgfSlcbiAgICAgICAgICAgIC5zb3J0KChhLCBiKSA9PiBiLmR5IC0gYS5keSApO1xuXG4gICAgICAgIGxpbmtcbiAgICAgICAgICAuYXBwZW5kKCd0aXRsZScpXG4gICAgICAgICAgLnRleHQoZCA9PiBgJHtkLnNvdXJjZS5uYW1lfSDihpIgJHtkLnRhcmdldC5uYW1lfWApO1xuXG4gICAgICAgIHZhciBub2RlID0gc3ZnLmFwcGVuZCgnZycpLnNlbGVjdEFsbCgnLm5vZGUnKVxuICAgICAgICAgIC5kYXRhKHNjb3BlLmRhdGEubm9kZXMpXG4gICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAuYXBwZW5kKCdnJylcbiAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdub2RlJylcbiAgICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBkID0+IGB0cmFuc2xhdGUoJHtkLnh9LCR7Xy5pc05hTihkLnkpID8gMCA6IGQueX0pYCk7XG5cbiAgICAgICAgdmFyIG1vdXNlRmlsdGVyID0gKGQsIG9wYWNpdHkpID0+IHtcbiAgICAgICAgICBzdmcuc2VsZWN0QWxsKCcubGluaycpXG4gICAgICAgICAgICAuZmlsdGVyKGwgPT4gbC5zb3VyY2UgPT09IGQgfHwgbC50YXJnZXQgPT09IGQpXG4gICAgICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgICAgICAuc3R5bGUoJ29wYWNpdHknLCBvcGFjaXR5KTtcbiAgICAgICAgfTtcblxuICAgICAgICBub2RlLmFwcGVuZCgncmVjdCcpXG4gICAgICAgICAgLmF0dHIoJ2hlaWdodCcsIGQgPT4gZC5keSlcbiAgICAgICAgICAuYXR0cignd2lkdGgnLCBzYW5rZXlELm5vZGVXaWR0aCgpKVxuICAgICAgICAgIC5zdHlsZSgnZmlsbCcsIGQgPT4gY29sb3IoZC5uYW1lLnNwbGl0KCcgJykuam9pbignJykpKVxuICAgICAgICAgIC5zdHlsZSgnc3Ryb2tlJywgZCA9PiBkMy5yZ2IoZC5jb2xvcikuZGFya2VyKDIpKVxuICAgICAgICAgIC5vbignbW91c2VvdmVyJywgKGQpID0+IG1vdXNlRmlsdGVyKGQsIGNvbnN0YW50cy5PUEFDSVRZX0hJR0gpKVxuICAgICAgICAgIC5vbignbW91c2VvdXQnLCAoZCkgPT4gbW91c2VGaWx0ZXIoZCwgY29uc3RhbnRzLk9QQUNJVFlfTE9XKSlcbiAgICAgICAgICAub24oJ2RibGNsaWNrJywgZCA9PiB7XG4gICAgICAgICAgICBzdmcuc2VsZWN0QWxsKCcubGluaycpXG4gICAgICAgICAgICAgIC5maWx0ZXIobCA9PiBsLnRhcmdldCA9PT0gZClcbiAgICAgICAgICAgICAgLmF0dHIoJ2Rpc3BsYXknLCBmdW5jdGlvbigpIHsgcmV0dXJuIGQzLnNlbGVjdCh0aGlzKS5hdHRyKCdkaXNwbGF5JykgPT09ICdub25lJyA/ICdpbmxpbmUnIDogJ25vbmUnOyB9KTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5hcHBlbmQoJ3RpdGxlJylcbiAgICAgICAgICAgIC50ZXh0KGQgPT4gZC5uYW1lKTtcblxuICAgICAgICBub2RlLmFwcGVuZCgndGV4dCcpLmFwcGVuZCgndHNwYW4nKVxuICAgICAgICAgIC5hdHRyKCd4JywgLTYpXG4gICAgICAgICAgLmF0dHIoJ3knLCBkID0+IGQuZHkgLyAyKVxuICAgICAgICAgIC5hdHRyKCdkeScsICcuMzVlbScpXG4gICAgICAgICAgLmF0dHIoJ3RleHQtYW5jaG9yJywgJ2VuZCcpXG4gICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIG51bGwpXG4gICAgICAgICAgLnRleHQoZCA9PiBkLm5hbWUpXG4gICAgICAgICAgLmZpbHRlcihkID0+IGQueCA8IHdpZHRoICogMC43NSlcbiAgICAgICAgICAuYXR0cigneCcsIDIgKyBzYW5rZXlELm5vZGVXaWR0aCgpKVxuICAgICAgICAgIC5hdHRyKCd0ZXh0LWFuY2hvcicsICdzdGFydCcpXG4gICAgICAgICAgLmZpbHRlcihkID0+IGQueCA+IHdpZHRoICogMC4yNSlcbiAgICAgICAgICAuYXR0cigndGV4dC1hbmNob3InLCAnbWlkZGxlJyk7XG4gICAgICB9O1xuXG4gICAgICByZWluaXQoKTtcblxuICAgICAgVXBncmFkZVBhdGgud2F0Y2goKS50aGVuKG51bGwsIG51bGwsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzY29wZS5kYXRhID0gVXBncmFkZVBhdGguZ2V0KCk7XG5cbiAgICAgICAgcmVpbml0KCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59O1xuXG5zYW5rZXkuJGluamVjdCA9IFsnVXBncmFkZVBhdGgnXTtcblxubW9kdWxlLmV4cG9ydHMgPSBzYW5rZXk7IiwidmFyIHVwZ3JhZGVNYW5hZ2VyID0gZnVuY3Rpb24oR2FtZVN0YXRlLCBVUEdSQURFUywgZmF2aWNvKSB7XG5cbiAgdmFyIGhhc1VwZ3JhZGUgPSBmdW5jdGlvbihrZXksIGxldmVsID0gMCkge1xuICAgIHJldHVybiBHYW1lU3RhdGUudXBncmFkZS5oYXMoa2V5LCBsZXZlbCk7XG4gIH07XG5cbiAgdmFyIHZpc2libGUgPSBmdW5jdGlvbigpIHtcblxuICAgIHZhciBjdXJyZW50ID0gR2FtZVN0YXRlLnVuaXQuZ2V0KCk7XG4gICAgdmFyIGFsbFJldCA9IFtdO1xuXG4gICAgXy5lYWNoKFVQR1JBREVTLCAoaXRlbSwgaXRlbU5hbWUpID0+IHtcblxuICAgICAgdmFyIHJldCA9IFtdO1xuXG4gICAgICB2YXIgbWVldHNBbGxSZXFzID0gdHJ1ZTtcblxuICAgICAgXy5lYWNoKGl0ZW0ucmVxdWlyZW1lbnRzLCAocmVxLCBrZXkpID0+IHtcbiAgICAgICAgaWYoIWhhc1VwZ3JhZGUoa2V5LCByZXEpKSB7IG1lZXRzQWxsUmVxcyA9IGZhbHNlOyB9XG4gICAgICB9KTtcblxuICAgICAgaWYoIW1lZXRzQWxsUmVxcykgeyByZXR1cm47IH1cblxuICAgICAgdmFyIGxldmVscyA9IGl0ZW0ubGV2ZWxzO1xuICAgICAgaWYoXy5pc0Z1bmN0aW9uKGl0ZW0ubGV2ZWxzKSkge1xuICAgICAgICB2YXIgbmV4dExldmVsID0gR2FtZVN0YXRlLnVwZ3JhZGUuZ2V0S2V5KGl0ZW1OYW1lKSB8fCAwO1xuICAgICAgICBsZXZlbHMgPSB7fTtcbiAgICAgICAgbGV2ZWxzW25leHRMZXZlbF0gPSBpdGVtLmxldmVscyhuZXh0TGV2ZWwpO1xuICAgICAgfVxuXG4gICAgICBfLmVhY2gobGV2ZWxzLCAobGV2ZWwsIGkpID0+IHtcbiAgICAgICAgdmFyIHZpc0xldmVsID0gR2FtZVN0YXRlLnVwZ3JhZGUuZ2V0S2V5KCdVcGdyYWRlIFZpc2liaWxpdHknKTtcbiAgICAgICAgdmFyIHZpc2liaWxpdHlCb29zdCA9IDEgKyAoXy5pc1VuZGVmaW5lZCh2aXNMZXZlbCkgPyAwIDogMC4xNSp2aXNMZXZlbCk7XG4gICAgICAgIHZhciBwcmV2SXRlbSA9IHJldFtyZXQubGVuZ3RoLTFdO1xuICAgICAgICB2YXIgdG90YWxDb3N0ID0gbGV2ZWwuY29zdCArIChwcmV2SXRlbSA/IHByZXZJdGVtLmNvc3QgOiAwKTtcblxuICAgICAgICBpZihoYXNVcGdyYWRlKGl0ZW1OYW1lLCBpKSB8fCB0b3RhbENvc3QvdmlzaWJpbGl0eUJvb3N0ID4gY3VycmVudCkgeyByZXR1cm47IH1cblxuICAgICAgICByZXQucHVzaCh7XG4gICAgICAgICAgbmFtZTogaXRlbU5hbWUsXG4gICAgICAgICAgbGV2ZWw6IGksXG4gICAgICAgICAgY29zdDogdG90YWxDb3N0LFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBsZXZlbC5kZXNjcmlwdGlvbixcbiAgICAgICAgICBidXlMZXZlbHM6IDEgKyAocHJldkl0ZW0gPyBwcmV2SXRlbS5idXlMZXZlbHMgOiAwKSxcbiAgICAgICAgICBjYXRlZ29yeTogaXRlbS5jYXRlZ29yeVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBhbGxSZXQucHVzaCguLi5yZXQpO1xuXG4gICAgfSk7XG5cbiAgICBpZihoYXNVcGdyYWRlKCdBbHBoYWJldGl6ZWQgVXBncmFkZXMnKSkge1xuICAgICAgYWxsUmV0ID0gXy5zb3J0QnlPcmRlcihhbGxSZXQsIFsnbmFtZScsICdsZXZlbCddLCBbdHJ1ZSwgdHJ1ZV0pO1xuICAgIH1cblxuICAgIGlmKGhhc1VwZ3JhZGUoJ0Jlc3QgRmF2aWNvbicpKSB7XG4gICAgICB2YXIgYnV5YWJsZVVwZ3JhZGVzID0gXy5maWx0ZXIoYWxsUmV0LCBpdGVtID0+IGl0ZW0uY29zdCA8IGN1cnJlbnQpLmxlbmd0aDtcbiAgICAgIGlmKGJ1eWFibGVVcGdyYWRlcyA+IDApIHtcbiAgICAgICAgZmF2aWNvLmJhZGdlKGJ1eWFibGVVcGdyYWRlcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmYXZpY28ucmVzZXQoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYWxsUmV0O1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgdmlzaWJsZTogXy50aHJvdHRsZSh2aXNpYmxlLCA1MClcbiAgfTtcbn07XG5cbnVwZ3JhZGVNYW5hZ2VyLiRpbmplY3QgPSBbJ0dhbWVTdGF0ZScsICdVcGdyYWRlcycsICdmYXZpY28nXTtcblxubW9kdWxlLmV4cG9ydHMgPSB1cGdyYWRlTWFuYWdlcjsiLCJcbnZhciB1cGdyYWRlUGF0aCA9IGZ1bmN0aW9uKCRxLCBHYW1lU3RhdGUsIFVQR1JBREVTKSB7XG4gIHZhciBkZWZlciA9ICRxLmRlZmVyKCk7XG5cbiAgdmFyIHN0cnVjdHVyZSA9IHtcbiAgICBub2RlczogW10sXG4gICAgbGlua3M6IFtdXG4gIH07XG5cbiAgdmFyIHJlY2FsY3VsYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgc3RydWN0dXJlLm5vZGVzID0gXyhHYW1lU3RhdGUudXBncmFkZS5nZXQoKSkua2V5cygpLmZpbHRlcihrZXkgPT4gXy5oYXMoVVBHUkFERVMsIGtleSkpLm1hcChrZXkgPT4geyByZXR1cm4ge25hbWU6IGtleX07IH0pLnZhbHVlKCk7XG4gICAgc3RydWN0dXJlLmxpbmtzID0gXyhzdHJ1Y3R1cmUubm9kZXMpLm1hcChub2RlID0+IHtcbiAgICAgIHZhciBub2RlTGlua3MgPSBbXTtcblxuICAgICAgXy5lYWNoKFVQR1JBREVTW25vZGUubmFtZV0ucmVxdWlyZW1lbnRzLCAodmFsLCBrZXkpID0+IHtcbiAgICAgICAgbm9kZUxpbmtzLnB1c2goe1xuICAgICAgICAgIHNvdXJjZTogXy5maW5kV2hlcmUoc3RydWN0dXJlLm5vZGVzLCB7bmFtZToga2V5fSksXG4gICAgICAgICAgdmFsdWU6IDEsXG4gICAgICAgICAgdGFyZ2V0OiBfLmZpbmRXaGVyZShzdHJ1Y3R1cmUubm9kZXMsIHtuYW1lOiBub2RlLm5hbWV9KVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gbm9kZUxpbmtzO1xuICAgIH0pLmZsYXR0ZW4oKS52YWx1ZSgpO1xuXG4gICAgZGVmZXIubm90aWZ5KHN0cnVjdHVyZSk7XG4gIH07XG5cbiAgcmVjYWxjdWxhdGUoKTtcblxuICBHYW1lU3RhdGUudXBncmFkZS53YXRjaCgpLnRoZW4obnVsbCwgbnVsbCwgcmVjYWxjdWxhdGUpO1xuXG4gIHJldHVybiB7XG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzdHJ1Y3R1cmU7XG4gICAgfSxcbiAgICB3YXRjaDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZGVmZXIucHJvbWlzZTtcbiAgICB9XG4gIH07XG59O1xuXG51cGdyYWRlUGF0aC4kaW5qZWN0ID0gWyckcScsICdHYW1lU3RhdGUnLCAnVXBncmFkZXMnXTtcblxubW9kdWxlLmV4cG9ydHMgPSB1cGdyYWRlUGF0aDsiLCJcbm1vZHVsZS5leHBvcnRzID0ge1xuICBTY29yZWJvYXJkOiB7XG4gICAgY2F0ZWdvcnk6ICdWaXN1YWwnLFxuICAgIGxldmVsczogW3tjb3N0OiA1LCBkZXNjcmlwdGlvbjogJ1Zpc3VhbGl6ZSB5b3VyIHNjb3JlISd9XVxuICB9LFxuICAnQmFzaWMgTGF5b3V0Jzoge1xuICAgIGNhdGVnb3J5OiAnVmlzdWFsJyxcbiAgICBsZXZlbHM6IFtcbiAgICAgIHtjb3N0OiAxNSwgZGVzY3JpcHRpb246ICdBIHNsaWdodGx5IGJldHRlciBsYXlvdXQuJ30sXG4gICAgICB7Y29zdDogMjAwLCBkZXNjcmlwdGlvbjogJ0Fub3RoZXIgc2xpZ2h0bHkgYmV0dGVyIGxheW91dC4nfVxuICAgIF1cbiAgfSxcbiAgJ0JldHRlciBMYXlvdXQnOiB7XG4gICAgY2F0ZWdvcnk6ICdWaXN1YWwnLFxuICAgIHJlcXVpcmVtZW50czogeydCYXNpYyBMYXlvdXQnOiAxfSxcbiAgICBsZXZlbHM6IFtcbiAgICAgIHtjb3N0OiAyMDAsIGRlc2NyaXB0aW9uOiAnT25lIG9mIHRoZSBiZXR0ZXIgbGF5b3V0cyB5b3UgZ2V0IHRvIHNlZS4nfSxcbiAgICAgIHtjb3N0OiAyMDAwLCBkZXNjcmlwdGlvbjogJ1Byb2JhYmx5IHRoZSBiZXN0IGxheW91dCBpbiB0aGUgZ2FtZS4nfVxuICAgIF1cbiAgfSxcbiAgRnVuY3Rpb246IHtcbiAgICBjYXRlZ29yeTogJ1RlY2gnLFxuICAgIGxldmVsczogW3tjb3N0OiAyMCwgZGVzY3JpcHRpb246ICdBY2Nlc3MgdG8gYSBmdW5jdGlvbiBpcyBuZWNlc3NhcnkgdG8gZ2FpbiBtb3JlIHBvd2VyLid9XVxuICB9LFxuICAnQmFzaWMgSXRlcmF0aW9uJzoge1xuICAgIGNhdGVnb3J5OiAnVGVjaCcsXG4gICAgcmVxdWlyZW1lbnRzOiB7RnVuY3Rpb246IDB9LFxuICAgIGxldmVsczogW1xuICAgICAge2Nvc3Q6IDUwLCBkZXNjcmlwdGlvbjogJ01vcmUgaXRlcmF0aW9ucyBtZWFucyBmYXN0ZXIgcHJvZHVjdGlvbi4nfSxcbiAgICAgIHtjb3N0OiAzMDAsIGRlc2NyaXB0aW9uOiAnRXZlbiBtb3JlIGl0ZXJhdGlvbnMgbWVhbnMgZXZlbiBmYXN0ZXIgcHJvZHVjdGlvbi4nfSxcbiAgICAgIHtjb3N0OiAyMDAwMCwgZGVzY3JpcHRpb246ICdZZXQgbW9yZSBpdGVyYXRpb25zIG1lYW5zIHlldCBmYXN0ZXIgcHJvZHVjdGlvbi4nfSxcbiAgICAgIHtjb3N0OiAxNTAwMDAsIGRlc2NyaXB0aW9uOiAnTWFueSBpdGVyYXRpb25zIG1lYW5zIG11Y2ggZmFzdGVyIHByb2R1Y3Rpb24uJ31cbiAgICBdXG4gIH0sXG4gICdCYXNpYyBUaW1lcic6IHtcbiAgICBjYXRlZ29yeTogJ1RlY2gnLFxuICAgIHJlcXVpcmVtZW50czoge0Z1bmN0aW9uOiAwfSxcbiAgICBsZXZlbHM6IFtcbiAgICAgIHtjb3N0OiA1MCwgZGVzY3JpcHRpb246ICdBIHRpbWVyIHJ1bnMgYW5kIGF1dG9tYXRpY2FsbHkgcHJvZHVjZXMgZm9yIHlvdSBldmVyeSBzbyBvZnRlbi4nfSxcbiAgICAgIHtjb3N0OiA2MDAsIGRlc2NyaXB0aW9uOiAnVGhlIHRpbWluZyBvZiB0aGUgdGltZXIgaXMgc2xpZ2h0bHkgZmFzdGVyLid9LFxuICAgICAge2Nvc3Q6IDIwMDAwLCBkZXNjcmlwdGlvbjogJ1RoZSB0aW1lciBydW5zIGV2ZW4gZmFzdGVyIG5vdy4nfSxcbiAgICAgIHtjb3N0OiAxMDAwMDAsIGRlc2NyaXB0aW9uOiAnVGhlIHRpbWVyIGdvZXMgem9vbSB6b29tISd9XG4gICAgXVxuICB9LFxuICAnQmFzaWMgQm9vc3QnOiB7XG4gICAgY2F0ZWdvcnk6ICdUZWNoJyxcbiAgICByZXF1aXJlbWVudHM6IHtGdW5jdGlvbjogMH0sXG4gICAgbGV2ZWxzOiBbXG4gICAgICB7Y29zdDogMTAsIGRlc2NyaXB0aW9uOiAnQmlnZ2VyIGJvb3N0IG1lYW5zIG1vcmUgcHJvZHVjdGlvbiBoYXBwZW5pbmcgYXQgb25jZS4nfSxcbiAgICAgIHtjb3N0OiAxMDAwLCBkZXNjcmlwdGlvbjogJ0V2ZW4gYmlnZ2VyIGJvb3N0IG1lYW5zIGV2ZW4gbW9yZSBwcm9kdWN0aW9uLid9LFxuICAgICAge2Nvc3Q6IDI1MDAwLCBkZXNjcmlwdGlvbjogJ1lldCBhIGJpZ2dlciBib29zdCBtZWFucyBhIGhpZ2hlciBwcm9kdWN0aW9uIHlpZWxkLid9LFxuICAgICAge2Nvc3Q6IDIwMDAwMCwgZGVzY3JpcHRpb246ICdUaGUgYmlnZ2VzdCBib29zdCBtZWFucyB0aGUgYmVzdCBwcm9kdWN0aW9uLid9XG4gICAgXVxuICB9LFxuICBDYXBpdGFsaXphdGlvbjoge1xuICAgIGNhdGVnb3J5OiAnVmlzdWFsJyxcbiAgICByZXF1aXJlbWVudHM6IHsnU2NvcmVib2FyZCc6IDB9LFxuICAgIGxldmVsczogW3tjb3N0OiAxMDAsIGRlc2NyaXB0aW9uOiAnU29tZXRpbWVzIGdvb2QgcHVuY3R1YXRpb24ganVzdCBsb29rcyBuaWNlLid9XVxuICB9LFxuICBQcmVmb3JtYXR0aW5nOiB7XG4gICAgY2F0ZWdvcnk6ICdWaXN1YWwnLFxuICAgIHJlcXVpcmVtZW50czogeydCYXNpYyBJdGVyYXRpb24nOiAwfSxcbiAgICBsZXZlbHM6IFt7Y29zdDogMTUwMCwgZGVzY3JpcHRpb246ICdCZXR0ZXIgY29kZSBmb3JtYXR0aW5nIGZvciByZWFkYWJpbGl0eSd9XVxuICB9LFxuICAnVmlzdWFsIENvdW50ZG93bic6IHtcbiAgICBjYXRlZ29yeTogJ1Zpc3VhbCcsXG4gICAgcmVxdWlyZW1lbnRzOiB7J0Jhc2ljIFRpbWVyJzogMH0sXG4gICAgbGV2ZWxzOiBbe2Nvc3Q6IDEwMDAsIGRlc2NyaXB0aW9uOiAnSXQgbWlnaHQgaGVscCB0byBzZWUgdGhlIGNvdW50ZG93biBmb3IgdGhlIHRpbWVyIHJ1bi4nfV1cbiAgfSxcbiAgJ1BhZ2UgVGl0bGUnOiB7XG4gICAgY2F0ZWdvcnk6ICdDb3NtZXRpYycsXG4gICAgcmVxdWlyZW1lbnRzOiB7J0Jhc2ljIExheW91dCc6IDB9LFxuICAgIGxldmVsczogW3tjb3N0OiA1MDAsIGRlc2NyaXB0aW9uOiAnQSBuaWNlciBsb29raW5nIHBhZ2UgdGl0bGUuIFNvIHJldmVhbGluZyEnfV1cbiAgfSxcbiAgJ0JldHRlciBQYWdlIFRpdGxlJzoge1xuICAgIGNhdGVnb3J5OiAnQ29zbWV0aWMnLFxuICAgIHJlcXVpcmVtZW50czogeydQYWdlIFRpdGxlJzogMCwgJ1Njb3JlYm9hcmQnOiAwfSxcbiAgICBsZXZlbHM6IFt7Y29zdDogMjUwMCwgZGVzY3JpcHRpb246ICdKdXN0IHdoZW4geW91IHRob3VnaHQgdGhlIHBhZ2UgdGl0bGUgbG9va2VkIGdvb2QsIGl0IGdldHMgYmV0dGVyISd9XVxuICB9LFxuICAnQWxwaGFiZXRpemVkIFVwZ3JhZGVzJzoge1xuICAgIGNhdGVnb3J5OiAnQ29zbWV0aWMnLFxuICAgIHJlcXVpcmVtZW50czogeydDYXBpdGFsaXphdGlvbic6IDAsICdCZXR0ZXIgTGF5b3V0JzogMH0sXG4gICAgbGV2ZWxzOiBbe2Nvc3Q6IDUwMDAsIGRlc2NyaXB0aW9uOiAnUHV0dGluZyB0aGUgdXBncmFkZXMgaW4gc29tZSBraW5kIG9mIG9yZGVyIG1ha2VzIHRoZW0gbXVjaCBlYXNpZXIgdG8gbmF2aWdhdGUuJ31dXG4gIH0sXG4gICdVcGdyYWRlIFZpc2liaWxpdHknOiB7XG4gICAgY2F0ZWdvcnk6ICdDb3NtZXRpYycsXG4gICAgcmVxdWlyZW1lbnRzOiB7J0FscGhhYmV0aXplZCBVcGdyYWRlcyc6IDB9LFxuICAgIGxldmVsczogW1xuICAgICAge2Nvc3Q6IDY1MDAsIGRlc2NyaXB0aW9uOiAnVXBncmFkZXMgd2lsbCBhcHBlYXIgc2xpZ2h0bHkgYmVmb3JlIHlvdSBjYW4gYnV5IHRoZW0uJ30sXG4gICAgICB7Y29zdDogODUwMCwgZGVzY3JpcHRpb246ICdVcGdyYWRlcyB3aWxsIGFwcGVhciBhIHdoaWxlIGJlZm9yZSB5b3UgY2FuIGJ1eSB0aGVtLid9LFxuICAgICAge2Nvc3Q6IDEwNTAwLCBkZXNjcmlwdGlvbjogJ1VwZ3JhZGVzIHdpbGwgc2hvdyB1cCBxdWl0ZSBhIHdheXMgYmVmb3JlIHlvdSBjYW4gYnV5IHRoZW0uJ31cbiAgICBdXG4gIH0sXG4gICdQcm9ncmVzcyBCYXInOiB7XG4gICAgY2F0ZWdvcnk6ICdWaXN1YWwnLFxuICAgIHJlcXVpcmVtZW50czogeydCZXR0ZXIgTGF5b3V0JzogMSwgJ0Jhc2ljIENvbG9yJzogMCwgJ1Zpc3VhbCBDb3VudGRvd24nOiAwfSxcbiAgICBsZXZlbHM6IFt7Y29zdDogNTAwMCwgZGVzY3JpcHRpb246ICdUcmFuc2Zvcm0geW91ciBjb3VudGRvd24gaW50byBhIHByb2dyZXNzIGJhciBpbnN0ZWFkISd9XVxuICB9LFxuICAnQmFzaWMgU3R5bGUnOiB7XG4gICAgY2F0ZWdvcnk6ICdWaXN1YWwnLFxuICAgIHJlcXVpcmVtZW50czogeydCZXR0ZXIgTGF5b3V0JzogMX0sXG4gICAgbGV2ZWxzOiBbXG4gICAgICB7Y29zdDogMTAwMDAsIGRlc2NyaXB0aW9uOiAnWWVzLCBpdCBkb2VzIGdldCBiZXR0ZXIhIFRoaXMgdXBncmFkZSBtYWtlcyB0aGUgdGFibGUgbG9vayBuaWNlci4nfSxcbiAgICAgIHtjb3N0OiAyMDAwMCwgZGVzY3JpcHRpb246ICdUaGlzIHVwZ3JhZGUgZml4ZXMgc29tZSBzbGlnaHQgYWxpZ25tZW50IGlzc3VlcyBpbnRyb2R1Y2VkIGJ5IHRoZSBwcmV2aW91cyB1cGdyYWRlLid9XG4gICAgXVxuICB9LFxuICAnQmFzaWMgQ29sb3InOiB7XG4gICAgY2F0ZWdvcnk6ICdWaXN1YWwnLFxuICAgIHJlcXVpcmVtZW50czogeydCYXNpYyBTdHlsZSc6IDB9LFxuICAgIGxldmVsczogW3tjb3N0OiAxMjUwMCwgZGVzY3JpcHRpb246ICdBZGQgc29tZSBjb2xvciB0byB0aGUgcGFnZS4nfV1cbiAgfSxcbiAgSWNvbm9ncmFwaHk6IHtcbiAgICBjYXRlZ29yeTogJ1Zpc3VhbCcsXG4gICAgcmVxdWlyZW1lbnRzOiB7J0Jhc2ljIFN0eWxlJzogMH0sXG4gICAgbGV2ZWxzOiBbe2Nvc3Q6IDI1MDAwLCBkZXNjcmlwdGlvbjogJ0dldCBzb21lIGljb25zIG9uIHRoZSBwYWdlLid9XVxuICB9LFxuICAnTnVtYmVyIEZvcm1hdHRpbmcnOiB7XG4gICAgY2F0ZWdvcnk6ICdDb3NtZXRpYycsXG4gICAgcmVxdWlyZW1lbnRzOiB7J0Jhc2ljIFN0eWxlJzogMH0sXG4gICAgbGV2ZWxzOiBbe2Nvc3Q6IDIwMDAwLCBkZXNjcmlwdGlvbjogJ0Zvcm1hdCB0aGUgbnVtYmVycyBtb3JlIG5pY2VseSEnfV1cbiAgfSxcbiAgJ0Jhc2ljIEFuaW1hdGlvbic6IHtcbiAgICBjYXRlZ29yeTogJ0Nvc21ldGljJyxcbiAgICByZXF1aXJlbWVudHM6IHsnQmFzaWMgU3R5bGUnOiAwLCAnQmFzaWMgSXRlcmF0aW9uJzogMCwgJ0Jhc2ljIENvbG9yJzogMCwgJ0JldHRlciBMYXlvdXQnOiAxfSxcbiAgICBsZXZlbHM6IFt7Y29zdDogMTAwMDAwLCBkZXNjcmlwdGlvbjogJ1Nwcmlua2xlIHNvbWUgYW5pbWF0aW9ucyBvbnRvIHRoZSBwYWdlLid9XVxuICB9LFxuICAnRmF2aWNvbic6IHtcbiAgICBjYXRlZ29yeTogJ0Nvc21ldGljJyxcbiAgICByZXF1aXJlbWVudHM6IHsnQmV0dGVyIExheW91dCc6IDF9LFxuICAgIGxldmVsczogW3tjb3N0OiAyMDAwLCBkZXNjcmlwdGlvbjogJ0FkZCB0aGUgZmF2aWNvbiB0byB0aGUgaGVhZGVyIGJhci4nfV1cbiAgfSxcbiAgJ0Jlc3QgRmF2aWNvbic6IHtcbiAgICBjYXRlZ29yeTogJ0Nvc21ldGljJyxcbiAgICByZXF1aXJlbWVudHM6IHsnQmV0dGVyIFBhZ2UgVGl0bGUnOiAwLCAnRmF2aWNvbic6IDB9LFxuICAgIGxldmVsczogW3tjb3N0OiAxMDAwMDAsIGRlc2NyaXB0aW9uOiAnR2V0IG5vdGlmaWVkIHZpYSBmYXZpY29uIHdoZW5ldmVyIHlvdSBoYXZlIGEgbmV3IHVwZ3JhZGUgdG8gcHVyY2hhc2UuJ31dXG4gIH0sXG4gICdTeW50YXggSGlnaGxpZ2h0aW5nJzoge1xuICAgIGNhdGVnb3J5OiAnQ29zbWV0aWMnLFxuICAgIHJlcXVpcmVtZW50czogeydQcmVmb3JtYXR0aW5nJzogMH0sXG4gICAgbGV2ZWxzOiBbe2Nvc3Q6IDUwMDAwLCBkZXNjcmlwdGlvbjogJ01ha2UgZXZlcnkgY29kZSBwb3J0aW9uIGxvb2sgZXZlbiBiZXR0ZXIhJ31dXG4gIH0sXG4gICdTYXZlJzoge1xuICAgIGNhdGVnb3J5OiAnVGVjaCcsXG4gICAgcmVxdWlyZW1lbnRzOiB7J0Jhc2ljIExheW91dCc6IDB9LFxuICAgIGxldmVsczogW1xuICAgICAge2Nvc3Q6IDMwMCwgZGVzY3JpcHRpb246ICdJbnRyb2R1Y2UgYSBzYXZlIGJ1dHRvbiB0aGF0IGFsbG93cyB5b3UgdG8gc2F2ZSB5b3VyIHByb2dyZXNzLid9LFxuICAgICAge2Nvc3Q6IDUwMDAsIGRlc2NyaXB0aW9uOiAnSW50cm9kdWNlIGEgbWVjaGFuaWMgdGhhdCBzYXZlcyBvY2Nhc2lvbmFsbHkuJ30sXG4gICAgICB7Y29zdDogMjAwMDAsIGRlc2NyaXB0aW9uOiAnSW50cm9kdWNlIGEgZGVidWcgbWVudSB3aGVyZSB5b3UgY2FuIHNlZSB5b3VyIHNhdmUgZGF0YS4nfSxcbiAgICAgIHtjb3N0OiAxNTAwMDAsIGRlc2NyaXB0aW9uOiAnTWFrZSB0aGUgZ2FtZSBzYXZlIGF1dG9tYXRpY2FsbHkgYWZ0ZXIgcHJvZHVjdGlvbiBvciBwdXJjaGFzZXMuJ31cbiAgICBdXG4gIH0sXG4gICdBZHZhbmNlZCBUaW1lcic6IHtcbiAgICBjYXRlZ29yeTogJ1RlY2gnLFxuICAgIHJlcXVpcmVtZW50czogeydCYXNpYyBUaW1lcic6IDN9LFxuICAgIGxldmVsczogW1xuICAgICAge2Nvc3Q6IDIwMDAwMCwgZGVzY3JpcHRpb246ICdUaGUgdGltZXIgaXMgYmFjayBhbmQgZmFzdGVyIHRoYW4gZXZlci4nfSxcbiAgICAgIHtjb3N0OiA3NTAwMDAsIGRlc2NyaXB0aW9uOiAnSnVzdCB3aGVuIHlvdSB0aG91Z2h0IHRoZSB0aW1lciB3YXMgb3V0IG9mIHRyaWNrcywgaXQgZ2V0cyBmYXN0ZXIhJ30sXG4gICAgICB7Y29zdDogMTUwMDAwMCwgZGVzY3JpcHRpb246ICdUaGUgZmFzdGVzdCB0aW1lciB5ZXQhJ31cbiAgICBdXG4gIH0sXG4gICdCZXN0IFRhYmxlJzoge1xuICAgIGNhdGVnb3J5OiAnVGVjaCcsXG4gICAgcmVxdWlyZW1lbnRzOiB7J0Jhc2ljIFN0eWxlJzogMSwgJ0FscGhhYmV0aXplZCBVcGdyYWRlcyc6IDB9LFxuICAgIGxldmVsczogW3tjb3N0OiAyNTAwMDAsIGRlc2NyaXB0aW9uOiAnVGhpcyBnaXZlcyB5b3UgdGhlIGJlc3QgdXBncmFkZSB0YWJsZSBwb3NzaWJsZSEnfV1cbiAgfSxcbiAgTWVudToge1xuICAgIGNhdGVnb3J5OiAnVGVjaCcsXG4gICAgcmVxdWlyZW1lbnRzOiB7J0Jhc2ljIExheW91dCc6IDB9LFxuICAgIGxldmVsczogW3tjb3N0OiAyNTAwLCBkZXNjcmlwdGlvbjogJ0J1eSBhIGRyb3Bkb3duIG1lbnUuIFRoaW5ncyBlbmQgdXAgaGVyZS4nfV1cbiAgfSxcbiAgJ0hlbHAgTWVudSc6IHtcbiAgICBjYXRlZ29yeTogJ1RlY2gnLFxuICAgIHJlcXVpcmVtZW50czogeydNZW51JzogMH0sXG4gICAgbGV2ZWxzOiBbe2Nvc3Q6IDIsIGRlc2NyaXB0aW9uOiAnVGhlIGNoZWFwZXN0IHVwZ3JhZGUgaW4gdGhlIGdhbWUuIEkgYmV0IHlvdSBoYXZlIG5vIGlkZWEgd2hhdCBpdCBkb2VzLid9XVxuICB9LFxuICBUb29sdGlwczoge1xuICAgIGNhdGVnb3J5OiAnVGVjaCcsXG4gICAgcmVxdWlyZW1lbnRzOiB7J0hlbHAgTWVudSc6IDB9LFxuICAgIGxldmVsczogW3tjb3N0OiAxNzUwMCwgZGVzY3JpcHRpb246ICdXZWxsLCB0aGlzIHN1cmUgaXMgc2VsZi1yZWZlcmVudGlhbC4nfV1cbiAgfSxcbiAgJ09wdGlvbnMgTWVudSc6IHtcbiAgICBjYXRlZ29yeTogJ1RlY2gnLFxuICAgIHJlcXVpcmVtZW50czogeydNZW51JzogMH0sXG4gICAgbGV2ZWxzOiBbe2Nvc3Q6IDUwMDAsIGRlc2NyaXB0aW9uOiAnQWxsIG9mIHRoZSBzdGFuZ2Ugb3B0aW9ucyBnbyBoZXJlLiBBbHNvLCB5b3UgY2FuIHJlc2V0IHlvdXIgZ2FtZS4nfV1cbiAgfSxcbiAgJ09mZmxpbmUgUHJvZ3Jlc3MnOiB7XG4gICAgY2F0ZWdvcnk6ICdUZWNoJyxcbiAgICByZXF1aXJlbWVudHM6IHsnQmFzaWMgVGltZXInOiAwfSxcbiAgICBsZXZlbHM6IFtcbiAgICAgIHtjb3N0OiAxMDAwMCwgZGVzY3JpcHRpb246ICdZb3Ugd2lsbCBnYWluIHByb2dyZXNzIHNsb3dseSwgZXZlbiB3aGlsZSB0aGUgZ2FtZSBpcyBub3Qgb3Blbi4nfSxcbiAgICAgIHtjb3N0OiAxMDAwMDAsIGRlc2NyaXB0aW9uOiAnWW91IHdpbGwgZ2FpbiBwcm9ncmVzcyBzbGlnaHRseSBmYXN0ZXIsIGV2ZW4gd2hpbGUgdGhlIGdhbWUgaXMgbm90IG9wZW4uJ30sXG4gICAgICB7Y29zdDogMTAwMDAwMCwgZGVzY3JpcHRpb246ICdZb3Ugd2lsbCBnYWluIHByb2dyZXNzIG5vcm1hbGx5LCBldmVuIHdoaWxlIHRoZSBnYW1lIGlzIG5vdCBvcGVuLid9XG4gICAgXVxuICB9LFxuICAnQ29uZmlybWF0aW9uIERpYWxvZ3MnOiB7XG4gICAgY2F0ZWdvcnk6ICdUZWNoJyxcbiAgICByZXF1aXJlbWVudHM6IHsnSGVscCBNZW51JzogMH0sXG4gICAgbGV2ZWxzOiBbe2Nvc3Q6IDEwMDAwMCwgZGVzY3JpcHRpb246ICdZb3UgZ2V0IG5vdGlmaWVkIG9mIHBvdGVudGlhbGx5IGRhbmdlcm91cyBhY3Rpb25zLiBCZXdhcmUhJ31dXG4gIH0sXG4gICdDdXJyZW5jeSBOYW1lIENoYW5nZSc6IHtcbiAgICBjYXRlZ29yeTogJ0Nvc21ldGljJyxcbiAgICByZXF1aXJlbWVudHM6IHsnT3B0aW9ucyBNZW51JzogMH0sXG4gICAgbGV2ZWxzOiBbe2Nvc3Q6IDY1MDAwMCwgZGVzY3JpcHRpb246ICdJZiB5b3UgZGlzbGlrZSB0aGUgbmFtZSB1bml0cywgeW91IGNhbiBjaGFuZ2UgaXQhJ31dXG4gIH0sXG4gICdCYXNpYyBUaW1lciBCb29zdCc6IHtcbiAgICBjYXRlZ29yeTogJ1RlY2gnLFxuICAgIHJlcXVpcmVtZW50czogeydCYXNpYyBUaW1lcic6IDB9LFxuICAgIGxldmVsczogW1xuICAgICAge2Nvc3Q6IDEwMDAwLCBkZXNjcmlwdGlvbjogJ1lvdSBnZXQgbW9yZSBwcm9kdWN0aW9uIHZpYSB0aW1lciBtZXRob2RzLid9LFxuICAgICAge2Nvc3Q6IDUwMDAwMCwgZGVzY3JpcHRpb246ICdZb3UgZ2V0IGV2ZW4gbW9yZSBwcm9kdWN0aW9uIHZpYSB0aGUgdGltZXIuJ30sXG4gICAgICB7Y29zdDogMjUwMDAwMCwgZGVzY3JpcHRpb246ICdUaGUgdGltZXIgaXMgbm93IHF1aXRlIGx1Y3JhdGl2ZS4nfVxuICAgIF1cbiAgfSxcbiAgTm90aWZpY2F0aW9uczoge1xuICAgIGNhdGVnb3J5OiAnVGVjaCcsXG4gICAgcmVxdWlyZW1lbnRzOiB7J0Jhc2ljIEFuaW1hdGlvbic6IDAsIEljb25vZ3JhcGh5OiAwLCAnQmFzaWMgQ29sb3InOiAwLCAnQmFzaWMgU3R5bGUnOiAwfSxcbiAgICBsZXZlbHM6IFt7Y29zdDogNTAwMDAsIGRlc2NyaXB0aW9uOiAnR2V0IG5vdGlmaWVkIGFib3V0IHZhcmlvdXMgaGFwcGVuaW5ncyEnfV1cbiAgfSxcbiAgQWR2ZXJ0aXNlbWVudHM6IHtcbiAgICBjYXRlZ29yeTogJ1RlY2gnLFxuICAgIHJlcXVpcmVtZW50czoge05vdGlmaWNhdGlvbnM6IDB9LFxuICAgIGxldmVsczogW3tjb3N0OiAyMDAwMCwgZGVzY3JpcHRpb246ICdBZHZlcnRpc2VtZW50cyBmb3Igb3RoZXIsIHJlbGF0ZWQgZ2FtZXMhJ31dXG4gIH0sXG4gIEFkYmxvY2tlcjoge1xuICAgIGNhdGVnb3J5OiAnVGVjaCcsXG4gICAgcmVxdWlyZW1lbnRzOiB7QWR2ZXJ0aXNlbWVudHM6IDB9LFxuICAgIGxldmVsczogW3tjb3N0OiAyMDAwMDAsIGRlc2NyaXB0aW9uOiAnQWRzIGdvdCB5b3UgZG93bj8gVHVybiB0aGVtIG9mZiB3aXRoIHRoaXMgZmFuY3kgdXBncmFkZSEnfV1cbiAgfSxcbiAgJ1RhYmJlZCBPdXRwdXQnOiB7XG4gICAgY2F0ZWdvcnk6ICdUZWNoJyxcbiAgICByZXF1aXJlbWVudHM6IHsnQmV0dGVyIExheW91dCc6IDAsICdCYXNpYyBTdHlsZSc6IDB9LFxuICAgIGxldmVsczogW3tjb3N0OiAyMDAwMDAsIGRlc2NyaXB0aW9uOiAnUHJvZHVjZSBzb21lIHRhYnMgZm9yIHlvdXIgb3V0cHV0IHNlY3Rpb24hIE5vdGUsIHRoaXMgb25seSBjb21lcyB3aXRoIG9uZSB0YWIgLS0gdGhlIG9uZSB5b3UgaGF2ZSEnfV1cbiAgfSxcbiAgJ1Byb2R1Y3Rpb24gT3ZlciBUaW1lJzoge1xuICAgIGNhdGVnb3J5OiAnVGVjaCcsXG4gICAgcmVxdWlyZW1lbnRzOiB7J1RhYmJlZCBPdXRwdXQnOiAwLCAnTnVtYmVyIEZvcm1hdHRpbmcnOiAwfSxcbiAgICBsZXZlbHM6IFt7Y29zdDogMjAwMDAwMCwgZGVzY3JpcHRpb246ICdQcm9kdWNlIGEgbmV3IHRhYiB0aGF0IHNob3dzIHlvdXIgcHJvZHVjdGlvbiBvdmVyIHRpbWUhJ31dXG4gIH0sXG4gICdQcm9kdWN0aW9uIEJyZWFrZG93bic6IHtcbiAgICBjYXRlZ29yeTogJ1RlY2gnLFxuICAgIHJlcXVpcmVtZW50czogeydUYWJiZWQgT3V0cHV0JzogMCwgJ051bWJlciBGb3JtYXR0aW5nJzogMH0sXG4gICAgbGV2ZWxzOiBbe2Nvc3Q6IDIwMDAwMDAsIGRlc2NyaXB0aW9uOiAnUHJvZHVjZSBhIG5ldyB0YWIgdGhhdCBzaG93cyB5b3VyIHByb2R1Y3Rpb24gYnJlYWtkb3duISd9XVxuICB9LFxuICAnUHJvZHVjdGlvbiBIaXN0b3J5Jzoge1xuICAgIGNhdGVnb3J5OiAnVGVjaCcsXG4gICAgcmVxdWlyZW1lbnRzOiB7J1Byb2R1Y3Rpb24gQnJlYWtkb3duJzogMH0sXG4gICAgbGV2ZWxzOiBbXG4gICAgICB7Y29zdDogNTAwMDAsIGRlc2NyaXB0aW9uOiAnU2xpZ2h0bHkgaW1wcm92ZSB5b3VyIGhpc3RvcmljYWwgZGF0YSEnfSxcbiAgICAgIHtjb3N0OiAxMjUwMDAsIGRlc2NyaXB0aW9uOiAnU2xpZ2h0bHkgaW1wcm92ZSB5b3VyIGhpc3RvcmljYWwgZGF0YSEnfVxuICAgIF1cbiAgfSxcbiAgJ1Byb2R1Y3Rpb24gTGFiZWxzJzoge1xuICAgIGNhdGVnb3J5OiAnVGVjaCcsXG4gICAgcmVxdWlyZW1lbnRzOiB7J1Byb2R1Y3Rpb24gT3ZlciBUaW1lJzogMH0sXG4gICAgbGV2ZWxzOiBbe2Nvc3Q6IDUwMDAwLCBkZXNjcmlwdGlvbjogJ0dldCBzb21lIGxhYmVscyBvbiB0aGF0IGNoYXJ0ISd9XVxuICB9LFxuICAnQnJlYWtkb3duIExhYmVscyc6IHtcbiAgICBjYXRlZ29yeTogJ1RlY2gnLFxuICAgIHJlcXVpcmVtZW50czogeydQcm9kdWN0aW9uIEJyZWFrZG93bic6IDB9LFxuICAgIGxldmVsczogW3tjb3N0OiA1MDAwMCwgZGVzY3JpcHRpb246ICdHZXQgc29tZSBsYWJlbHMgb24gdGhhdCBjaGFydCEnfV1cbiAgfSxcbiAgJ1VwZ3JhZGUgVHJlZSc6IHtcbiAgICBjYXRlZ29yeTogJ1RlY2gnLFxuICAgIHJlcXVpcmVtZW50czogeydUYWJiZWQgT3V0cHV0JzogMCwgJ0Jhc2ljIENvbG9yJzogMCwgJ1Rvb2x0aXBzJzogMCwgJ0Jhc2ljIEFuaW1hdGlvbic6IDB9LFxuICAgIGxldmVsczogW3tjb3N0OiAxMDAwMDAsIGRlc2NyaXB0aW9uOiAnVmlzdWFsaXplIHRoZSB1cGdyYWRlIHRyZWUhIE9vb2gsIHByZXR0eSEnfV1cbiAgfVxufTtcbiJdfQ==
