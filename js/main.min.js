(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./src/js/main.js":[function(require,module,exports){
'use strict';

var upgrades = require('./upgrades');
var gameState = require('./gamestate');
var gameTimer = require('./gametimer');
var gainCalculator = require('./gaincalculator');
var functionBuilder = require('./functionbuilder');
var animatedFlyTip = require('./animatedflytip');
var favico = require('./favico');
var gameController = require('./gamecontroller');
var upgradeManager = require('./upgrademanager');
var adManager = require('./admanager');
var chartConfigs = require('./chartconfigs');
var upgradePath = require('./upgradepath');
var sankey = require('./sankey');
var achievements = require('./achievements');

angular.module('c', ['ui.bootstrap', 'hljs', 'LocalStorageModule', 'ngTable', 'angularMoment', 'jlareau.pnotify', 'highcharts-ng']).constant('Upgrades', upgrades).constant('Achievements', achievements).constant('Version', '0.0.1').config(['notificationServiceProvider', function (notificationServiceProvider) {
  notificationServiceProvider.setDefaults({
    addclass: 'stack-bar-bottom',
    width: '70%',
    styling: 'fontawesome'
  });
}]).directive('sankey', sankey).service('favico', favico).service('AnimatedFlyTip', animatedFlyTip).service('GameState', gameState).service('AdManager', adManager).service('ChartConfigs', chartConfigs).service('GameTimer', gameTimer).service('UpgradePath', upgradePath).service('UpgradeManager', upgradeManager).service('GainCalculator', gainCalculator).service('FunctionBuilder', functionBuilder).controller('Game', gameController);

},{"./achievements":"/home/seiyria/projects/c/src/js/achievements.js","./admanager":"/home/seiyria/projects/c/src/js/admanager.js","./animatedflytip":"/home/seiyria/projects/c/src/js/animatedflytip.js","./chartconfigs":"/home/seiyria/projects/c/src/js/chartconfigs.js","./favico":"/home/seiyria/projects/c/src/js/favico.js","./functionbuilder":"/home/seiyria/projects/c/src/js/functionbuilder.js","./gaincalculator":"/home/seiyria/projects/c/src/js/gaincalculator.js","./gamecontroller":"/home/seiyria/projects/c/src/js/gamecontroller.js","./gamestate":"/home/seiyria/projects/c/src/js/gamestate.js","./gametimer":"/home/seiyria/projects/c/src/js/gametimer.js","./sankey":"/home/seiyria/projects/c/src/js/sankey.js","./upgrademanager":"/home/seiyria/projects/c/src/js/upgrademanager.js","./upgradepath":"/home/seiyria/projects/c/src/js/upgradepath.js","./upgrades":"/home/seiyria/projects/c/src/js/upgrades.js"}],"/home/seiyria/projects/c/src/extjs/sankeyfunctionality.js":[function(require,module,exports){
"use strict";

module.exports = function () {
  var sankey = {},
      nodeWidth = 24,
      nodePadding = 8,
      size = [1, 1],
      nodes = [],
      links = [];

  sankey.nodeWidth = function (_) {
    if (!arguments.length) return nodeWidth;
    nodeWidth = +_;
    return sankey;
  };

  sankey.nodePadding = function (_) {
    if (!arguments.length) return nodePadding;
    nodePadding = +_;
    return sankey;
  };

  sankey.nodes = function (_) {
    if (!arguments.length) return nodes;
    nodes = _;
    return sankey;
  };

  sankey.links = function (_) {
    if (!arguments.length) return links;
    links = _;
    return sankey;
  };

  sankey.size = function (_) {
    if (!arguments.length) return size;
    size = _;
    return sankey;
  };

  sankey.layout = function (iterations) {
    computeNodeLinks();
    computeNodeValues();
    computeNodeBreadths();
    computeNodeDepths(iterations);
    computeLinkDepths();
    return sankey;
  };

  sankey.relayout = function () {
    computeLinkDepths();
    return sankey;
  };

  sankey.link = function () {
    var curvature = 0.5;

    function link(d) {
      var x0 = d.source.x + d.source.dx,
          x1 = d.target.x,
          xi = d3.interpolateNumber(x0, x1),
          x2 = xi(curvature),
          x3 = xi(1 - curvature),
          y0 = d.source.y + d.sy + d.dy / 2,
          y1 = d.target.y + d.ty + d.dy / 2;
      return "M" + x0 + "," + y0 + "C" + x2 + "," + y0 + " " + x3 + "," + y1 + " " + x1 + "," + y1;
    }

    link.curvature = function (_) {
      if (!arguments.length) return curvature;
      curvature = +_;
      return link;
    };

    return link;
  };

  // Populate the sourceLinks and targetLinks for each node.
  // Also, if the source and target are not objects, assume they are indices.
  function computeNodeLinks() {
    nodes.forEach(function (node) {
      node.sourceLinks = [];
      node.targetLinks = [];
    });
    links.forEach(function (link) {
      var source = link.source,
          target = link.target;
      if (typeof source === "number") source = link.source = nodes[link.source];
      if (typeof target === "number") target = link.target = nodes[link.target];
      source.sourceLinks.push(link);
      target.targetLinks.push(link);
    });
  }

  // Compute the value (size) of each node by summing the associated links.
  function computeNodeValues() {
    nodes.forEach(function (node) {
      node.value = Math.max(d3.sum(node.sourceLinks, value), d3.sum(node.targetLinks, value));
    });
  }

  // Iteratively assign the breadth (x-position) for each node.
  // Nodes are assigned the maximum breadth of incoming neighbors plus one;
  // nodes with no incoming links are assigned breadth zero, while
  // nodes with no outgoing links are assigned the maximum breadth.
  function computeNodeBreadths() {
    var remainingNodes = nodes,
        nextNodes,
        x = 0;

    while (remainingNodes.length) {
      nextNodes = [];
      remainingNodes.forEach(function (node) {
        node.x = x;
        node.dx = nodeWidth;
        node.sourceLinks.forEach(function (link) {
          if (nextNodes.indexOf(link.target) < 0) {
            nextNodes.push(link.target);
          }
        });
      });
      remainingNodes = nextNodes;
      ++x;
    }

    //
    moveSinksRight(x);
    scaleNodeBreadths((size[0] - nodeWidth) / (x - 1));
  }

  function moveSourcesRight() {
    nodes.forEach(function (node) {
      if (!node.targetLinks.length) {
        node.x = d3.min(node.sourceLinks, function (d) {
          return d.target.x;
        }) - 1;
      }
    });
  }

  function moveSinksRight(x) {
    nodes.forEach(function (node) {
      if (!node.sourceLinks.length) {
        node.x = x - 1;
      }
    });
  }

  function scaleNodeBreadths(kx) {
    nodes.forEach(function (node) {
      node.x *= kx;
    });
  }

  function computeNodeDepths(iterations) {
    var nodesByBreadth = d3.nest().key(function (d) {
      return d.x;
    }).sortKeys(d3.ascending).entries(nodes).map(function (d) {
      return d.values;
    });

    //
    initializeNodeDepth();
    resolveCollisions();
    for (var alpha = 1; iterations > 0; --iterations) {
      relaxRightToLeft(alpha *= 0.99);
      resolveCollisions();
      relaxLeftToRight(alpha);
      resolveCollisions();
    }

    function initializeNodeDepth() {
      var ky = d3.min(nodesByBreadth, function (nodes) {
        return (size[1] - (nodes.length - 1) * nodePadding) / d3.sum(nodes, value);
      });

      nodesByBreadth.forEach(function (nodes) {
        nodes.forEach(function (node, i) {
          node.y = i;
          node.dy = node.value * ky;
        });
      });

      links.forEach(function (link) {
        link.dy = link.value * ky;
      });
    }

    function relaxLeftToRight(alpha) {
      nodesByBreadth.forEach(function (nodes, breadth) {
        nodes.forEach(function (node) {
          if (node.targetLinks.length) {
            var y = d3.sum(node.targetLinks, weightedSource) / d3.sum(node.targetLinks, value);
            node.y += (y - center(node)) * alpha;
          }
        });
      });

      function weightedSource(link) {
        return center(link.source) * link.value;
      }
    }

    function relaxRightToLeft(alpha) {
      nodesByBreadth.slice().reverse().forEach(function (nodes) {
        nodes.forEach(function (node) {
          if (node.sourceLinks.length) {
            var y = d3.sum(node.sourceLinks, weightedTarget) / d3.sum(node.sourceLinks, value);
            node.y += (y - center(node)) * alpha;
          }
        });
      });

      function weightedTarget(link) {
        return center(link.target) * link.value;
      }
    }

    function resolveCollisions() {
      nodesByBreadth.forEach(function (nodes) {
        var node,
            dy,
            y0 = 0,
            n = nodes.length,
            i;

        // Push any overlapping nodes down.
        nodes.sort(ascendingDepth);
        for (i = 0; i < n; ++i) {
          node = nodes[i];
          dy = y0 - node.y;
          if (dy > 0) node.y += dy;
          y0 = node.y + node.dy + nodePadding;
        }

        // If the bottommost node goes outside the bounds, push it back up.
        dy = y0 - nodePadding - size[1];
        if (dy > 0) {
          y0 = node.y -= dy;

          // Push any overlapping nodes back up.
          for (i = n - 2; i >= 0; --i) {
            node = nodes[i];
            dy = node.y + node.dy + nodePadding - y0;
            if (dy > 0) node.y -= dy;
            y0 = node.y;
          }
        }
      });
    }

    function ascendingDepth(a, b) {
      return a.y - b.y;
    }
  }

  function computeLinkDepths() {
    nodes.forEach(function (node) {
      node.sourceLinks.sort(ascendingTargetDepth);
      node.targetLinks.sort(ascendingSourceDepth);
    });
    nodes.forEach(function (node) {
      var sy = 0,
          ty = 0;
      node.sourceLinks.forEach(function (link) {
        link.sy = sy;
        sy += link.dy;
      });
      node.targetLinks.forEach(function (link) {
        link.ty = ty;
        ty += link.dy;
      });
    });

    function ascendingSourceDepth(a, b) {
      return a.source.y - b.source.y;
    }

    function ascendingTargetDepth(a, b) {
      return a.target.y - b.target.y;
    }
  }

  function center(node) {
    return node.y + node.dy / 2;
  }

  function value(link) {
    return link.value;
  }

  return sankey;
};

},{}],"/home/seiyria/projects/c/src/js/achievements.js":[function(require,module,exports){
'use strict';

module.exports = {
  'Upgradus Maximus': {
    attained: 'Purchase all upgrades.'
  },
  'Ad Viewer Extraordinaire': {
    attained: 'View all ads in one gameplay session.'
  },
  'Nest Egg': {
    attained: 'Obtain 100 million units.'
  },
  'Ancient History': {
    attained: 'Have a savefile older than 3 days.'
  },
  'Upgrade Complete': {
    attained: 'Unlock achievements.'
  },
  'Pumpkin Eater': {
    attained: 'Cheat.'
  },
  'Think Of The Children': {
    attained: 'Turn off ads.'
  },
  'Personalized Touch': {
    attained: 'Rename your units.'
  },
  'Over Achiever': {
    attained: 'Achieve all achievements.'
  }
};

},{}],"/home/seiyria/projects/c/src/js/admanager.js":[function(require,module,exports){
'use strict';

var ads = require('./ads');

var adManager = function adManager($interval, notificationService, GameState) {

  var viewed = [];

  $interval(function () {

    if (!GameState.upgrade.has('Advertisements')) {
      return;
    }
    if (!GameState.adSet.get()) {
      return;
    }

    var ad = _.sample(ads);
    viewed.push(ad.name);
    viewed = _.uniq(viewed);
    if (viewed.length === ads.length) {
      GameState.achieve('Ad Viewer Extraordinaire');
    }

    notificationService.notifyWithDefaults({
      title: '' + ad.name + ' <a target="_blank" href="' + ad.url + '"><span class=\'fa fa-external-link\'></span></a>',
      text: ad.text
    });
  }, 180000); //6 minutes

  return {};
};

adManager.$inject = ['$interval', 'notificationService', 'GameState'];

module.exports = adManager;

},{"./ads":"/home/seiyria/projects/c/src/js/ads.js"}],"/home/seiyria/projects/c/src/js/ads.js":[function(require,module,exports){
'use strict';

module.exports = [{
  name: 'IdleLands',
  url: 'http://webfe.idle.land',
  text: 'From the creator of this game, check out IdleLands, his prior project!'
}, {
  name: 'Conspiracy Clicker',
  url: 'http://deathraygames.com/play-online/miniLD48/',
  text: 'Made during a 48 hour period, this game captures the attention of that little conspiracist inside of us all. Find out how the real world operates.'
}, {
  name: 'Candy Empirical',
  url: 'http://candy-emperical.appspot.com/',
  text: 'A new incremental game with candy that makes candy. Start out with taffy, then progress through all the candy types.'
}, {
  name: 'Legend of the Fallen Warrior',
  url: 'https://tarnos12.github.io/project/',
  text: 'Surrounded by unfamiliar faces, the fallen warrior must try his best to survive. Will his skills be enough to help him through or will he have to grow and learn new talents in order to escape?'
}, {
  name: 'Critter Mound',
  url: 'http://yoyz.com/critter/',
  text: 'Breed new critters. Breed stronger critters. Destroy your enemies.'
}, {
  name: 'Progress Quest',
  url: 'http://progressquest.com/play/',
  text: 'Progress Quest is an antic and fantastical computer role-playing game. It\'s well worth the time you\'ll spend playing it.'
}, {
  name: 'Clickpocalypse 2',
  url: 'http://minmaxia.com/c2/',
  text: 'A fighter, ranger, wizard and a priest set out to purge the land of evil... one dungeon at a time.'
}];

},{}],"/home/seiyria/projects/c/src/js/animatedflytip.js":[function(require,module,exports){
'use strict';

var animatedFlyTip = function animatedFlyTip($filter) {
  return {
    fly: function fly(num) {
      var useSeparator = arguments[1] === undefined ? false : arguments[1];

      var $element = $('<div />');

      var numString = num;
      if (useSeparator) {
        numString = $filter('number')(numString, 0);
      }

      if (num < 0) {
        $element.addClass('text-danger');
        $element.html(numString);
      } else if (num > 0) {
        $element.addClass('text-success');
        $element.html('+' + numString);
      }

      $element.css('position', 'absolute');
      $('body').append($element);

      var $base = $('.navbar-unit:visible');
      if (!$base.length) {
        return;
      }

      $element.offset({ left: $base.offset().left, top: $base.offset().top });

      $element.animate({ top: '60px' });
      $element.animate({ opacity: 0, top: '60px' }, 500, 'swing', function () {
        $(this).remove();
      });
    }
  };
};

animatedFlyTip.$inject = ['$filter'];

module.exports = animatedFlyTip;

},{}],"/home/seiyria/projects/c/src/js/chartconfigs.js":[function(require,module,exports){
'use strict';

var chartConfigs = function chartConfigs($q, GameState) {
  var defer = $q.defer();

  Highcharts.setOptions({
    global: {
      useUTC: false
    },
    lang: {
      thousandsSep: ','
    }
  });

  var productionValues = function productionValues() {
    return _.pairs(GameState.sourcesGet.get());
  };

  var production = {
    defaultObj: {
      options: {
        chart: {
          type: 'pie'
        },
        credits: {
          enabled: false
        },
        plotOptions: {
          pie: {
            dataLabels: {
              enabled: false
            },
            showInLegend: false
          }
        }
      },
      title: {
        text: ''
      },
      series: [{
        name: 'Data',
        data: productionValues()
      }]
    },

    chart: function chart() {
      return this.defaultObj;
    }
  };

  var overTimeValues = function overTimeValues() {
    return GameState.historyGet.get();
  };

  var overTime = {
    defaultObj: {
      options: {
        chart: {
          type: 'line'
        },
        legend: {
          enabled: false
        }
      },
      yAxis: {
        title: {
          text: ''
        }
      },
      xAxis: {
        type: 'datetime',
        tickPixelInterval: 150,
        title: {
          text: ''
        }
      },
      title: {
        text: ''
      },
      series: [{
        name: 'Data',
        data: overTimeValues()
      }]
    },
    chart: function chart() {
      return this.defaultObj;
    }
  };

  var checkDefaults = function checkDefaults() {
    if (GameState.upgrade.has('Production Labels')) {
      overTime.defaultObj.yAxis.title.text = 'Production';
      overTime.defaultObj.xAxis.title.text = 'Timestamp';
    }

    if (GameState.upgrade.has('Breakdown Labels')) {
      production.defaultObj.options.plotOptions.pie.dataLabels.enabled = true;
      production.defaultObj.options.plotOptions.pie.showInLegend = true;
    }
  };

  checkDefaults();

  GameState.upgrade.watch().then(null, null, checkDefaults);

  GameState.unit.watch().then(null, null, function () {
    defer.notify({ overTime: overTimeValues(), production: productionValues() });
  });

  return {
    get: function get() {
      return { overTime: overTime.chart(), production: production.chart() };
    },
    watch: function watch() {
      return defer.promise;
    }
  };
};

chartConfigs.$inject = ['$q', 'GameState'];

module.exports = chartConfigs;

},{}],"/home/seiyria/projects/c/src/js/favico.js":[function(require,module,exports){
'use strict';

var favico = function favico() {
  var favico = new Favico({
    animation: 'fade'
  });

  var currentNum = 0;

  var badge = function badge(num) {
    if (num === currentNum) {
      return;
    }
    currentNum = num;
    favico.badge(num);
  };
  var reset = function reset() {
    favico.reset();
  };

  return {
    badge: badge,
    reset: reset
  };
};

module.exports = favico;

},{}],"/home/seiyria/projects/c/src/js/functionbuilder.js":[function(require,module,exports){
'use strict';

var functionBuilder = function functionBuilder(GameState, GainCalculator, $window) {
  return {
    build: function build() {

      var upgrade = GameState.upgrade;

      var unitText = '' + _.camelCase(GameState.currencySet.get()) + 's';
      var _unitName = unitText;

      var functionHeader = ['', ''];
      if (GameState.upgrade.has('Function')) {
        functionHeader = ['function increaseUnits() {', '}'];
      }

      var iterationHeader = ['', ''];
      if (GameState.upgrade.has('Basic Iteration')) {
        iterationHeader = ['for(var i = 0; i < ' + GainCalculator.iteration(upgrade) + '; i++) {', '}'];
      }

      var timeout = '';
      if (GameState.upgrade.has('Basic Timer')) {
        var timeoutText = 'increaseUnits';

        if (GameState.upgrade.has('Basic Timer Boost')) {
          timeoutText = 'function massiveGains() {\n  for(var i = 0; i < ' + GainCalculator.timerBoost(upgrade) + '; i++) {\n    ' + timeoutText + '();\n  }\n}';
        }

        timeout = '$interval(' + timeoutText + ', ' + GainCalculator.timer(upgrade) + ');\n';
      }

      var animationHeader = ['', ''];
      if (GameState.upgrade.has('Basic Animation')) {
        animationHeader = ['var totalUnitsGained = 0;', '' + _unitName + ' += totalUnitsGained;\n  animateUnitChange(totalUnitsGained);'];
        unitText = 'totalUnitsGained';
      }

      var saveHeader = ['', ''];
      if (GameState.upgrade.has('Save', 1)) {
        saveHeader = ['\nvar currentTick = 0;', '\n  if(++currentTick % 10 === 0) {\n    currentTick = 0;\n    save();\n  }'];
      }

      if (GameState.upgrade.has('Save', 3)) {
        saveHeader = ['', '\n  save();'];
      }

      // dump it on the page. it's an "exploit"
      $window.increaseUnits = function () {
        var mult = arguments[0] === undefined ? 1 : arguments[0];
        var source = arguments[1] === undefined ? 'Cheating' : arguments[1];

        GameState.unit.inc(mult * GainCalculator.all(upgrade), true, source);
        if (source === 'Cheating') {
          GameState.achieve('Pumpkin Eater');
        }
      };

      return '' + timeout + '' + saveHeader[0] + '\n' + functionHeader[0] + '\n  ' + animationHeader[0] + '\n  ' + iterationHeader[0] + '\n    ' + unitText + ' += ' + GainCalculator.boost(upgrade) + ';\n  ' + iterationHeader[1] + '\n  ' + saveHeader[1] + '\n  ' + animationHeader[1] + '\n' + functionHeader[1] + '\n';
    }
  };
};

functionBuilder.$inject = ['GameState', 'GainCalculator', '$window'];

module.exports = functionBuilder;

},{}],"/home/seiyria/projects/c/src/js/gaincalculator.js":[function(require,module,exports){
'use strict';

var gainCalculator = function gainCalculator() {

  var boost = function boost(upgrade) {
    return Math.max(1, Math.pow(upgrade.getKey('Basic Boost') || 0, 2) + 1);
  };

  var iteration = function iteration(upgrade) {
    var iterLevel = upgrade.getKey('Basic Iteration');
    if (!iterLevel) {
      return 1;
    }
    return Math.pow(2, iterLevel + 1);
  };

  var timerBoost = function timerBoost(upgrade) {
    return Math.max(1, Math.pow(upgrade.getKey('Basic Timer Boost') || 0, 2) + 1);
  };

  var timer = function timer(upgrade) {
    var basicReduction = 0.05 * upgrade.getKey('Basic Timer');
    var advancedReduction = 0.15 * upgrade.getKey('Advanced Timer');
    advancedReduction = _.isNaN(advancedReduction) ? 0 : advancedReduction;
    return 30000 - Math.round(30000 * (basicReduction + advancedReduction));
  };

  var maxHistory = function maxHistory(upgrade) {
    return 10 + 5 * (upgrade.getKey('Production History') || 0);
  };

  return {
    boost: boost,
    iteration: iteration,
    timer: timer,
    timerBoost: timerBoost,
    maxHistory: maxHistory,
    all: function all(upgrade) {
      return boost(upgrade) * iteration(upgrade);
    }
  };
};

module.exports = gainCalculator;

},{}],"/home/seiyria/projects/c/src/js/gamecontroller.js":[function(require,module,exports){
'use strict';

var gameController = function gameController($scope, $window, $interval, $filter, $http, $modal, GameState, ChartConfigs, GameTimer, UpgradeManager, FunctionBuilder, UpgradePath, NgTableParams, ACHIEVEMENTS) {
  $scope.ACHIEVEMENTS = ACHIEVEMENTS;
  $scope._visibleUpgrades = [];
  $scope.groupVisibleHash = {};
  $scope.tabActive = [true, false, false, false];

  $http.get('version.json').then(function (res) {
    return $scope.versionInfo = res.data;
  });

  $scope.ads = GameState.adSet.get();
  $scope.setAds = function (val) {
    $scope.ads = val;
    GameState.adSet.set(val);
    if (!val) {
      GameState.achieve('Think Of The Children');
    }
    $scope.save();
  };

  $scope.tableParams = new NgTableParams({
    page: 1,
    count: 1000
  }, {
    groupBy: 'category',
    total: $scope._visibleUpgrades.length,
    getData: function getData($defer, params) {
      var data = $scope._visibleUpgrades;

      var orderedData = params.sorting() ? $filter('orderBy')(data, params.orderBy()) : data;

      var filteredData = params.filter() ? $filter('filter')(orderedData, params.filter()) : orderedData;

      params.total($scope._visibleUpgrades.length);

      $defer.resolve(filteredData.slice((params.page() - 1) * params.count(), params.page() * params.count()));
    }
  });

  $scope.hasUpgrade = function (key) {
    var level = arguments[1] === undefined ? 0 : arguments[1];

    return GameState.upgrade.has(key, level);
  };

  $scope.hasUnits = function (amt) {
    return GameState.unit.has(amt);
  };

  $scope.buyUpgrade = function (upgName) {
    var levels = arguments[1] === undefined ? 1 : arguments[1];

    do {
      GameState.upgrade.inc(upgName);
    } while (--levels > 0);
    if (upgName === 'Achievements') {
      GameState.achieve('Upgrade Complete');
    }
  };

  $scope.gainUnits = function () {
    $window.increaseUnits(1, 'Click');
  };

  $scope.save = function () {
    GameState.save();
  };

  $scope.refresh = function () {
    $scope._units = GameState.unit.get();

    var newUpgrades = UpgradeManager.visible();
    var visible = _.pluck($scope._visibleUpgrades, 'name');
    var newPlucked = _.pluck(newUpgrades, 'name');
    if (newPlucked.length !== visible.length || _.difference(newPlucked, visible).length > 0) {
      $scope._visibleUpgrades = newUpgrades;
    }
    $scope._function = FunctionBuilder.build();
    $scope.tableParams.reload();

    $scope.upgrades = UpgradeManager.upgrades();
    $scope.maxUpgrades = UpgradeManager.maxUpgrades();
    if ($scope.upgrades.length >= $scope.maxUpgrades) {
      GameState.achieve('Upgradus Maximus');
    }
    $scope.achievements = GameState.achievementGet.get();
    $scope.spentOnUpgrades = _.reduce($scope.upgrades, function (prev, cur) {
      return prev + cur.cost;
    }, 0);
  };

  $scope.openModal = function (modal) {
    $modal.open({
      templateUrl: 'modal-' + modal,
      scope: $scope
    });
  };

  $scope.refresh();
  $scope._timer = 0;
  $scope._timermax = 0;
  var timerInterval;

  GameState.unit.watch().then(null, null, $scope.refresh);
  GameState.upgrade.watch().then(null, null, $scope.refresh);

  GameTimer.watch().then(null, null, function (newTimerValue) {
    $scope._timer = $scope._timerMax = newTimerValue;
    if (timerInterval) {
      $interval.cancel(timerInterval);
    }
    timerInterval = $interval(function () {
      $scope._timer -= 100;
    }, 100);
  });

  $scope.chartData = ChartConfigs.get();

  ChartConfigs.watch().then(null, null, function (chartData) {
    _.each(_.keys(chartData), function (key) {
      $scope.chartData[key].series[0].data = chartData[key];
    });
  });

  $scope.saveObject = function () {
    return GameState.buildSaveObject();
  };

  $scope.debugInfo = $window.dumpDebugInfo = function () {
    return JSON.stringify($scope.saveObject(), null, 4);
  };

  $scope.resetGame = function () {
    var callback = arguments[0] === undefined ? function () {} : arguments[0];

    var finalCallback = function finalCallback() {
      GameState.hardReset();
      $scope.refresh();
      $scope.currencyName = GameState.currencySet.get();
      callback();
    };

    if ($scope.hasUpgrade('Confirmation Dialogs')) {
      bootbox.confirm('Are you sure you want to hard reset? Nothing will be saved.', function (result) {
        if (!result) {
          return;
        }
        finalCallback();
      });
    } else {
      finalCallback();
    }
  };

  $scope.currencyName = GameState.currencySet.get();
  $scope.changeCurrency = function () {
    bootbox.prompt({ title: 'What would you like to call the currency?', value: $scope.currencyName, callback: function callback(result) {
        if (!result || !result.trim()) {
          return;
        }
        GameState.currencySet.set(result);
        $scope.currencyName = GameState.currencySet.get();
        GameState.achieve('Personalized Touch');
        $scope.$digest();
        $scope.refresh();
      } });
  };
};

gameController.$inject = ['$scope', '$window', '$interval', '$filter', '$http', '$modal', 'GameState', 'ChartConfigs', 'GameTimer', 'UpgradeManager', 'FunctionBuilder', 'UpgradePath', 'ngTableParams', 'Achievements'];

module.exports = gameController;

},{}],"/home/seiyria/projects/c/src/js/gamestate.js":[function(require,module,exports){
'use strict';

var gameState = function gameState($q, notificationService, $filter, UPGRADES, ACHIEVEMENTS, GainCalculator, localStorage, AnimatedFlyTip) {

  var getNewState = function getNewState() {
    return {
      upgrades: {},
      units: 0,
      start: Date.now(),
      lastSave: Date.now(),
      currencyName: 'Unit',
      ads: true,
      sources: {},
      history: [],
      achievements: []
    };
  };

  var currentState = getNewState();

  var upgradeDefer = $q.defer();
  var unitDefer = $q.defer();

  var buildSaveObject = function buildSaveObject() {
    return currentState;
  };

  var save = function save() {
    currentState.lastSave = Date.now();
    localStorage.set('game', buildSaveObject());
  };

  var achieve = (function (_achieve) {
    function achieve(_x) {
      return _achieve.apply(this, arguments);
    }

    achieve.toString = function () {
      return _achieve.toString();
    };

    return achieve;
  })(function (name) {
    if (!upgrade.has('Achievements')) {
      return;
    }
    if (_.contains(currentState.achievements, name)) {
      return;
    }
    currentState.achievements.push(name);
    notificationService.info('Congratulations! You achieved "' + name + '."');
    save();

    if (currentState.achievements.length === _.keys(ACHIEVEMENTS).length - 1) {
      achieve('Over Achiever');
    }
  });

  var hardReset = function hardReset() {
    currentState = getNewState();
    save();
  };

  var load = function load() {
    var state = localStorage.get('game');

    if (!state) {
      return;
    }

    _.assign(currentState, state);

    var days = (Date.now() - currentState.start) / (24 * 60 * 60 * 1000);
    if (days > 3) {
      achieve('Ancient History');
    }

    if (!upgrade.has('Offline Progress')) {
      return;
    }

    var diff = Date.now() - state.lastSave;
    var multiplier = 0.25 + 0.25 * upgrade.getKey('Offline Progress');
    var timersElapsed = Math.floor(diff / GainCalculator.timer(upgrade));
    var gain = timersElapsed * multiplier * GainCalculator.all(upgrade) * GainCalculator.timerBoost(upgrade);

    if (gain <= 0) {
      return;
    }

    unit.inc(gain, false, 'Offline Progress');
    save();

    if (upgrade.has('Notifications')) {
      var numString = gain;
      if (upgrade.has('Number Formatting')) {
        numString = $filter('number')(numString, 0);
      }

      notificationService.notifyWithDefaults({
        type: 'success',
        title: 'Offline Progression',
        text: 'You gained ' + numString + ' ' + currentState.currencyName + 's while offline. Welcome back!'
      });
    }
  };

  var achievementGet = {
    get: function get() {
      return currentState.achievements;
    }
  };

  var historyGet = {
    get: function get() {
      return currentState.history;
    }
  };

  var sourcesGet = {
    get: function get() {
      return currentState.sources;
    }
  };

  var currencySet = {
    set: function set(newName) {
      currentState.currencyName = newName;save();
    },
    get: function get() {
      return currentState.currencyName;
    }
  };

  var adSet = {
    set: function set(isSet) {
      currentState.ads = isSet;
    },
    get: function get() {
      return currentState.ads;
    }
  };

  var upgrade = {
    has: function has(key) {
      var level = arguments[1] === undefined ? 0 : arguments[1];
      return currentState.upgrades[key] > level;
    },
    get: function get() {
      return currentState.upgrades;
    },
    getKey: function getKey(key) {
      return currentState.upgrades[key];
    },
    inc: function inc(key) {

      var nextLevel = currentState.upgrades[key] || 0;

      var cost = _.isFunction(UPGRADES[key].levels) ? UPGRADES[key].levels(nextLevel).cost : UPGRADES[key].levels[nextLevel].cost;
      if (currentState.units < cost) {
        return;
      }

      if (!currentState.upgrades[key]) {
        currentState.upgrades[key] = 0;
      }
      currentState.upgrades[key]++;
      unit.inc(-cost);
      upgradeDefer.notify({ key: key, level: currentState.upgrades[key], all: currentState.upgrades });
    },
    watch: function watch() {
      return upgradeDefer.promise;
    }
  };

  var manageHistory = function manageHistory() {
    var max = GainCalculator.maxHistory(upgrade);

    currentState.history.push({ x: Date.now(), y: currentState.units });
    if (currentState.history.length > max) {
      currentState.history.shift();
    }
  };

  var tick = 0;

  var unit = {
    has: function has(amt) {
      return currentState.units > amt;
    },
    inc: function inc(amt) {
      var display = arguments[1] === undefined ? true : arguments[1];
      var source = arguments[2] === undefined ? 'Click' : arguments[2];

      currentState.units += amt;

      if (currentState.units > 100000000) {
        achieve('Nest Egg');
      }

      manageHistory();

      if (!currentState.sources[source]) {
        currentState.sources[source] = 0;
      }

      if (amt > 0) {
        currentState.sources[source] += amt;
      }

      unitDefer.notify(currentState.units);

      if (upgrade.has('Basic Animation') && display) {
        AnimatedFlyTip.fly(amt, upgrade.has('Number Formatting'));
      }

      if (upgrade.has('Save', 1) && !upgrade.has('Save', 3)) {
        if (++tick % 10 === 0) {
          tick = 0;
          save();
        }
      }

      if (upgrade.has('Save', 3)) {
        save();
      }
    },
    get: function get() {
      return currentState.units;
    },
    watch: function watch() {
      return unitDefer.promise;
    }
  };

  load();

  return {
    upgrade: upgrade,
    unit: unit,
    currencySet: currencySet,
    adSet: adSet,
    sourcesGet: sourcesGet,
    historyGet: historyGet,
    achievementGet: achievementGet,
    achieve: achieve,
    save: save,
    buildSaveObject: buildSaveObject,
    hardReset: hardReset
  };
};

gameState.$inject = ['$q', 'notificationService', '$filter', 'Upgrades', 'Achievements', 'GainCalculator', 'localStorageService', 'AnimatedFlyTip'];

module.exports = gameState;

},{}],"/home/seiyria/projects/c/src/js/gametimer.js":[function(require,module,exports){
'use strict';

var gameTimer = function gameTimer($q, $interval, $timeout, $window, GameState, AdManager, GainCalculator) {

  var interval = null;
  var timerDefer = $q.defer();

  var startTimer = function startTimer() {
    var upgradeData = arguments[0] === undefined ? { key: 'Timer' } : arguments[0];

    if (!GameState.upgrade.has('Basic Timer')) {
      return;
    }
    if (!_.contains(upgradeData.key, 'Timer')) {
      return;
    }

    if (interval) {
      $interval.cancel(interval);
    }

    interval = $interval(function () {
      $window.increaseUnits(1 + GainCalculator.timerBoost(GameState.upgrade), 'Timer');
      timerDefer.notify(GainCalculator.timer(GameState.upgrade));
    }, GainCalculator.timer(GameState.upgrade));

    timerDefer.notify(GainCalculator.timer(GameState.upgrade));
  };

  if (GameState.upgrade.has('Basic Timer')) {
    $timeout(startTimer, 0);
  }

  GameState.upgrade.watch().then(null, null, startTimer);

  return {
    watch: function watch() {
      return timerDefer.promise;
    }
  };
};

gameTimer.$inject = ['$q', '$interval', '$timeout', '$window', 'GameState', 'AdManager', 'GainCalculator'];

module.exports = gameTimer;

},{}],"/home/seiyria/projects/c/src/js/sankey.js":[function(require,module,exports){
'use strict';

var sankeyFunctionality = require('../extjs/sankeyfunctionality');
d3.sankey = sankeyFunctionality;

var sankey = function sankey(UpgradePath) {
  return {
    restrict: 'E',
    scope: {},
    link: function link(scope, element) {

      var constants = {
        OPACITY_LOW: 0.2,
        OPACITY_HIGH: 0.6
      };

      scope.data = UpgradePath.get();

      var width = 500;
      var height = 750;

      var svg = d3.select(element[0]).append('svg').attr('height', height).style('width', '100%').style('height', height);

      var sankeyD = d3.sankey().nodeWidth(8).nodePadding(10).size([width, height]);

      var color = d3.scale.category20();
      var path = sankeyD.link();

      var _initLinks = function _initLinks() {
        var link = svg.append('g').selectAll('.link').data(scope.data.links).enter().append('path').attr('class', 'link').attr('d', path).attr('stroke-width', function (d) {
          return Math.max(1, d.dy);
        }).attr('stroke', function (d) {
          return d3.rgb(color(d.source.name.split(' ').join(''))).darker();
        }).attr('opacity', constants.OPACITY_LOW).on('mouseover', function () {
          d3.select(this).transition().style('opacity', constants.OPACITY_HIGH);
        }).on('mouseout', function () {
          d3.select(this).transition().style('opacity', constants.OPACITY_LOW);
        }).sort(function (a, b) {
          return b.dy - a.dy;
        });

        link.append('title').text(function (d) {
          return '' + d.source.name + ' -> ' + d.target.name;
        });
      };

      var _initNodes = function _initNodes() {
        var node = svg.append('g').selectAll('.node').data(scope.data.nodes).enter().append('g').attr('class', 'node').attr('transform', function (d) {
          return 'translate(' + d.x + ',' + (_.isNaN(d.y) ? 0 : d.y) + ')';
        });

        var mouseFilter = function mouseFilter(d, opacity) {
          svg.selectAll('.link').filter(function (l) {
            return l.source === d || l.target === d;
          }).transition().style('opacity', opacity);
        };

        node.append('rect').attr('height', function (d) {
          return d.dy;
        }).attr('width', sankeyD.nodeWidth()).style('fill', function (d) {
          return color(d.name.split(' ').join(''));
        }).style('stroke', function (d) {
          return d3.rgb(d.color).darker(2);
        }).on('mouseover', function (d) {
          return mouseFilter(d, constants.OPACITY_HIGH);
        }).on('mouseout', function (d) {
          return mouseFilter(d, constants.OPACITY_LOW);
        }).on('dblclick', function (d) {
          svg.selectAll('.link').filter(function (l) {
            return l.target === d;
          }).attr('display', function () {
            return d3.select(this).attr('display') === 'none' ? 'inline' : 'none';
          });
        }).append('title').text(function (d) {
          return d.name;
        });

        node.append('text').append('tspan').attr('x', -6).attr('y', function (d) {
          return d.dy / 2;
        }).attr('dy', '.35em').attr('text-anchor', 'end').attr('transform', null).text(function (d) {
          return d.name;
        }).filter(function (d) {
          return d.x < width * 0.75;
        }).attr('x', 2 + sankeyD.nodeWidth()).attr('text-anchor', 'start').filter(function (d) {
          return d.x > width * 0.25;
        }).attr('text-anchor', 'middle');
      };

      var reinit = function reinit() {
        svg.selectAll('g').remove();
        sankeyD.nodes(scope.data.nodes).links(scope.data.links).layout(256);

        _initLinks();
        _initNodes();
      };

      reinit();

      UpgradePath.watch().then(null, null, function () {
        scope.data = UpgradePath.get();

        reinit();
      });
    }
  };
};

sankey.$inject = ['UpgradePath'];

module.exports = sankey;

},{"../extjs/sankeyfunctionality":"/home/seiyria/projects/c/src/extjs/sankeyfunctionality.js"}],"/home/seiyria/projects/c/src/js/upgrademanager.js":[function(require,module,exports){
'use strict';

var upgradeManager = function upgradeManager(GameState, UPGRADES, favico) {

  var hasUpgrade = function hasUpgrade(key) {
    var level = arguments[1] === undefined ? 0 : arguments[1];

    return GameState.upgrade.has(key, level);
  };

  var visible = function visible() {

    var current = GameState.unit.get();
    var allRet = [];

    _.each(UPGRADES, function (item, itemName) {

      var ret = [];

      var meetsAllReqs = true;

      _.each(item.requirements, function (req, key) {
        if (!hasUpgrade(key, req)) {
          meetsAllReqs = false;
        }
      });

      if (!meetsAllReqs) {
        return;
      }

      var levels = item.levels;
      if (_.isFunction(item.levels)) {
        var nextLevel = GameState.upgrade.getKey(itemName) || 0;
        levels = {};
        levels[nextLevel] = item.levels(nextLevel);
      }

      _.each(levels, function (level, i) {
        var visLevel = GameState.upgrade.getKey('Upgrade Visibility');
        var visibilityBoost = 1 + (_.isUndefined(visLevel) ? 0 : 0.15 * visLevel);
        var prevItem = ret[ret.length - 1];
        var totalCost = level.cost + (prevItem ? prevItem.cost : 0);

        if (hasUpgrade(itemName, i) || totalCost / visibilityBoost > current) {
          return;
        }

        ret.push({
          name: itemName,
          level: i,
          cost: totalCost,
          description: level.description,
          buyLevels: 1 + (prevItem ? prevItem.buyLevels : 0),
          category: item.category
        });
      });

      allRet.push.apply(allRet, ret);
    });

    if (hasUpgrade('Alphabetized Upgrades')) {
      allRet = _.sortByOrder(allRet, ['name', 'level'], [true, true]);
    }

    if (hasUpgrade('Best Favicon')) {
      var buyableUpgrades = _.filter(allRet, function (item) {
        return item.cost < current;
      }).length;
      if (buyableUpgrades > 0) {
        favico.badge(buyableUpgrades);
      } else {
        favico.reset();
      }
    }

    return allRet;
  };

  var upgrades = function upgrades() {
    var ret = [];
    _.each(GameState.upgrade.get(), function (val, key) {
      for (var i = 0; i < val; i++) {
        ret.push({ name: key, level: i, cost: UPGRADES[key] ? UPGRADES[key].levels[i].cost : 0 });
      }
    });

    if (hasUpgrade('Alphabetized Upgrades')) {
      ret = _.sortByOrder(ret, ['name', 'level'], [true, true]);
    }

    return ret;
  };

  var maxUpgrades = function maxUpgrades() {
    return _.reduce(UPGRADES, function (prev, obj) {
      return prev + obj.levels.length;
    }, 0);
  };

  return {
    visible: _.throttle(visible, 50),
    upgrades: _.throttle(upgrades, 50),
    maxUpgrades: _.throttle(maxUpgrades, 50)
  };
};

upgradeManager.$inject = ['GameState', 'Upgrades', 'favico'];

module.exports = upgradeManager;

},{}],"/home/seiyria/projects/c/src/js/upgradepath.js":[function(require,module,exports){
'use strict';

var upgradePath = function upgradePath($q, GameState, UPGRADES) {
  var defer = $q.defer();

  var structure = {
    nodes: [],
    links: []
  };

  var recalculate = function recalculate() {
    structure.nodes = _(GameState.upgrade.get()).keys().filter(function (key) {
      return _.has(UPGRADES, key);
    }).map(function (key) {
      return { name: key };
    }).value();
    structure.links = _(structure.nodes).map(function (node) {
      var nodeLinks = [];

      _.each(UPGRADES[node.name].requirements, function (val, key) {
        nodeLinks.push({
          source: _.findWhere(structure.nodes, { name: key }),
          value: 1,
          target: _.findWhere(structure.nodes, { name: node.name })
        });
      });

      return nodeLinks;
    }).flatten().value();

    defer.notify(structure);
  };

  recalculate();

  GameState.upgrade.watch().then(null, null, recalculate);

  return {
    get: function get() {
      return structure;
    },
    watch: function watch() {
      return defer.promise;
    }
  };
};

upgradePath.$inject = ['$q', 'GameState', 'Upgrades'];

module.exports = upgradePath;

},{}],"/home/seiyria/projects/c/src/js/upgrades.js":[function(require,module,exports){
'use strict';

module.exports = {
  Scoreboard: {
    category: 'Visual',
    levels: [{ cost: 5, description: 'Visualize your score!' }]
  },
  'Basic Layout': {
    category: 'Visual',
    levels: [{ cost: 15, description: 'A slightly better layout.' }, { cost: 200, description: 'Another slightly better layout.' }]
  },
  'Better Layout': {
    category: 'Visual',
    requirements: { 'Basic Layout': 1 },
    levels: [{ cost: 200, description: 'One of the better layouts you get to see.' }, { cost: 2000, description: 'Probably the best layout in the game.' }]
  },
  Function: {
    category: 'Tech',
    levels: [{ cost: 20, description: 'Access to a function is necessary to gain more power.' }]
  },
  'Basic Iteration': {
    category: 'Tech',
    requirements: { Function: 0 },
    levels: [{ cost: 50, description: 'More iterations means faster production.' }, { cost: 300, description: 'Even more iterations means even faster production.' }, { cost: 20000, description: 'Yet more iterations means yet faster production.' }, { cost: 150000, description: 'Many iterations means much faster production.' }]
  },
  'Basic Timer': {
    category: 'Tech',
    requirements: { Function: 0 },
    levels: [{ cost: 50, description: 'A timer runs and automatically produces for you every so often.' }, { cost: 600, description: 'The timing of the timer is slightly faster.' }, { cost: 20000, description: 'The timer runs even faster now.' }, { cost: 100000, description: 'The timer goes zoom zoom!' }]
  },
  'Basic Boost': {
    category: 'Tech',
    requirements: { Function: 0 },
    levels: [{ cost: 10, description: 'Bigger boost means more production happening at once.' }, { cost: 1000, description: 'Even bigger boost means even more production.' }, { cost: 25000, description: 'Yet a bigger boost means a higher production yield.' }, { cost: 200000, description: 'The biggest boost means the best production.' }]
  },
  Capitalization: {
    category: 'Visual',
    requirements: { Scoreboard: 0 },
    levels: [{ cost: 100, description: 'Sometimes good punctuation just looks nice.' }]
  },
  Preformatting: {
    category: 'Visual',
    requirements: { 'Basic Iteration': 0 },
    levels: [{ cost: 1500, description: 'Better code formatting for readability' }]
  },
  'Visual Countdown': {
    category: 'Visual',
    requirements: { 'Basic Timer': 0 },
    levels: [{ cost: 1000, description: 'It might help to see the countdown for the timer run.' }]
  },
  'Page Title': {
    category: 'Cosmetic',
    requirements: { 'Basic Layout': 0 },
    levels: [{ cost: 500, description: 'A nicer looking page title. So revealing!' }]
  },
  'Better Page Title': {
    category: 'Cosmetic',
    requirements: { 'Page Title': 0, Scoreboard: 0 },
    levels: [{ cost: 2500, description: 'Just when you thought the page title looked good, it gets better!' }]
  },
  'Alphabetized Upgrades': {
    category: 'Cosmetic',
    requirements: { Capitalization: 0, 'Better Layout': 0 },
    levels: [{ cost: 5000, description: 'Putting the upgrades in some kind of order makes them much easier to navigate.' }]
  },
  'Upgrade Visibility': {
    category: 'Cosmetic',
    requirements: { 'Alphabetized Upgrades': 0 },
    levels: [{ cost: 6500, description: 'Upgrades will appear slightly before you can buy them.' }, { cost: 8500, description: 'Upgrades will appear a while before you can buy them.' }, { cost: 10500, description: 'Upgrades will show up quite a ways before you can buy them.' }]
  },
  'Progress Bar': {
    category: 'Visual',
    requirements: { 'Better Layout': 1, 'Basic Color': 0, 'Visual Countdown': 0 },
    levels: [{ cost: 5000, description: 'Transform your countdown into a progress bar instead!' }]
  },
  'Basic Style': {
    category: 'Visual',
    requirements: { 'Better Layout': 1 },
    levels: [{ cost: 10000, description: 'Yes, it does get better! This upgrade makes the table look nicer.' }, { cost: 20000, description: 'This upgrade fixes some slight alignment issues introduced by the previous upgrade.' }]
  },
  'Basic Color': {
    category: 'Visual',
    requirements: { 'Basic Style': 0 },
    levels: [{ cost: 12500, description: 'Add some color to the page.' }]
  },
  Iconography: {
    category: 'Visual',
    requirements: { 'Basic Style': 0 },
    levels: [{ cost: 25000, description: 'Get some icons on the page.' }]
  },
  'Number Formatting': {
    category: 'Cosmetic',
    requirements: { 'Basic Style': 0 },
    levels: [{ cost: 20000, description: 'Format the numbers more nicely!' }]
  },
  'Basic Animation': {
    category: 'Cosmetic',
    requirements: { 'Basic Style': 0, 'Basic Iteration': 0, 'Basic Color': 0, 'Better Layout': 1 },
    levels: [{ cost: 100000, description: 'Sprinkle some animations onto the page.' }]
  },
  Favicon: {
    category: 'Cosmetic',
    requirements: { 'Better Layout': 1 },
    levels: [{ cost: 2000, description: 'Add the favicon to the header bar.' }]
  },
  'Best Favicon': {
    category: 'Cosmetic',
    requirements: { 'Better Page Title': 0, Favicon: 0 },
    levels: [{ cost: 100000, description: 'Get notified via favicon whenever you have a new upgrade to purchase.' }]
  },
  'Syntax Highlighting': {
    category: 'Cosmetic',
    requirements: { Preformatting: 0 },
    levels: [{ cost: 50000, description: 'Make every code portion look even better!' }]
  },
  Save: {
    category: 'Tech',
    requirements: { 'Basic Layout': 0 },
    levels: [{ cost: 300, description: 'Introduce a save button that allows you to save your progress.' }, { cost: 5000, description: 'Introduce a mechanic that saves occasionally.' }, { cost: 20000, description: 'Introduce a debug menu where you can see your save data.' }, { cost: 150000, description: 'Make the game save automatically after production or purchases.' }]
  },
  'Advanced Timer': {
    category: 'Tech',
    requirements: { 'Basic Timer': 3 },
    levels: [{ cost: 200000, description: 'The timer is back and faster than ever.' }, { cost: 750000, description: 'Just when you thought the timer was out of tricks, it gets faster!' }, { cost: 1500000, description: 'The fastest timer yet!' }, { cost: 1000000000, description: 'This costs 1,000,000,000 snot bubbles, or what have you.' }]
  },
  'Best Table': {
    category: 'Tech',
    requirements: { 'Basic Style': 1, 'Alphabetized Upgrades': 0 },
    levels: [{ cost: 250000, description: 'This gives you the best upgrade table possible!' }]
  },
  Menu: {
    category: 'Tech',
    requirements: { 'Basic Layout': 0 },
    levels: [{ cost: 2500, description: 'Buy a dropdown menu. Things end up here.' }]
  },
  'Help Menu': {
    category: 'Tech',
    requirements: { Menu: 0 },
    levels: [{ cost: 2, description: 'The cheapest upgrade in the game. I bet you have no idea what it does.' }]
  },
  Tooltips: {
    category: 'Tech',
    requirements: { 'Help Menu': 0 },
    levels: [{ cost: 17500, description: 'Well, this sure is self-referential.' }]
  },
  'Options Menu': {
    category: 'Tech',
    requirements: { Menu: 0 },
    levels: [{ cost: 5000, description: 'All of the stange options go here. Also, you can reset your game.' }]
  },
  'Offline Progress': {
    category: 'Tech',
    requirements: { 'Basic Timer': 0 },
    levels: [{ cost: 10000, description: 'You will gain progress slowly, even while the game is not open.' }, { cost: 100000, description: 'You will gain progress slightly faster, even while the game is not open.' }, { cost: 1000000, description: 'You will gain progress normally, even while the game is not open.' }]
  },
  'Confirmation Dialogs': {
    category: 'Tech',
    requirements: { 'Help Menu': 0 },
    levels: [{ cost: 100000, description: 'You get notified of potentially dangerous actions. Beware!' }]
  },
  'Currency Name Change': {
    category: 'Cosmetic',
    requirements: { 'Options Menu': 0 },
    levels: [{ cost: 650000, description: 'If you dislike the name units, you can change it!' }]
  },
  'Basic Timer Boost': {
    category: 'Tech',
    requirements: { 'Basic Timer': 0 },
    levels: [{ cost: 10000, description: 'You get more production via timer methods.' }, { cost: 500000, description: 'You get even more production via the timer.' }, { cost: 2500000, description: 'The timer is now quite lucrative.' }]
  },
  Notifications: {
    category: 'Tech',
    requirements: { 'Basic Animation': 0, Iconography: 0, 'Basic Color': 0, 'Basic Style': 0 },
    levels: [{ cost: 50000, description: 'Get notified about various happenings!' }]
  },
  Advertisements: {
    category: 'Tech',
    requirements: { Notifications: 0 },
    levels: [{ cost: 20000, description: 'Advertisements for other, related games!' }]
  },
  Adblocker: {
    category: 'Tech',
    requirements: { Advertisements: 0 },
    levels: [{ cost: 200000, description: 'Ads got you down? Turn them off with this fancy upgrade!' }]
  },
  'Tabbed Output': {
    category: 'Tech',
    requirements: { 'Better Layout': 0, 'Basic Style': 0 },
    levels: [{ cost: 200000, description: 'Produce some tabs for your output section! Note, this only comes with one tab -- the one you have!' }]
  },
  'Production Over Time': {
    category: 'Tech',
    requirements: { 'Tabbed Output': 0, 'Number Formatting': 0 },
    levels: [{ cost: 2000000, description: 'Produce a new tab that shows your production over time!' }]
  },
  'Production Breakdown': {
    category: 'Tech',
    requirements: { 'Tabbed Output': 0, 'Number Formatting': 0 },
    levels: [{ cost: 2000000, description: 'Produce a new tab that shows your production breakdown!' }]
  },
  'Production History': {
    category: 'Tech',
    requirements: { 'Production Breakdown': 0 },
    levels: [{ cost: 50000, description: 'Slightly improve your historical data!' }, { cost: 125000, description: 'Slightly improve your historical data!' }]
  },
  'Production Labels': {
    category: 'Tech',
    requirements: { 'Production Over Time': 0 },
    levels: [{ cost: 50000, description: 'Get some labels on that chart!' }]
  },
  'Breakdown Labels': {
    category: 'Tech',
    requirements: { 'Production Breakdown': 0 },
    levels: [{ cost: 50000, description: 'Get some labels on that chart!' }]
  },
  Achievements: {
    category: 'Tech',
    requirements: { Scoreboard: 0, Notifications: 0 },
    levels: [{ cost: 75000, description: 'If you have goals in life, this is recommended.' }]
  },
  'Achievements Menu': {
    category: 'Tech',
    requirements: { Achievements: 0, Menu: 0 },
    levels: [{ cost: 777777, description: 'If you want to view your goals in life, this is recommended.' }]
  },
  'Upgrade Tree': {
    category: 'Tech',
    requirements: { 'Tabbed Output': 0, 'Basic Color': 0, Tooltips: 0, 'Basic Animation': 0 },
    levels: [{ cost: 100000, description: 'Visualize the upgrade tree! Oooh, pretty!' }]
  },
  'Upgrades Menu': {
    category: 'Tech',
    requirements: { Menu: 0 },
    levels: [{ cost: 150000, description: 'See what this game has cost you!' }]
  }
};

},{}]},{},["./src/js/main.js"])
//# sourceMappingURL=data:application/json;base64,
